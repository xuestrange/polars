Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.group_by_rolling", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_last", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.group_by_rolling.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_last.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["Index", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.group_by_rolling", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.apply", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_batches", "polars.Expr.map_dict", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.prefix", "polars.Expr.name.suffix", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_apply", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.json_decode", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.reverse", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.lit", "polars.map", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.columns", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.group_by_rolling", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.apply", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.set_ordering", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_first_distinct", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_last", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.json_decode", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.reverse", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 104, 134, 152, 206, 280, 294, 507, 706, 741, 837, 888, 1064, 1213], "refer": [0, 40, 113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 127, 160, 294, 394, 397, 505, 550, 554, 597, 628, 629, 630, 634, 741, 765, 849, 952, 955, 1084, 1167, 1168, 1169, 1173, 1213], "input": [0, 78, 84, 106, 114, 115, 155, 182, 185, 206, 210, 219, 236, 237, 240, 244, 247, 259, 269, 270, 273, 294, 301, 338, 416, 439, 499, 506, 507, 516, 539, 554, 586, 624, 625, 626, 627, 658, 660, 662, 663, 665, 668, 670, 671, 672, 674, 679, 683, 692, 693, 700, 701, 702, 704, 705, 706, 708, 712, 720, 723, 725, 731, 741, 753, 757, 777, 780, 807, 808, 809, 811, 815, 820, 826, 827, 830, 849, 893, 994, 1060, 1061, 1064, 1114, 1213], "output": [0, 13, 35, 37, 40, 41, 42, 43, 44, 57, 119, 153, 183, 184, 186, 187, 200, 206, 210, 213, 219, 221, 230, 232, 236, 247, 265, 269, 294, 304, 306, 308, 356, 496, 503, 504, 505, 507, 515, 527, 547, 559, 564, 566, 568, 570, 589, 604, 655, 659, 661, 663, 673, 685, 686, 704, 705, 706, 741, 753, 778, 779, 781, 782, 791, 792, 796, 797, 805, 807, 809, 826, 832, 837, 849, 856, 857, 859, 909, 1064, 1082, 1128, 1143, 1201, 1213], "seri": [0, 1, 2, 16, 30, 69, 70, 79, 80, 81, 82, 86, 87, 88, 103, 105, 108, 110, 137, 139, 140, 144, 163, 172, 175, 178, 180, 183, 188, 191, 192, 193, 195, 197, 199, 207, 208, 209, 210, 214, 215, 226, 227, 228, 230, 234, 246, 247, 251, 254, 257, 258, 274, 294, 307, 308, 319, 327, 334, 335, 337, 390, 419, 425, 429, 430, 437, 441, 444, 445, 448, 450, 451, 452, 464, 471, 473, 494, 496, 501, 503, 505, 507, 544, 550, 551, 552, 553, 555, 557, 559, 560, 561, 567, 575, 578, 589, 617, 628, 629, 630, 634, 638, 645, 646, 654, 663, 665, 669, 676, 677, 680, 681, 685, 686, 688, 689, 694, 696, 700, 701, 703, 704, 705, 706, 714, 716, 717, 720, 723, 728, 729, 732, 741, 753, 774, 778, 805, 831, 849, 1205, 1207, 1209, 1212, 1214, 1217, 1218, 1219, 1221], "datafram": [0, 1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 78, 79, 80, 81, 82, 84, 85, 86, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 131, 132, 133, 137, 138, 141, 142, 150, 292, 293, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 370, 372, 374, 375, 376, 380, 382, 383, 384, 387, 388, 389, 390, 392, 394, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 507, 508, 509, 510, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 609, 610, 612, 613, 614, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 686, 690, 691, 692, 693, 694, 695, 696, 698, 701, 702, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 720, 721, 722, 723, 724, 725, 726, 729, 730, 731, 737, 741, 753, 762, 763, 766, 770, 771, 775, 778, 786, 787, 788, 789, 791, 792, 796, 797, 801, 804, 814, 815, 821, 822, 823, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 852, 873, 875, 886, 909, 910, 948, 990, 1021, 1022, 1031, 1064, 1082, 1141, 1158, 1159, 1182, 1190, 1191, 1201, 1213, 1220, 1221], "lazyfram": [0, 1, 63, 64, 66, 68, 78, 79, 80, 81, 82, 84, 85, 86, 128, 129, 130, 131, 132, 133, 134, 137, 138, 144, 204, 220, 221, 237, 270, 294, 422, 496, 741, 753, 848, 852, 1220, 1221], "express": [0, 13, 57, 58, 59, 84, 85, 141, 144, 146, 155, 168, 170, 172, 182, 185, 206, 217, 221, 231, 236, 237, 240, 244, 259, 269, 270, 273, 280, 294, 301, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 318, 319, 324, 327, 329, 330, 331, 338, 341, 342, 343, 355, 356, 357, 359, 362, 363, 364, 365, 366, 367, 368, 370, 372, 374, 375, 376, 378, 380, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 394, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 416, 418, 419, 421, 422, 426, 428, 429, 431, 432, 433, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 454, 457, 462, 463, 465, 466, 467, 470, 471, 476, 478, 495, 496, 501, 502, 504, 505, 506, 507, 511, 512, 513, 514, 515, 516, 518, 520, 522, 524, 526, 527, 528, 529, 530, 531, 534, 535, 536, 538, 539, 543, 544, 545, 546, 547, 549, 553, 554, 555, 557, 573, 574, 575, 577, 579, 581, 582, 584, 586, 589, 590, 591, 592, 594, 596, 597, 598, 599, 600, 602, 603, 604, 612, 613, 617, 618, 619, 620, 632, 641, 642, 645, 647, 648, 651, 652, 654, 655, 657, 658, 659, 660, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 700, 701, 702, 703, 704, 705, 706, 708, 712, 714, 716, 717, 718, 719, 720, 721, 723, 725, 727, 728, 729, 731, 732, 737, 740, 753, 757, 762, 763, 769, 770, 771, 774, 777, 780, 801, 807, 808, 811, 812, 813, 815, 820, 826, 827, 828, 830, 837, 849, 852, 893, 908, 918, 978, 994, 1027, 1028, 1031, 1064, 1108, 1114, 1115, 1129, 1130, 1131, 1136, 1137, 1138, 1139, 1141, 1151, 1152, 1213], "selector": [0, 40, 156, 162, 164, 168, 212, 219, 221, 253, 261, 263, 294, 416, 741, 753, 759, 766, 767, 770, 796, 821, 849], "extend": [0, 106, 267, 294, 419, 741, 753, 858, 978, 1213], "function": [0, 40, 69, 78, 79, 80, 81, 82, 85, 87, 88, 104, 110, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 127, 128, 133, 137, 138, 139, 140, 142, 152, 153, 160, 167, 175, 206, 212, 220, 221, 255, 256, 260, 263, 264, 275, 280, 294, 304, 308, 355, 391, 413, 414, 415, 496, 503, 504, 505, 507, 527, 539, 543, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 583, 649, 659, 663, 674, 676, 677, 680, 681, 682, 683, 693, 694, 696, 698, 699, 702, 704, 705, 706, 709, 710, 713, 716, 722, 726, 730, 737, 741, 753, 762, 763, 765, 771, 791, 792, 796, 800, 832, 837, 849, 859, 908, 949, 971, 972, 973, 974, 990, 1057, 1064, 1082, 1093, 1094, 1107, 1110, 1117, 1122, 1195, 1213, 1221], "data": [0, 1, 6, 15, 23, 24, 26, 33, 36, 37, 38, 39, 40, 41, 42, 45, 46, 57, 58, 59, 63, 69, 78, 79, 81, 86, 88, 93, 94, 98, 100, 103, 104, 105, 106, 107, 108, 109, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 132, 137, 138, 139, 140, 142, 143, 144, 146, 152, 158, 169, 181, 182, 183, 184, 185, 186, 187, 200, 201, 202, 204, 206, 219, 220, 224, 230, 231, 232, 233, 242, 250, 255, 256, 260, 269, 272, 292, 294, 304, 305, 306, 310, 311, 312, 313, 314, 315, 318, 321, 322, 323, 324, 325, 327, 329, 330, 331, 333, 334, 338, 341, 342, 343, 356, 357, 362, 363, 366, 367, 368, 370, 372, 374, 375, 376, 378, 380, 382, 383, 384, 385, 387, 388, 389, 391, 392, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 418, 429, 431, 432, 433, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 457, 462, 463, 465, 471, 476, 478, 484, 495, 497, 502, 507, 534, 535, 538, 539, 547, 549, 550, 553, 555, 557, 559, 562, 563, 564, 565, 566, 568, 569, 570, 571, 573, 581, 582, 583, 589, 591, 592, 594, 596, 597, 598, 599, 602, 603, 604, 617, 618, 619, 620, 628, 629, 630, 632, 634, 637, 647, 648, 649, 651, 652, 655, 658, 663, 665, 684, 685, 686, 687, 688, 689, 690, 700, 701, 703, 704, 705, 706, 714, 717, 727, 728, 729, 732, 737, 741, 753, 760, 761, 762, 771, 777, 778, 779, 780, 781, 782, 800, 805, 826, 849, 856, 857, 869, 873, 874, 875, 876, 878, 882, 884, 892, 893, 896, 909, 916, 917, 920, 921, 922, 924, 926, 928, 929, 933, 935, 938, 940, 941, 942, 943, 945, 946, 947, 949, 950, 953, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 976, 977, 990, 996, 998, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1014, 1023, 1024, 1026, 1032, 1037, 1039, 1045, 1056, 1058, 1064, 1076, 1082, 1084, 1089, 1091, 1104, 1106, 1117, 1122, 1128, 1129, 1130, 1131, 1133, 1135, 1136, 1137, 1138, 1141, 1142, 1143, 1156, 1157, 1158, 1159, 1167, 1168, 1169, 1171, 1173, 1176, 1193, 1194, 1195, 1196, 1198, 1203, 1212, 1213, 1220], "type": [0, 1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 93, 103, 105, 106, 107, 108, 109, 114, 115, 116, 118, 119, 123, 124, 125, 128, 129, 130, 132, 136, 137, 138, 139, 140, 143, 144, 153, 175, 181, 183, 184, 186, 187, 188, 201, 202, 206, 230, 250, 256, 258, 261, 294, 304, 306, 310, 311, 312, 313, 314, 315, 318, 324, 327, 329, 330, 331, 333, 334, 335, 338, 341, 342, 343, 356, 357, 362, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 416, 418, 429, 432, 434, 439, 440, 441, 442, 443, 444, 445, 446, 447, 462, 463, 465, 471, 476, 478, 495, 496, 507, 547, 549, 553, 554, 555, 557, 559, 581, 582, 589, 591, 592, 594, 596, 597, 598, 599, 602, 603, 604, 617, 618, 619, 620, 628, 632, 647, 648, 649, 655, 663, 665, 674, 684, 685, 686, 687, 688, 689, 690, 692, 693, 700, 701, 702, 703, 704, 705, 706, 714, 717, 727, 728, 729, 732, 737, 741, 753, 762, 763, 769, 771, 778, 779, 781, 782, 786, 801, 805, 813, 821, 849, 856, 857, 869, 874, 876, 878, 882, 884, 886, 893, 909, 916, 919, 920, 921, 922, 923, 924, 926, 927, 928, 929, 933, 934, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 953, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 976, 988, 996, 998, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1014, 1023, 1024, 1026, 1032, 1037, 1039, 1056, 1057, 1076, 1082, 1088, 1089, 1091, 1117, 1128, 1129, 1130, 1131, 1133, 1135, 1136, 1137, 1138, 1141, 1142, 1143, 1156, 1157, 1158, 1159, 1167, 1171, 1193, 1194, 1196, 1204, 1213, 1220], "config": [0, 78, 236, 269, 294, 690, 753, 762, 807, 826, 849], "except": [0, 137, 189, 203, 205, 248, 294, 692, 753, 787, 849, 852, 989, 1019, 1184, 1194, 1203, 1213], "test": [0, 6, 116, 117, 119, 125, 753, 783, 790, 849], "util": [0, 110, 696, 753, 771, 849], "sql": [0, 38, 63, 67, 116, 117, 202, 240, 294, 489, 576, 721, 741, 753, 811, 849, 1050, 1114, 1213], "These": [1, 40, 116, 150, 260, 294, 405, 740, 741, 949, 963], "allow": [1, 13, 39, 40, 57, 58, 59, 69, 88, 93, 104, 116, 128, 131, 132, 133, 134, 144, 146, 152, 200, 203, 204, 231, 232, 234, 255, 256, 261, 272, 294, 387, 394, 397, 484, 505, 507, 552, 573, 628, 629, 630, 741, 786, 787, 791, 792, 796, 821, 828, 849, 852, 945, 952, 955, 970, 1045, 1064, 1086, 1106, 1109, 1167, 1168, 1169, 1195, 1213, 1221], "you": [1, 15, 19, 40, 45, 59, 68, 78, 85, 86, 103, 105, 106, 107, 109, 114, 115, 116, 117, 119, 120, 123, 124, 126, 128, 132, 134, 150, 169, 183, 184, 186, 187, 199, 200, 206, 217, 221, 230, 231, 232, 233, 252, 255, 260, 280, 294, 383, 384, 387, 390, 394, 397, 405, 416, 422, 439, 470, 496, 505, 507, 552, 558, 559, 562, 563, 564, 565, 566, 568, 569, 570, 603, 676, 685, 690, 694, 706, 714, 717, 732, 741, 763, 767, 778, 779, 781, 782, 783, 790, 805, 813, 837, 849, 852, 941, 942, 948, 949, 952, 955, 963, 977, 994, 1031, 1064, 1086, 1092, 1142, 1169, 1203, 1213, 1221], "regist": [1, 63, 65, 66, 67, 68, 79, 80, 81, 82, 145, 147, 741, 1220], "custom": [1, 32, 39, 40, 79, 80, 81, 82, 145, 146, 147, 153, 206, 275, 280, 294, 308, 394, 397, 496, 503, 505, 507, 560, 561, 663, 704, 705, 706, 741, 791, 792, 832, 837, 849, 859, 952, 955, 1057, 1064, 1093, 1094, 1213, 1221], "dedic": [1, 104, 200, 232, 294], "namespac": [1, 293, 740, 753, 848, 1221], "underli": [1, 69, 88, 96, 103, 105, 106, 107, 109, 116, 123, 124, 126, 132, 141, 144, 146, 168, 169, 200, 201, 232, 250, 294, 328, 363, 364, 368, 372, 374, 375, 376, 378, 380, 382, 385, 388, 389, 390, 392, 406, 407, 408, 409, 552, 571, 590, 593, 741, 770, 849, 852, 877, 887, 917, 918, 922, 926, 928, 929, 933, 935, 938, 940, 943, 946, 947, 948, 950, 964, 965, 966, 967, 977, 1086, 1104, 1117, 1129, 1132, 1189, 1194, 1213], "polar": [1, 294, 740, 741, 747, 753, 849, 852, 1213, 1220], "class": [1, 2, 3, 4, 5, 22, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 141, 142, 233, 256, 294, 728, 737, 741, 747, 753, 849, 1193, 1194, 1213, 1220], "without": [1, 85, 110, 118, 121, 127, 129, 130, 134, 263, 264, 294, 308, 355, 391, 562, 563, 564, 565, 566, 568, 569, 570, 720, 741, 763, 849, 885, 888, 908, 949, 990, 1082, 1194, 1213], "requir": [1, 39, 40, 45, 59, 78, 104, 108, 116, 137, 138, 139, 140, 155, 160, 231, 256, 259, 294, 325, 413, 414, 415, 497, 507, 578, 628, 629, 630, 652, 717, 741, 757, 815, 820, 849, 875, 972, 973, 974, 1058, 1116, 1167, 1168, 1169, 1194, 1195, 1198, 1213], "subclass": [1, 294], "mixin": 1, "expr": [1, 78, 79, 80, 81, 82, 168, 170, 202, 203, 217, 221, 231, 236, 237, 269, 270, 294, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 736, 737, 741, 742, 743, 746, 747, 748, 749, 750, 770, 772, 786, 787, 802, 807, 808, 809, 812, 826, 827, 849, 908, 918, 945, 963, 979, 984, 1021, 1022, 1027, 1028, 1031, 1036, 1051, 1054, 1115, 1129, 1134, 1160, 1185, 1213], "ar": [1, 15, 16, 22, 25, 35, 37, 39, 40, 57, 58, 59, 68, 69, 78, 85, 86, 87, 88, 95, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 142, 144, 150, 152, 155, 160, 164, 167, 170, 174, 175, 181, 182, 183, 184, 185, 186, 187, 200, 202, 203, 204, 206, 212, 213, 219, 221, 230, 231, 232, 233, 236, 237, 238, 240, 244, 251, 256, 259, 264, 265, 269, 270, 273, 294, 304, 306, 338, 344, 346, 348, 349, 391, 405, 410, 412, 413, 414, 415, 439, 441, 444, 445, 448, 450, 451, 452, 455, 458, 460, 478, 489, 496, 505, 506, 535, 539, 547, 550, 553, 554, 555, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 576, 580, 583, 585, 586, 599, 600, 601, 602, 609, 610, 611, 632, 637, 643, 659, 660, 662, 668, 670, 671, 672, 673, 679, 683, 685, 686, 688, 689, 708, 712, 720, 723, 725, 728, 729, 731, 733, 734, 736, 740, 741, 742, 743, 746, 747, 748, 749, 750, 753, 757, 762, 763, 767, 771, 772, 777, 778, 779, 780, 781, 782, 783, 786, 787, 790, 792, 796, 797, 801, 803, 805, 807, 808, 810, 811, 815, 820, 823, 826, 827, 828, 830, 849, 852, 856, 857, 885, 893, 902, 903, 949, 963, 969, 971, 972, 973, 974, 987, 994, 998, 1002, 1003, 1007, 1008, 1009, 1010, 1017, 1018, 1021, 1039, 1050, 1057, 1082, 1084, 1089, 1100, 1114, 1119, 1122, 1138, 1139, 1140, 1148, 1149, 1150, 1169, 1171, 1176, 1183, 1195, 1203, 1205, 1207, 1209, 1213, 1214, 1217, 1218, 1219, 1221], "all": [1, 9, 13, 18, 22, 25, 30, 35, 37, 40, 46, 57, 65, 78, 84, 103, 106, 108, 109, 114, 115, 118, 119, 120, 122, 125, 126, 128, 131, 132, 141, 142, 146, 150, 156, 161, 164, 171, 189, 195, 197, 199, 200, 201, 204, 205, 210, 212, 216, 217, 224, 231, 232, 233, 237, 243, 247, 248, 253, 255, 261, 263, 264, 265, 270, 294, 305, 307, 326, 344, 355, 360, 361, 362, 416, 421, 427, 434, 436, 438, 441, 445, 451, 452, 454, 458, 469, 470, 476, 492, 496, 504, 505, 523, 526, 527, 528, 529, 530, 531, 537, 545, 550, 556, 561, 578, 584, 586, 591, 592, 598, 599, 600, 601, 602, 607, 612, 613, 616, 622, 623, 624, 625, 642, 660, 676, 677, 678, 679, 682, 683, 685, 692, 694, 699, 716, 723, 724, 725, 731, 741, 747, 753, 759, 762, 763, 767, 769, 771, 773, 791, 792, 796, 801, 808, 813, 814, 821, 823, 827, 828, 849, 852, 908, 910, 913, 914, 916, 989, 996, 1014, 1019, 1030, 1031, 1037, 1053, 1057, 1084, 1094, 1123, 1130, 1131, 1137, 1138, 1139, 1140, 1141, 1146, 1151, 1152, 1155, 1161, 1162, 1163, 1164, 1184, 1213, 1220, 1221], "support": [1, 39, 40, 45, 86, 103, 104, 105, 106, 107, 108, 109, 110, 116, 117, 118, 119, 123, 124, 125, 129, 130, 133, 141, 146, 150, 200, 201, 202, 203, 207, 209, 214, 232, 233, 243, 244, 246, 252, 256, 294, 490, 539, 584, 586, 617, 737, 741, 747, 786, 787, 814, 815, 849, 852, 1051, 1123, 1156, 1195, 1213, 1220], "target": [1, 38, 39, 40, 83, 119, 294, 597, 628, 629, 630, 852, 1136, 1167, 1168, 1169], "thi": [1, 6, 9, 15, 17, 19, 35, 37, 38, 39, 40, 43, 45, 49, 57, 58, 59, 63, 64, 68, 69, 78, 84, 85, 86, 88, 103, 104, 105, 106, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 150, 152, 153, 154, 155, 158, 160, 164, 165, 167, 169, 173, 174, 175, 176, 181, 182, 183, 184, 185, 186, 187, 188, 192, 193, 195, 197, 198, 199, 200, 202, 203, 204, 206, 207, 209, 211, 212, 213, 214, 216, 217, 219, 222, 223, 224, 227, 228, 230, 231, 232, 233, 234, 236, 237, 240, 241, 243, 245, 246, 249, 250, 252, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 275, 276, 280, 293, 294, 304, 307, 308, 309, 318, 325, 332, 334, 335, 338, 344, 350, 351, 352, 353, 354, 355, 356, 362, 363, 375, 383, 384, 387, 390, 391, 394, 397, 405, 408, 412, 418, 434, 437, 438, 439, 442, 444, 446, 449, 454, 458, 466, 470, 471, 476, 478, 479, 484, 485, 486, 487, 488, 489, 491, 494, 496, 497, 500, 501, 503, 504, 505, 506, 507, 511, 512, 513, 514, 515, 516, 526, 528, 529, 530, 531, 532, 533, 535, 539, 545, 547, 550, 551, 552, 553, 555, 558, 559, 560, 562, 563, 564, 565, 566, 568, 569, 570, 573, 575, 576, 577, 578, 579, 584, 585, 586, 591, 597, 601, 605, 606, 607, 608, 609, 610, 611, 615, 616, 622, 623, 624, 625, 626, 627, 631, 637, 639, 642, 645, 646, 650, 652, 653, 654, 655, 659, 663, 664, 671, 674, 676, 680, 682, 683, 693, 694, 696, 698, 699, 702, 704, 706, 709, 710, 713, 720, 722, 726, 730, 731, 737, 741, 753, 754, 756, 757, 758, 761, 762, 763, 767, 769, 771, 777, 778, 779, 780, 781, 782, 784, 786, 787, 791, 792, 796, 797, 801, 803, 805, 807, 808, 809, 811, 812, 813, 814, 815, 819, 820, 821, 823, 826, 827, 828, 829, 832, 833, 837, 848, 849, 852, 858, 859, 868, 875, 881, 884, 886, 887, 888, 893, 896, 904, 905, 906, 907, 908, 909, 916, 917, 918, 929, 941, 942, 945, 948, 949, 952, 955, 963, 966, 971, 976, 977, 986, 988, 990, 995, 999, 1001, 1002, 1004, 1005, 1011, 1013, 1015, 1016, 1018, 1027, 1031, 1032, 1037, 1039, 1040, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1055, 1058, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 1073, 1074, 1077, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1092, 1093, 1095, 1096, 1098, 1101, 1102, 1103, 1106, 1107, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1118, 1123, 1124, 1126, 1130, 1136, 1140, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1154, 1155, 1161, 1162, 1163, 1164, 1169, 1170, 1176, 1177, 1182, 1183, 1185, 1186, 1189, 1191, 1193, 1194, 1195, 1197, 1198, 1200, 1201, 1202, 1203, 1213, 1220, 1221], "featur": [1, 45, 49, 83, 294], "i": [1, 6, 17, 19, 22, 37, 39, 40, 41, 42, 43, 44, 49, 57, 58, 59, 63, 68, 69, 78, 83, 84, 85, 86, 88, 90, 92, 93, 95, 99, 101, 103, 104, 105, 106, 107, 108, 109, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 154, 155, 158, 161, 164, 166, 167, 169, 172, 176, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 194, 196, 198, 200, 201, 202, 203, 204, 205, 206, 209, 212, 213, 217, 219, 220, 221, 228, 230, 231, 232, 233, 234, 237, 240, 243, 244, 245, 246, 248, 250, 255, 256, 259, 260, 261, 263, 264, 265, 266, 270, 272, 276, 280, 293, 294, 301, 304, 306, 307, 308, 309, 319, 355, 356, 360, 361, 362, 364, 374, 387, 391, 394, 405, 413, 414, 415, 418, 422, 434, 437, 439, 455, 461, 469, 470, 473, 474, 484, 489, 490, 494, 496, 500, 505, 507, 511, 514, 515, 516, 539, 547, 550, 552, 553, 555, 558, 559, 561, 562, 563, 564, 565, 566, 568, 569, 570, 573, 574, 575, 576, 579, 580, 583, 584, 585, 586, 588, 589, 590, 591, 592, 597, 598, 599, 602, 603, 607, 609, 610, 611, 612, 616, 617, 620, 622, 623, 624, 625, 628, 629, 630, 632, 634, 637, 655, 656, 659, 661, 664, 669, 671, 673, 674, 675, 676, 677, 680, 681, 685, 686, 688, 689, 694, 698, 699, 703, 706, 709, 710, 713, 717, 718, 719, 720, 722, 726, 728, 729, 730, 731, 737, 741, 756, 757, 761, 762, 763, 767, 769, 771, 774, 777, 778, 779, 780, 781, 782, 785, 786, 787, 789, 791, 792, 796, 797, 801, 805, 808, 809, 811, 813, 814, 815, 816, 820, 821, 823, 824, 827, 832, 833, 837, 849, 852, 856, 857, 858, 859, 885, 888, 893, 896, 908, 909, 910, 913, 914, 916, 918, 928, 945, 949, 952, 963, 970, 971, 972, 973, 974, 976, 977, 981, 987, 988, 989, 990, 995, 997, 1004, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1022, 1030, 1031, 1034, 1035, 1045, 1050, 1051, 1055, 1057, 1064, 1082, 1084, 1086, 1089, 1092, 1094, 1101, 1103, 1106, 1107, 1108, 1109, 1110, 1112, 1114, 1118, 1119, 1122, 1123, 1126, 1128, 1129, 1130, 1131, 1136, 1137, 1138, 1141, 1142, 1146, 1148, 1149, 1150, 1151, 1155, 1156, 1159, 1161, 1162, 1163, 1164, 1167, 1168, 1169, 1171, 1173, 1176, 1184, 1189, 1194, 1195, 1201, 1202, 1203, 1213, 1220, 1221], "primarili": 1, "intend": [1, 137, 138, 139, 140, 637, 1176], "us": [1, 12, 14, 16, 17, 19, 25, 30, 32, 37, 38, 40, 45, 48, 57, 59, 63, 64, 65, 66, 68, 69, 78, 85, 86, 87, 88, 104, 106, 107, 109, 111, 114, 115, 116, 117, 118, 119, 120, 122, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 153, 154, 156, 162, 164, 170, 171, 172, 175, 182, 183, 184, 185, 186, 187, 195, 197, 199, 200, 201, 203, 206, 207, 209, 212, 214, 216, 217, 219, 220, 221, 230, 231, 232, 233, 234, 236, 237, 241, 244, 245, 246, 252, 253, 254, 255, 256, 260, 261, 263, 264, 265, 266, 269, 270, 273, 280, 294, 302, 304, 306, 308, 309, 319, 328, 329, 335, 339, 340, 355, 360, 361, 369, 373, 377, 379, 381, 386, 390, 391, 393, 394, 397, 405, 408, 410, 413, 414, 415, 416, 421, 422, 438, 439, 455, 470, 484, 496, 505, 506, 507, 510, 539, 547, 550, 552, 554, 555, 558, 559, 561, 562, 563, 564, 565, 566, 568, 569, 570, 573, 575, 577, 578, 583, 585, 586, 588, 590, 593, 594, 595, 597, 598, 600, 601, 603, 604, 612, 617, 619, 621, 624, 625, 626, 627, 628, 629, 630, 634, 637, 656, 659, 660, 661, 662, 664, 672, 673, 675, 676, 678, 679, 682, 683, 685, 686, 687, 688, 689, 690, 694, 696, 703, 706, 707, 708, 711, 712, 714, 717, 718, 719, 720, 722, 723, 724, 725, 728, 729, 730, 731, 732, 737, 740, 741, 752, 753, 756, 759, 762, 763, 766, 767, 771, 772, 773, 774, 777, 778, 779, 781, 782, 783, 787, 789, 790, 796, 805, 807, 808, 812, 815, 816, 821, 823, 824, 826, 827, 830, 837, 849, 852, 856, 857, 859, 877, 878, 886, 888, 894, 895, 908, 909, 913, 914, 923, 927, 934, 936, 939, 944, 948, 949, 951, 952, 955, 963, 966, 969, 972, 973, 974, 979, 980, 984, 987, 990, 993, 994, 995, 1001, 1004, 1011, 1013, 1015, 1017, 1031, 1045, 1057, 1063, 1064, 1082, 1084, 1086, 1088, 1089, 1092, 1094, 1106, 1107, 1110, 1112, 1115, 1116, 1122, 1126, 1129, 1132, 1133, 1136, 1137, 1139, 1140, 1142, 1143, 1151, 1156, 1158, 1167, 1168, 1169, 1173, 1176, 1185, 1190, 1192, 1193, 1194, 1195, 1202, 1203, 1213, 1220, 1221], "librari": [1, 96, 116, 119, 505, 741, 1221], "author": 1, "domain": [1, 598, 1137], "specif": [1, 35, 39, 40, 103, 105, 107, 109, 114, 117, 118, 119, 123, 124, 125, 129, 143, 144, 156, 200, 294, 394, 397, 628, 629, 630, 634, 759, 849, 852, 952, 955, 1167, 1168, 1169, 1173, 1213, 1221], "capabl": [1, 40, 294], "which": [1, 11, 15, 25, 36, 37, 39, 40, 41, 42, 43, 44, 45, 57, 58, 59, 69, 78, 79, 80, 81, 82, 106, 114, 115, 116, 117, 118, 119, 128, 129, 130, 137, 138, 145, 147, 155, 156, 164, 169, 170, 182, 183, 184, 185, 186, 187, 193, 203, 230, 255, 259, 261, 265, 294, 304, 387, 391, 394, 405, 419, 439, 441, 445, 448, 450, 451, 452, 496, 507, 516, 554, 558, 559, 562, 563, 564, 565, 566, 568, 569, 570, 611, 632, 685, 686, 688, 689, 690, 728, 729, 731, 741, 757, 759, 767, 769, 778, 779, 781, 782, 787, 805, 809, 820, 821, 849, 945, 949, 952, 963, 977, 978, 994, 998, 1003, 1007, 1008, 1009, 1010, 1057, 1092, 1110, 1150, 1171, 1194, 1213, 1221], "mai": [1, 39, 49, 59, 85, 86, 103, 105, 106, 107, 109, 114, 116, 118, 120, 123, 124, 129, 130, 131, 132, 134, 137, 139, 167, 169, 183, 203, 206, 230, 241, 256, 263, 264, 265, 294, 308, 355, 362, 363, 375, 387, 391, 405, 416, 473, 494, 496, 505, 507, 515, 559, 562, 563, 564, 565, 566, 568, 569, 570, 577, 603, 676, 677, 680, 681, 685, 686, 688, 689, 694, 716, 728, 729, 741, 762, 763, 771, 778, 787, 791, 792, 805, 812, 823, 829, 832, 837, 849, 887, 888, 908, 916, 917, 929, 945, 949, 963, 971, 977, 990, 1034, 1064, 1082, 1115, 1142, 1169, 1194, 1213, 1221], "exist": [1, 38, 39, 40, 78, 118, 129, 144, 260, 264, 269, 270, 294, 303, 327, 330, 331, 364, 506, 741, 803, 823, 826, 827, 849, 852, 918, 1063, 1213], "belong": [1, 183, 294, 778, 849], "core": [1, 256, 294, 1221], "cannot": [1, 114, 115, 119, 120, 125, 148, 206, 233, 234, 280, 294, 328, 416, 484, 507, 573, 593, 619, 640, 706, 741, 813, 837, 849, 877, 1045, 1064, 1106, 1132, 1158, 1213], "overrid": [1, 40, 103, 105, 106, 107, 108, 109, 114, 116, 117, 119, 123, 124, 125, 141, 142, 146, 148, 294, 506, 554, 741, 849, 1063, 1088, 1213], "str": [1, 7, 8, 10, 11, 14, 15, 17, 20, 21, 22, 25, 26, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 57, 58, 59, 63, 64, 65, 66, 67, 68, 78, 79, 80, 81, 82, 83, 103, 104, 105, 106, 107, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 141, 142, 144, 145, 146, 147, 150, 155, 156, 159, 161, 162, 163, 164, 165, 167, 168, 172, 173, 174, 175, 178, 179, 181, 182, 183, 184, 186, 187, 189, 191, 195, 197, 198, 200, 202, 203, 207, 209, 211, 212, 213, 214, 217, 219, 221, 223, 225, 226, 228, 229, 230, 231, 232, 234, 235, 238, 241, 243, 244, 245, 246, 248, 251, 252, 253, 254, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 294, 301, 302, 303, 327, 329, 330, 331, 334, 356, 359, 365, 387, 390, 391, 394, 397, 405, 416, 418, 422, 424, 428, 429, 432, 437, 439, 464, 465, 474, 475, 476, 490, 493, 496, 504, 507, 515, 517, 518, 520, 527, 528, 529, 530, 531, 536, 539, 543, 545, 547, 553, 554, 556, 558, 559, 562, 563, 564, 565, 566, 568, 569, 570, 578, 585, 586, 638, 639, 640, 642, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 672, 674, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 737, 741, 748, 757, 759, 762, 763, 764, 765, 766, 767, 769, 770, 771, 774, 777, 778, 779, 781, 782, 784, 786, 787, 796, 797, 801, 803, 804, 805, 806, 809, 810, 812, 813, 814, 815, 820, 821, 822, 823, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 852, 855, 882, 884, 909, 910, 919, 945, 948, 949, 952, 955, 963, 976, 980, 1026, 1027, 1028, 1037, 1057, 1073, 1074, 1082, 1087, 1088, 1107, 1110, 1111, 1177, 1180, 1190, 1191, 1192, 1201, 1213, 1217, 1220, 1221], "dt": [1, 78, 119, 125, 230, 294, 559, 690, 741, 750, 805, 849, 852, 1219], "attempt": [1, 255, 294], "do": [1, 40, 57, 58, 59, 78, 84, 85, 86, 114, 128, 137, 138, 139, 140, 169, 183, 184, 186, 187, 199, 203, 221, 230, 250, 260, 263, 294, 355, 470, 539, 559, 623, 624, 625, 714, 717, 732, 741, 762, 763, 769, 778, 779, 781, 782, 787, 791, 792, 801, 805, 813, 849, 852, 908, 977, 1031, 1162, 1163, 1164, 1203, 1213], "so": [1, 116, 117, 128, 148, 181, 183, 184, 186, 187, 221, 230, 294, 319, 439, 474, 496, 507, 559, 623, 624, 625, 741, 778, 779, 781, 782, 805, 849, 1035, 1162, 1163, 1164], "rais": [1, 20, 21, 25, 39, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 114, 115, 119, 125, 128, 137, 139, 152, 221, 231, 294, 328, 390, 391, 405, 473, 494, 515, 547, 590, 593, 611, 628, 629, 630, 632, 634, 687, 703, 741, 877, 948, 949, 963, 1034, 1055, 1082, 1129, 1132, 1150, 1167, 1168, 1169, 1171, 1173, 1194, 1203, 1213], "an": [1, 35, 37, 38, 39, 40, 49, 57, 58, 79, 81, 82, 84, 85, 88, 93, 94, 96, 103, 114, 115, 116, 117, 118, 119, 121, 125, 126, 128, 130, 131, 142, 144, 146, 156, 157, 158, 167, 170, 175, 183, 184, 186, 187, 199, 200, 201, 203, 206, 217, 221, 227, 228, 230, 231, 250, 255, 260, 263, 264, 269, 280, 294, 303, 324, 328, 333, 339, 340, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 364, 365, 387, 390, 394, 408, 419, 421, 422, 428, 429, 432, 454, 466, 467, 470, 473, 474, 494, 495, 496, 504, 505, 507, 516, 526, 527, 546, 547, 555, 558, 559, 560, 562, 563, 564, 565, 566, 568, 569, 570, 590, 593, 598, 600, 628, 629, 630, 632, 634, 645, 651, 659, 665, 669, 674, 685, 686, 688, 689, 691, 693, 696, 700, 701, 702, 703, 714, 716, 717, 720, 723, 728, 729, 731, 732, 737, 741, 753, 759, 760, 761, 762, 763, 769, 771, 774, 778, 779, 781, 782, 787, 792, 801, 805, 813, 823, 826, 828, 837, 849, 852, 874, 877, 882, 892, 894, 895, 896, 900, 901, 902, 903, 904, 905, 906, 907, 908, 918, 952, 966, 971, 978, 1004, 1016, 1027, 1028, 1031, 1034, 1035, 1055, 1056, 1064, 1092, 1093, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1107, 1110, 1129, 1132, 1137, 1139, 1167, 1168, 1169, 1171, 1173, 1194, 1203, 1213, 1220], "attributeerror": 1, "howev": [1, 106, 116, 167, 206, 255, 294, 971, 1213], "can": [1, 19, 32, 39, 40, 45, 48, 68, 69, 78, 87, 88, 94, 104, 106, 114, 115, 116, 119, 120, 125, 126, 128, 131, 133, 134, 142, 143, 144, 146, 148, 150, 155, 157, 164, 165, 175, 182, 183, 184, 185, 186, 187, 195, 197, 199, 206, 217, 221, 230, 233, 236, 244, 255, 259, 260, 263, 269, 280, 294, 304, 308, 346, 349, 355, 383, 384, 387, 390, 405, 419, 439, 454, 470, 496, 507, 515, 523, 526, 528, 529, 530, 531, 539, 545, 547, 552, 554, 559, 562, 563, 564, 565, 566, 568, 569, 570, 575, 578, 580, 583, 586, 602, 623, 624, 625, 628, 642, 668, 694, 696, 706, 731, 737, 740, 741, 752, 757, 762, 767, 769, 771, 778, 779, 781, 782, 805, 807, 809, 815, 820, 826, 829, 849, 852, 859, 888, 908, 909, 941, 942, 945, 948, 949, 963, 978, 994, 1031, 1057, 1064, 1069, 1082, 1086, 1088, 1107, 1110, 1112, 1116, 1119, 1122, 1130, 1131, 1138, 1141, 1162, 1163, 1164, 1167, 1169, 1194, 1213, 1220], "other": [1, 25, 39, 40, 45, 68, 85, 114, 115, 116, 128, 137, 138, 139, 140, 164, 166, 169, 176, 202, 203, 212, 213, 231, 233, 236, 237, 264, 267, 269, 270, 292, 294, 301, 305, 307, 319, 338, 359, 411, 412, 426, 431, 433, 439, 444, 457, 464, 485, 486, 487, 488, 502, 511, 514, 522, 524, 534, 535, 538, 554, 586, 641, 649, 651, 658, 660, 662, 670, 671, 672, 679, 683, 685, 708, 712, 720, 723, 725, 741, 753, 763, 767, 786, 787, 796, 797, 807, 808, 823, 826, 827, 828, 849, 852, 858, 893, 912, 970, 977, 1002, 1025, 1046, 1047, 1048, 1049, 1109, 1196, 1204, 1212, 1213], "onli": [1, 15, 18, 25, 35, 37, 40, 57, 63, 65, 69, 78, 83, 86, 88, 114, 115, 118, 120, 122, 126, 128, 129, 131, 132, 133, 134, 137, 138, 139, 140, 144, 146, 150, 153, 164, 169, 183, 186, 188, 200, 202, 203, 206, 207, 209, 214, 221, 230, 232, 233, 246, 252, 254, 255, 264, 265, 280, 294, 302, 304, 306, 308, 319, 337, 338, 387, 395, 416, 425, 434, 454, 507, 526, 528, 529, 530, 531, 539, 545, 552, 562, 563, 564, 565, 566, 568, 569, 570, 642, 653, 685, 686, 706, 741, 762, 767, 778, 779, 781, 782, 783, 786, 787, 790, 805, 823, 837, 849, 856, 857, 858, 890, 893, 909, 945, 977, 983, 988, 1004, 1064, 1082, 1086, 1189, 1192, 1213, 1220, 1221], "gener": [1, 116, 117, 135, 141, 142, 143, 144, 146, 152, 160, 221, 234, 253, 255, 260, 294, 484, 573, 579, 665, 685, 688, 700, 701, 717, 728, 729, 741, 849, 1045, 1106, 1118, 1190, 1213, 1221], "userwarn": 1, "pl": [1, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 78, 79, 80, 81, 82, 86, 87, 88, 103, 104, 105, 106, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120, 125, 128, 129, 130, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 177, 178, 179, 180, 181, 182, 183, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 294, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 370, 371, 372, 374, 375, 376, 380, 382, 383, 384, 387, 388, 389, 390, 391, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 609, 610, 612, 613, 614, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 685, 686, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 737, 741, 754, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 852, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 896, 897, 898, 899, 900, 901, 902, 903, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 928, 929, 930, 931, 932, 933, 935, 937, 938, 940, 941, 942, 943, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 977, 978, 979, 980, 981, 983, 984, 985, 988, 989, 990, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1018, 1021, 1022, 1029, 1030, 1031, 1032, 1036, 1037, 1039, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1054, 1056, 1057, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1076, 1078, 1079, 1080, 1082, 1083, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1110, 1112, 1114, 1118, 1119, 1120, 1121, 1123, 1124, 1125, 1126, 1128, 1129, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1143, 1148, 1149, 1151, 1152, 1153, 1156, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1182, 1183, 1184, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1213, 1220, 1221], "register_expr_namespac": [1, 79, 81, 82], "greet": 1, "def": [1, 69, 79, 80, 81, 82, 142, 143, 144, 146, 150, 220, 260, 294, 301, 543, 598, 625, 658, 705, 741, 763, 800, 849, 852, 1137, 1221], "__init__": [1, 2, 3, 4, 5, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 141, 1220], "self": [1, 64, 65, 66, 68, 79, 80, 81, 82, 84, 85, 157, 158, 161, 169, 189, 191, 192, 193, 205, 207, 209, 211, 212, 214, 218, 219, 221, 223, 224, 226, 227, 228, 234, 242, 243, 245, 246, 248, 253, 260, 262, 265, 266, 267, 271, 272, 294, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 326, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 521, 522, 523, 524, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 737, 741, 756, 757, 758, 759, 761, 762, 763, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 849, 858, 859, 882, 896, 977, 981, 991, 1062, 1063, 1064, 1075, 1079, 1080, 1085, 1088, 1107, 1110, 1112, 1124, 1200, 1204, 1213], "_expr": [1, 80], "hello": [1, 25, 64, 67, 623, 624, 625, 1037, 1162, 1163, 1164], "return": [1, 10, 11, 35, 37, 38, 40, 41, 42, 43, 44, 57, 58, 59, 63, 67, 69, 78, 79, 80, 81, 82, 83, 84, 85, 95, 97, 102, 103, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 143, 153, 155, 157, 160, 163, 165, 167, 168, 169, 170, 171, 174, 175, 177, 178, 181, 182, 183, 185, 186, 189, 191, 198, 199, 200, 201, 202, 204, 205, 206, 208, 210, 215, 216, 217, 219, 220, 221, 230, 231, 232, 233, 234, 247, 248, 249, 255, 256, 259, 260, 261, 265, 269, 270, 278, 280, 283, 288, 294, 304, 306, 310, 311, 312, 313, 314, 315, 318, 319, 324, 327, 329, 330, 331, 332, 341, 342, 343, 344, 356, 357, 362, 366, 367, 368, 370, 372, 374, 375, 376, 378, 380, 382, 383, 384, 385, 387, 388, 389, 391, 392, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 418, 429, 430, 432, 435, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 458, 459, 462, 463, 465, 471, 473, 474, 475, 476, 478, 479, 484, 493, 494, 495, 501, 506, 516, 518, 523, 543, 547, 549, 553, 554, 555, 557, 573, 574, 580, 581, 582, 589, 591, 592, 594, 596, 597, 598, 599, 602, 603, 604, 605, 606, 608, 609, 610, 614, 615, 617, 618, 619, 620, 632, 637, 644, 646, 647, 648, 650, 651, 653, 654, 655, 658, 659, 663, 665, 666, 667, 668, 669, 674, 684, 685, 686, 687, 688, 689, 690, 693, 696, 698, 700, 701, 702, 703, 704, 705, 706, 714, 717, 720, 723, 726, 727, 728, 729, 731, 732, 741, 757, 760, 762, 763, 768, 769, 771, 776, 778, 779, 781, 782, 783, 789, 790, 792, 800, 801, 805, 809, 813, 818, 819, 820, 821, 826, 827, 835, 840, 845, 849, 856, 857, 858, 866, 867, 869, 870, 874, 876, 878, 881, 885, 888, 892, 909, 910, 916, 920, 921, 922, 924, 926, 928, 929, 930, 931, 932, 933, 935, 937, 938, 940, 941, 942, 943, 945, 946, 947, 949, 950, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 970, 971, 976, 977, 985, 987, 989, 990, 996, 998, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1014, 1016, 1018, 1019, 1023, 1024, 1026, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1045, 1054, 1055, 1056, 1062, 1063, 1064, 1069, 1076, 1082, 1088, 1089, 1090, 1091, 1092, 1106, 1108, 1109, 1119, 1128, 1129, 1130, 1131, 1133, 1135, 1136, 1137, 1138, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1153, 1154, 1156, 1157, 1158, 1159, 1171, 1176, 1184, 1186, 1197, 1199, 1200, 1201, 1204, 1213, 1220, 1221], "lit": [1, 303, 327, 439, 454, 526, 676, 680, 694, 714, 717, 732, 741, 980, 1213], "alia": [1, 17, 78, 80, 82, 183, 205, 221, 230, 262, 269, 294, 301, 305, 327, 329, 330, 331, 332, 345, 346, 347, 348, 349, 356, 358, 362, 363, 364, 365, 368, 370, 371, 372, 375, 376, 380, 382, 387, 388, 389, 390, 391, 392, 394, 396, 397, 398, 399, 402, 404, 405, 406, 407, 408, 409, 411, 412, 424, 426, 431, 433, 437, 439, 443, 447, 454, 457, 458, 459, 502, 507, 511, 512, 513, 514, 516, 519, 522, 524, 526, 534, 535, 538, 540, 544, 547, 550, 552, 554, 572, 574, 590, 592, 595, 597, 598, 603, 604, 614, 617, 618, 619, 620, 621, 626, 627, 638, 639, 640, 641, 649, 650, 651, 657, 658, 665, 666, 667, 670, 671, 672, 690, 691, 694, 695, 705, 706, 716, 723, 731, 741, 778, 784, 790, 805, 822, 826, 849, 909, 917, 919, 925, 945, 948, 952, 954, 1019, 1031, 1082, 1087, 1136, 1137, 1158, 1159, 1213], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 25, 64, 67, 623, 624, 625, 635, 1037, 1162, 1163, 1164, 1174], "select": [1, 13, 38, 63, 64, 65, 78, 79, 80, 81, 113, 114, 115, 116, 117, 118, 120, 122, 126, 128, 134, 143, 198, 199, 203, 206, 217, 220, 231, 237, 243, 257, 262, 265, 294, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 334, 336, 337, 341, 342, 343, 344, 355, 357, 358, 359, 360, 361, 363, 364, 365, 374, 375, 376, 383, 384, 387, 390, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 423, 425, 427, 430, 434, 436, 437, 438, 440, 441, 445, 453, 454, 455, 456, 458, 470, 471, 496, 498, 499, 500, 501, 505, 507, 508, 509, 510, 521, 523, 525, 526, 532, 533, 536, 537, 538, 541, 542, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 561, 567, 571, 573, 574, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 596, 597, 598, 599, 628, 638, 640, 643, 647, 648, 650, 652, 653, 654, 655, 656, 659, 661, 664, 666, 667, 668, 669, 671, 673, 674, 675, 678, 690, 692, 693, 694, 695, 696, 698, 702, 707, 709, 710, 711, 713, 716, 717, 721, 722, 723, 724, 726, 730, 737, 741, 764, 787, 800, 808, 809, 814, 822, 828, 849, 852, 873, 875, 948, 984, 1021, 1022, 1031, 1107, 1110, 1123, 1141, 1167, 1185, 1213, 1220], "shapecolumn_0": [1, 206, 260, 294], "register_dataframe_namespac": [1, 80, 81, 82], "split": [1, 40, 79, 201, 294, 619, 620, 1158, 1159], "splitfram": [1, 79], "df": [1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 60, 63, 64, 79, 80, 103, 104, 105, 106, 107, 108, 109, 110, 115, 116, 117, 128, 142, 144, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 294, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 370, 371, 372, 374, 375, 376, 380, 382, 383, 384, 387, 388, 389, 390, 391, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 507, 508, 509, 510, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 609, 610, 612, 613, 614, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 631, 632, 633, 635, 636, 637, 638, 640, 641, 642, 643, 644, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 686, 690, 691, 692, 693, 694, 695, 696, 698, 701, 702, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 720, 721, 722, 723, 724, 725, 726, 729, 730, 731, 737, 741, 778, 805, 809, 822, 823, 835, 837, 845, 849, 852, 873, 875, 886, 948, 1021, 1022, 1031, 1141, 1152, 1158, 1159, 1191, 1213, 1221], "_df": [1, 79], "by_alternate_row": 1, "list": [1, 2, 18, 39, 40, 48, 63, 67, 78, 79, 81, 84, 85, 103, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 142, 143, 144, 146, 159, 162, 165, 167, 168, 172, 180, 182, 183, 191, 200, 216, 219, 231, 232, 233, 236, 244, 251, 252, 260, 261, 262, 263, 269, 273, 274, 294, 302, 324, 325, 356, 418, 424, 429, 436, 444, 503, 505, 507, 516, 517, 539, 547, 553, 555, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 585, 586, 598, 618, 638, 640, 645, 649, 668, 671, 686, 689, 691, 699, 701, 703, 706, 721, 723, 729, 741, 764, 768, 770, 774, 777, 778, 807, 815, 821, 822, 826, 828, 830, 831, 849, 852, 874, 875, 891, 909, 971, 976, 981, 984, 986, 990, 991, 1002, 1082, 1089, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1108, 1137, 1157, 1185, 1193, 1196, 1213, 1221], "with_row_count": [1, 294, 554, 562, 563, 565, 568, 569, 570, 741, 849, 1107, 1213], "name": [1, 23, 27, 29, 36, 37, 38, 40, 43, 57, 64, 65, 66, 67, 68, 79, 80, 81, 82, 86, 92, 103, 105, 106, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 139, 140, 141, 142, 144, 145, 146, 147, 155, 156, 159, 162, 163, 164, 168, 172, 173, 174, 178, 179, 181, 182, 185, 198, 199, 200, 202, 203, 206, 208, 210, 212, 213, 215, 219, 221, 225, 231, 232, 233, 235, 236, 237, 244, 247, 251, 253, 255, 258, 259, 260, 261, 262, 263, 264, 269, 270, 271, 272, 273, 294, 303, 308, 327, 329, 330, 331, 356, 416, 439, 448, 450, 451, 452, 454, 496, 504, 507, 515, 517, 519, 539, 545, 547, 556, 586, 598, 599, 638, 640, 642, 659, 660, 661, 662, 664, 666, 667, 668, 670, 671, 672, 673, 674, 675, 678, 679, 682, 683, 692, 693, 698, 699, 702, 707, 708, 709, 711, 712, 713, 715, 718, 719, 720, 722, 723, 724, 725, 726, 730, 731, 737, 741, 757, 759, 764, 766, 767, 770, 774, 777, 780, 786, 787, 796, 797, 803, 806, 807, 808, 809, 815, 820, 821, 822, 823, 826, 827, 828, 829, 830, 849, 852, 855, 892, 909, 1057, 1082, 1087, 1136, 1137, 1138, 1151, 1177, 1180, 1190, 1191, 1195, 1213, 1220, 1221], "n": [1, 17, 18, 22, 30, 37, 44, 48, 50, 57, 65, 66, 79, 80, 81, 82, 112, 114, 115, 128, 153, 157, 169, 177, 183, 189, 200, 201, 205, 206, 232, 233, 234, 240, 241, 245, 248, 249, 252, 254, 266, 278, 288, 294, 332, 355, 358, 363, 364, 371, 396, 408, 419, 430, 435, 459, 468, 475, 484, 485, 489, 493, 496, 540, 543, 553, 568, 570, 573, 576, 577, 583, 588, 603, 604, 612, 619, 620, 623, 624, 630, 644, 646, 650, 651, 656, 658, 673, 675, 685, 686, 687, 688, 689, 690, 696, 698, 714, 717, 718, 719, 722, 726, 730, 732, 741, 760, 762, 776, 778, 783, 790, 811, 812, 816, 818, 819, 824, 835, 845, 849, 852, 881, 892, 908, 911, 917, 918, 925, 954, 966, 977, 978, 985, 989, 1019, 1029, 1036, 1045, 1046, 1050, 1054, 1057, 1078, 1101, 1103, 1106, 1114, 1115, 1122, 1126, 1142, 1143, 1151, 1158, 1159, 1169, 1184, 1186, 1192, 1197, 1202, 1213, 1220, 1221], "filter": [1, 79, 118, 128, 129, 134, 164, 195, 196, 197, 221, 280, 294, 515, 517, 595, 621, 657, 694, 731, 741, 767, 771, 784, 837, 849, 852, 1110, 1213], "col": [1, 17, 37, 40, 57, 78, 79, 80, 81, 107, 109, 128, 142, 144, 172, 182, 183, 196, 198, 204, 206, 217, 220, 221, 230, 231, 236, 244, 262, 263, 269, 273, 294, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 345, 346, 347, 348, 349, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 370, 371, 372, 374, 375, 376, 380, 382, 383, 384, 387, 388, 389, 390, 391, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 433, 437, 438, 439, 440, 443, 444, 447, 448, 450, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 524, 525, 526, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 592, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 609, 610, 612, 613, 614, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 669, 670, 671, 672, 674, 678, 690, 693, 694, 695, 696, 697, 698, 699, 702, 707, 709, 710, 711, 713, 715, 716, 722, 724, 726, 730, 731, 741, 761, 774, 777, 778, 784, 789, 800, 805, 807, 815, 822, 826, 828, 830, 849, 852, 873, 875, 886, 945, 948, 1021, 1022, 1031, 1089, 1107, 1110, 1141, 1167, 1213, 1221], "0": [1, 12, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 40, 45, 49, 59, 60, 63, 68, 78, 79, 80, 82, 86, 88, 104, 114, 115, 116, 117, 119, 120, 122, 125, 126, 128, 131, 132, 133, 134, 136, 141, 142, 143, 144, 146, 152, 153, 156, 157, 158, 160, 161, 162, 165, 166, 170, 171, 173, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 192, 193, 194, 198, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 214, 215, 216, 217, 218, 221, 222, 223, 227, 228, 232, 233, 234, 235, 236, 241, 243, 244, 245, 246, 247, 249, 253, 254, 255, 256, 257, 260, 263, 265, 266, 269, 271, 273, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 294, 300, 302, 303, 305, 308, 310, 311, 312, 313, 314, 315, 318, 319, 320, 333, 336, 337, 339, 340, 341, 342, 343, 345, 350, 351, 352, 353, 354, 355, 356, 357, 360, 361, 369, 372, 373, 376, 377, 379, 380, 381, 386, 390, 392, 393, 400, 401, 403, 404, 405, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 425, 426, 431, 433, 434, 438, 441, 442, 445, 446, 448, 449, 450, 451, 452, 454, 455, 457, 462, 463, 466, 467, 470, 473, 474, 479, 481, 494, 496, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 510, 516, 521, 522, 524, 526, 532, 533, 534, 535, 537, 538, 540, 543, 544, 545, 547, 548, 549, 550, 554, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 577, 578, 580, 581, 582, 583, 587, 588, 591, 592, 597, 598, 601, 605, 606, 607, 608, 611, 615, 616, 622, 628, 630, 641, 642, 643, 645, 646, 647, 648, 649, 651, 656, 657, 659, 663, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 680, 682, 683, 685, 687, 691, 694, 700, 701, 704, 706, 709, 710, 714, 715, 716, 721, 727, 728, 729, 730, 731, 732, 737, 741, 759, 760, 761, 766, 768, 772, 773, 777, 778, 779, 780, 781, 782, 785, 786, 789, 791, 792, 795, 799, 801, 802, 806, 807, 812, 813, 815, 816, 819, 824, 826, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 849, 852, 859, 860, 861, 862, 863, 864, 865, 866, 868, 870, 882, 887, 889, 890, 892, 894, 895, 897, 898, 899, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 923, 926, 927, 931, 932, 933, 934, 935, 936, 938, 939, 943, 944, 948, 949, 950, 951, 958, 959, 961, 962, 963, 969, 972, 973, 974, 979, 983, 988, 990, 993, 995, 998, 999, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1013, 1015, 1016, 1017, 1027, 1031, 1035, 1040, 1055, 1057, 1062, 1063, 1066, 1067, 1078, 1082, 1083, 1084, 1088, 1092, 1093, 1094, 1096, 1097, 1099, 1100, 1101, 1103, 1104, 1105, 1106, 1109, 1111, 1115, 1119, 1120, 1121, 1125, 1126, 1130, 1131, 1136, 1137, 1140, 1141, 1144, 1145, 1146, 1147, 1150, 1154, 1155, 1161, 1167, 1169, 1185, 1186, 1187, 1188, 1190, 1195, 1196, 1200, 1202, 1203, 1213, 1221], "drop": [1, 106, 163, 164, 206, 261, 269, 294, 358, 360, 361, 468, 469, 547, 741, 767, 821, 826, 849, 911, 913, 914, 1029, 1030, 1082, 1213], "aaa": [1, 40, 294, 590, 638, 640, 1129], "bbb": [1, 40, 294, 638, 640, 852], "ccc": [1, 40, 294, 638, 640], "ddd": [1, 40, 294, 638, 640], "eee": [1, 40, 294, 852], "fff": 1, "column": [1, 15, 21, 22, 23, 26, 27, 29, 39, 40, 43, 48, 69, 78, 79, 86, 88, 90, 92, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 137, 138, 139, 140, 144, 155, 156, 160, 162, 163, 164, 165, 168, 172, 173, 174, 178, 179, 181, 182, 183, 184, 185, 186, 187, 191, 192, 193, 198, 199, 200, 202, 203, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 230, 231, 232, 233, 235, 236, 237, 238, 244, 245, 246, 247, 251, 253, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 273, 294, 303, 304, 306, 318, 324, 338, 344, 356, 364, 366, 367, 368, 372, 374, 375, 376, 378, 380, 382, 385, 388, 389, 392, 394, 395, 397, 406, 407, 409, 416, 418, 422, 424, 439, 454, 458, 464, 471, 473, 491, 494, 495, 496, 506, 507, 513, 515, 517, 526, 528, 529, 530, 531, 539, 545, 547, 551, 553, 554, 555, 559, 562, 563, 564, 565, 566, 568, 569, 570, 578, 585, 586, 589, 596, 619, 620, 628, 629, 630, 631, 632, 634, 639, 642, 657, 659, 660, 661, 662, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 737, 741, 757, 759, 766, 767, 768, 770, 774, 777, 778, 779, 780, 781, 782, 786, 787, 792, 793, 794, 795, 796, 798, 799, 800, 802, 803, 805, 806, 807, 808, 809, 810, 815, 816, 817, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 837, 849, 852, 856, 857, 874, 885, 887, 893, 909, 920, 921, 922, 926, 928, 929, 933, 935, 938, 940, 943, 946, 947, 950, 952, 953, 955, 964, 965, 967, 976, 987, 1025, 1032, 1034, 1052, 1056, 1082, 1088, 1089, 1116, 1128, 1135, 1158, 1159, 1167, 1168, 1169, 1170, 1171, 1173, 1182, 1190, 1191, 1213, 1221], "txt": [1, 17, 128], "utf8": [1, 25, 39, 106, 114, 115, 128, 141, 143, 146, 156, 165, 167, 168, 175, 235, 255, 294, 329, 394, 397, 476, 554, 589, 594, 596, 597, 598, 599, 602, 617, 618, 619, 620, 628, 629, 630, 631, 632, 634, 637, 672, 741, 759, 768, 770, 806, 849, 852, 952, 955, 1015, 1037, 1128, 1133, 1135, 1136, 1137, 1138, 1141, 1156, 1157, 1158, 1159, 1167, 1168, 1169, 1170, 1171, 1173, 1176, 1213], "register_lazyframe_namespac": [1, 79, 80, 82], "dtypeoper": [1, 81], "ldf": [1, 81, 830, 831, 833, 834, 836, 838, 839, 840, 841, 842, 843, 844], "_ldf": [1, 81], "upcast_integer_typ": [1, 81], "with_column": [1, 17, 81, 183, 220, 230, 263, 270, 294, 301, 303, 319, 329, 333, 335, 338, 345, 346, 347, 348, 349, 356, 358, 362, 368, 370, 371, 372, 380, 382, 387, 388, 389, 390, 391, 392, 394, 396, 397, 406, 407, 411, 412, 420, 421, 426, 431, 433, 434, 438, 439, 443, 444, 447, 448, 450, 451, 452, 454, 457, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 502, 504, 507, 522, 524, 526, 527, 528, 529, 530, 531, 534, 535, 539, 540, 543, 544, 545, 547, 550, 554, 558, 559, 562, 563, 564, 565, 566, 568, 569, 570, 572, 576, 590, 592, 594, 595, 597, 598, 599, 600, 602, 603, 604, 609, 610, 612, 613, 614, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 631, 632, 633, 635, 636, 637, 639, 641, 642, 649, 651, 658, 660, 662, 670, 672, 676, 677, 679, 686, 691, 701, 705, 708, 712, 721, 725, 729, 731, 737, 741, 778, 784, 800, 805, 827, 849, 852, 886, 909, 948, 1031, 1082, 1213], "tp": [1, 81], "cast": [1, 39, 80, 81, 103, 137, 138, 139, 140, 175, 183, 184, 186, 187, 220, 230, 256, 269, 294, 307, 335, 348, 349, 363, 394, 397, 538, 543, 552, 554, 559, 600, 601, 602, 637, 643, 649, 672, 721, 741, 778, 779, 781, 782, 800, 805, 826, 849, 852, 886, 888, 902, 903, 917, 952, 955, 1086, 1139, 1140, 1141, 1176, 1183, 1191, 1196, 1213], "int64": [1, 2, 39, 40, 43, 80, 81, 86, 114, 165, 175, 183, 184, 186, 187, 204, 220, 230, 235, 250, 256, 294, 321, 322, 323, 325, 348, 349, 398, 399, 400, 401, 402, 403, 404, 416, 543, 552, 559, 600, 632, 643, 649, 665, 692, 700, 701, 703, 717, 723, 741, 761, 768, 778, 779, 781, 782, 784, 789, 800, 805, 806, 809, 849, 871, 872, 873, 875, 902, 903, 956, 957, 958, 959, 960, 961, 962, 970, 1086, 1109, 1171, 1183, 1194, 1195, 1196, 1213], "int8": [1, 81, 175, 294, 324, 348, 349, 368, 372, 380, 382, 389, 392, 406, 407, 495, 643, 714, 717, 732, 741, 874, 902, 903, 911, 922, 926, 938, 940, 947, 950, 964, 965, 1056, 1090, 1183, 1200, 1213], "int16": [1, 81, 348, 349, 388, 643, 741, 852, 902, 903, 946, 1183, 1192, 1213], "int32": [1, 81, 86, 103, 106, 119, 143, 144, 183, 184, 186, 187, 201, 230, 294, 333, 375, 376, 378, 385, 409, 559, 649, 717, 741, 778, 779, 781, 782, 805, 849, 852, 929, 933, 935, 943, 967, 1062, 1196, 1213], "b": [1, 15, 36, 37, 39, 41, 42, 45, 65, 66, 68, 70, 81, 86, 103, 104, 105, 106, 107, 108, 109, 110, 119, 152, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 175, 177, 179, 180, 181, 182, 183, 188, 189, 191, 193, 195, 197, 198, 199, 200, 201, 202, 204, 207, 209, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 231, 232, 233, 234, 235, 236, 240, 243, 244, 245, 246, 248, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 271, 272, 273, 274, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 294, 301, 303, 304, 306, 307, 320, 326, 327, 329, 330, 331, 333, 335, 344, 356, 359, 416, 418, 420, 421, 422, 424, 427, 434, 436, 438, 439, 441, 445, 448, 450, 451, 452, 454, 458, 464, 470, 476, 485, 486, 487, 488, 504, 507, 512, 523, 526, 527, 528, 529, 536, 537, 539, 543, 545, 547, 550, 556, 558, 578, 584, 586, 596, 600, 612, 639, 642, 653, 657, 659, 660, 661, 662, 664, 668, 670, 672, 673, 674, 675, 676, 677, 678, 679, 691, 692, 693, 694, 695, 698, 702, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 718, 719, 722, 723, 724, 725, 726, 730, 741, 756, 757, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 783, 786, 788, 789, 790, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 806, 807, 811, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 826, 828, 829, 830, 831, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 849, 852, 855, 858, 885, 886, 887, 888, 909, 910, 912, 969, 970, 971, 977, 980, 994, 1002, 1015, 1031, 1046, 1047, 1049, 1082, 1087, 1135, 1139, 1151, 1182, 1195, 1199, 1213, 1220], "4": [1, 2, 13, 18, 22, 30, 36, 37, 39, 40, 41, 42, 45, 60, 63, 65, 66, 68, 70, 78, 79, 80, 81, 82, 86, 103, 104, 105, 106, 107, 108, 109, 110, 119, 128, 146, 152, 154, 155, 156, 157, 158, 161, 164, 168, 169, 170, 171, 175, 177, 178, 180, 181, 182, 183, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 208, 209, 210, 212, 213, 215, 216, 217, 219, 220, 221, 222, 226, 230, 232, 233, 239, 240, 244, 247, 248, 250, 251, 252, 253, 258, 259, 260, 262, 263, 264, 265, 267, 268, 269, 271, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 294, 300, 301, 302, 303, 305, 307, 320, 321, 322, 323, 324, 326, 332, 333, 336, 337, 338, 344, 345, 346, 347, 348, 349, 355, 357, 359, 364, 368, 388, 389, 390, 391, 394, 397, 399, 402, 404, 405, 407, 411, 412, 417, 418, 420, 421, 424, 425, 426, 427, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 451, 452, 454, 457, 458, 459, 467, 468, 469, 470, 471, 473, 475, 484, 485, 486, 487, 488, 489, 490, 493, 495, 499, 502, 504, 507, 522, 524, 526, 527, 528, 529, 530, 531, 534, 535, 538, 539, 541, 542, 543, 544, 545, 548, 550, 554, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 576, 580, 584, 585, 586, 587, 590, 592, 598, 603, 604, 609, 610, 612, 617, 618, 619, 620, 626, 627, 628, 632, 637, 638, 640, 641, 642, 644, 649, 650, 651, 658, 660, 662, 664, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 685, 686, 688, 689, 691, 693, 694, 698, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 737, 741, 756, 757, 759, 760, 761, 762, 763, 767, 769, 770, 771, 772, 773, 775, 776, 777, 778, 783, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 805, 811, 813, 814, 815, 816, 817, 818, 820, 822, 823, 824, 825, 826, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 852, 858, 861, 868, 871, 872, 873, 874, 881, 890, 891, 893, 908, 910, 912, 926, 933, 935, 938, 940, 941, 942, 943, 947, 948, 949, 952, 955, 957, 960, 962, 963, 964, 965, 970, 977, 979, 980, 984, 985, 989, 990, 993, 994, 996, 1002, 1007, 1008, 1009, 1010, 1014, 1029, 1030, 1031, 1032, 1036, 1045, 1046, 1047, 1049, 1050, 1051, 1054, 1056, 1070, 1078, 1079, 1080, 1084, 1088, 1089, 1092, 1097, 1099, 1100, 1101, 1102, 1103, 1106, 1114, 1119, 1123, 1124, 1129, 1131, 1137, 1142, 1143, 1148, 1149, 1156, 1158, 1159, 1165, 1166, 1167, 1171, 1176, 1182, 1184, 1192, 1195, 1196, 1197, 1204, 1213, 1221], "c": [1, 15, 36, 37, 39, 41, 42, 45, 65, 66, 68, 70, 79, 81, 86, 104, 106, 108, 110, 119, 128, 142, 152, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 168, 172, 175, 179, 180, 181, 182, 183, 189, 191, 193, 201, 202, 204, 207, 209, 211, 212, 214, 216, 217, 218, 219, 221, 222, 223, 225, 228, 229, 231, 234, 235, 236, 243, 244, 245, 246, 248, 250, 253, 254, 255, 256, 257, 259, 260, 263, 264, 266, 267, 269, 273, 276, 277, 278, 279, 281, 282, 284, 287, 288, 294, 301, 303, 304, 306, 308, 326, 356, 439, 454, 464, 476, 504, 507, 526, 527, 539, 543, 547, 578, 619, 628, 653, 660, 662, 664, 670, 672, 673, 674, 675, 676, 677, 679, 693, 694, 695, 698, 702, 705, 707, 708, 709, 710, 711, 712, 713, 722, 724, 725, 726, 730, 737, 741, 757, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 774, 777, 778, 786, 789, 796, 799, 801, 803, 804, 806, 807, 813, 814, 815, 820, 823, 826, 828, 830, 833, 834, 835, 836, 838, 839, 841, 844, 845, 849, 852, 887, 909, 910, 994, 1015, 1082, 1158, 1167, 1199, 1213], "5": [1, 12, 13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 41, 42, 45, 66, 68, 70, 78, 79, 81, 82, 86, 103, 106, 107, 108, 109, 110, 112, 114, 115, 128, 136, 137, 139, 144, 156, 157, 158, 161, 168, 169, 170, 171, 175, 177, 178, 180, 181, 182, 183, 189, 190, 193, 194, 196, 198, 199, 200, 203, 204, 205, 206, 208, 209, 210, 212, 215, 216, 217, 219, 221, 222, 223, 226, 230, 233, 239, 240, 244, 247, 248, 250, 251, 252, 253, 255, 258, 263, 264, 265, 268, 269, 271, 273, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 294, 301, 302, 305, 332, 333, 335, 337, 338, 355, 356, 357, 358, 359, 364, 365, 390, 392, 394, 397, 398, 404, 412, 415, 416, 419, 421, 425, 426, 430, 431, 433, 435, 436, 439, 443, 447, 448, 450, 451, 452, 454, 457, 459, 467, 470, 471, 473, 475, 478, 481, 484, 485, 486, 487, 488, 489, 492, 493, 522, 524, 526, 535, 538, 539, 540, 541, 542, 543, 547, 548, 550, 555, 556, 558, 559, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 574, 580, 586, 592, 602, 603, 604, 632, 641, 644, 650, 651, 664, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 685, 690, 691, 692, 693, 694, 698, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 722, 724, 725, 726, 730, 737, 741, 759, 760, 761, 762, 763, 769, 770, 771, 772, 773, 775, 776, 777, 778, 783, 785, 787, 788, 789, 790, 794, 795, 796, 801, 805, 811, 813, 814, 815, 816, 817, 818, 823, 825, 826, 829, 830, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 849, 852, 858, 861, 865, 868, 881, 886, 891, 893, 900, 908, 909, 910, 911, 912, 918, 919, 920, 921, 922, 948, 950, 952, 953, 955, 956, 962, 964, 965, 970, 974, 977, 978, 989, 990, 993, 994, 1000, 1006, 1031, 1032, 1036, 1039, 1045, 1046, 1047, 1049, 1050, 1054, 1062, 1070, 1078, 1079, 1080, 1082, 1083, 1084, 1089, 1092, 1094, 1095, 1096, 1098, 1099, 1102, 1106, 1119, 1125, 1131, 1141, 1142, 1171, 1184, 1197, 1200, 1204, 1213, 1221], "6": [1, 13, 18, 36, 37, 39, 40, 41, 42, 43, 44, 45, 66, 68, 69, 70, 79, 81, 86, 87, 88, 103, 106, 107, 108, 109, 136, 156, 159, 162, 163, 164, 165, 166, 168, 169, 172, 177, 178, 179, 180, 181, 183, 189, 191, 193, 194, 196, 198, 199, 200, 202, 206, 207, 208, 209, 210, 211, 212, 214, 215, 218, 221, 222, 223, 225, 226, 228, 230, 231, 232, 233, 234, 235, 236, 240, 243, 244, 245, 246, 247, 248, 250, 252, 253, 254, 255, 256, 257, 260, 262, 263, 265, 266, 267, 269, 271, 278, 287, 288, 294, 301, 305, 326, 333, 348, 349, 359, 364, 368, 382, 387, 388, 389, 406, 407, 410, 412, 420, 421, 427, 430, 435, 436, 438, 459, 460, 461, 471, 485, 486, 487, 488, 507, 535, 538, 546, 549, 550, 551, 555, 557, 559, 562, 563, 564, 565, 566, 568, 569, 570, 574, 586, 592, 596, 603, 604, 632, 641, 644, 658, 676, 677, 678, 691, 694, 705, 706, 724, 737, 741, 759, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 774, 775, 776, 778, 783, 785, 786, 788, 790, 792, 796, 799, 801, 803, 805, 806, 807, 809, 811, 813, 814, 815, 818, 822, 825, 826, 829, 835, 844, 845, 849, 852, 891, 897, 899, 902, 903, 912, 945, 965, 970, 990, 1021, 1022, 1032, 1046, 1047, 1049, 1070, 1084, 1089, 1091, 1097, 1099, 1101, 1103, 1131, 1135, 1142, 1171, 1183, 1213, 1220, 1221], "7": [1, 21, 32, 36, 37, 39, 40, 41, 42, 43, 44, 45, 68, 79, 81, 86, 156, 159, 160, 161, 162, 163, 165, 166, 168, 172, 177, 179, 183, 189, 191, 194, 202, 207, 209, 211, 213, 214, 218, 221, 223, 225, 228, 230, 231, 233, 234, 235, 236, 240, 243, 245, 246, 247, 248, 254, 255, 256, 257, 263, 265, 266, 267, 294, 301, 305, 323, 349, 364, 368, 388, 390, 391, 405, 407, 417, 430, 435, 438, 459, 485, 486, 487, 488, 538, 550, 555, 559, 569, 586, 631, 644, 676, 677, 688, 694, 705, 706, 724, 741, 759, 764, 766, 768, 770, 774, 776, 778, 783, 785, 786, 790, 797, 799, 802, 803, 805, 806, 807, 811, 818, 849, 852, 865, 873, 918, 922, 929, 948, 949, 963, 965, 1016, 1046, 1047, 1049, 1089, 1102, 1170, 1213, 1221], "float32": [1, 15, 37, 57, 81, 156, 175, 254, 255, 294, 703, 759, 849, 852, 997, 1062, 1213], "lazi": [1, 63, 64, 65, 66, 68, 81, 86, 128, 144, 203, 220, 221, 294, 507, 696, 714, 717, 732, 741, 786, 787, 828, 830, 831, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 849, 852, 1220, 1221], "i16": [1, 81, 368, 388, 407, 578, 741, 852, 946, 1192, 1213, 1221], "i32": [1, 81, 103, 106, 110, 143, 144, 236, 294, 333, 375, 376, 409, 557, 578, 731, 741, 807, 849, 929, 933, 935, 943, 967, 1062, 1091, 1213, 1221], "f32": [1, 81, 156, 254, 294, 578, 741, 759, 849, 852, 1062, 1213], "i64": [1, 2, 15, 18, 21, 22, 26, 32, 60, 63, 65, 79, 80, 81, 82, 86, 103, 104, 105, 106, 107, 108, 109, 110, 116, 128, 155, 157, 158, 159, 162, 164, 165, 168, 169, 171, 172, 177, 178, 180, 181, 182, 183, 189, 191, 193, 195, 197, 199, 202, 203, 206, 207, 212, 213, 214, 219, 220, 221, 222, 225, 226, 228, 229, 230, 234, 236, 240, 243, 244, 246, 248, 251, 257, 259, 260, 261, 262, 263, 264, 265, 267, 269, 271, 272, 273, 274, 277, 278, 279, 280, 281, 284, 287, 288, 294, 301, 303, 307, 321, 322, 323, 325, 326, 332, 335, 338, 345, 346, 347, 348, 349, 356, 358, 359, 371, 396, 398, 399, 400, 401, 402, 403, 404, 416, 418, 419, 421, 422, 423, 424, 426, 427, 429, 430, 432, 435, 436, 437, 438, 439, 443, 444, 447, 448, 450, 451, 452, 454, 456, 459, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 501, 504, 505, 507, 522, 523, 524, 526, 527, 528, 529, 530, 531, 539, 540, 543, 544, 545, 546, 547, 550, 551, 552, 554, 555, 556, 557, 558, 559, 573, 575, 576, 578, 579, 580, 584, 585, 586, 612, 613, 632, 637, 638, 640, 641, 642, 643, 644, 650, 651, 652, 654, 657, 665, 670, 672, 676, 677, 678, 679, 690, 691, 692, 693, 694, 698, 700, 701, 702, 703, 705, 706, 707, 708, 711, 712, 716, 720, 721, 724, 725, 726, 731, 737, 741, 757, 760, 762, 763, 765, 766, 767, 770, 771, 773, 774, 775, 776, 777, 778, 783, 786, 787, 788, 790, 792, 793, 796, 797, 798, 800, 801, 803, 804, 805, 807, 809, 811, 814, 815, 817, 818, 820, 821, 822, 823, 826, 829, 830, 831, 834, 835, 836, 837, 838, 841, 844, 845, 849, 852, 855, 858, 871, 872, 873, 875, 881, 886, 893, 896, 900, 901, 902, 903, 909, 910, 925, 954, 956, 957, 958, 959, 960, 961, 962, 977, 978, 980, 981, 984, 985, 989, 1002, 1029, 1030, 1031, 1032, 1036, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1054, 1057, 1064, 1069, 1082, 1087, 1088, 1089, 1091, 1095, 1098, 1102, 1106, 1107, 1110, 1114, 1118, 1119, 1123, 1124, 1171, 1182, 1184, 1191, 1197, 1198, 1204, 1213, 1220, 1221], "register_series_namespac": [1, 79, 80, 81], "math": [1, 15, 82, 357, 666, 667, 741, 897, 899, 1120, 1187, 1213], "mathshortcut": [1, 82], "": [1, 2, 16, 37, 40, 45, 57, 63, 66, 70, 82, 103, 104, 110, 114, 115, 116, 117, 119, 125, 129, 130, 133, 134, 146, 155, 156, 164, 167, 177, 182, 183, 185, 186, 193, 199, 202, 203, 212, 219, 221, 226, 228, 233, 236, 237, 244, 253, 259, 261, 262, 263, 264, 269, 270, 294, 371, 394, 397, 416, 455, 476, 505, 507, 516, 523, 532, 533, 539, 540, 552, 557, 586, 590, 597, 598, 599, 612, 617, 618, 620, 628, 629, 630, 634, 635, 638, 640, 659, 660, 661, 662, 668, 673, 678, 679, 682, 683, 692, 695, 696, 705, 706, 707, 708, 711, 712, 720, 721, 723, 724, 725, 731, 737, 741, 757, 759, 766, 767, 777, 778, 780, 781, 787, 796, 807, 808, 815, 820, 821, 822, 823, 826, 827, 832, 837, 849, 852, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 881, 882, 884, 885, 887, 888, 890, 891, 892, 893, 896, 897, 898, 899, 900, 901, 902, 903, 908, 909, 911, 912, 913, 914, 916, 918, 922, 924, 925, 928, 930, 931, 935, 937, 941, 942, 946, 949, 950, 952, 955, 963, 965, 966, 967, 971, 972, 973, 974, 978, 979, 980, 981, 983, 984, 985, 988, 989, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1029, 1030, 1032, 1036, 1037, 1039, 1045, 1050, 1051, 1052, 1054, 1056, 1062, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1073, 1074, 1076, 1078, 1079, 1080, 1082, 1083, 1084, 1087, 1088, 1089, 1090, 1091, 1092, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1110, 1112, 1114, 1118, 1119, 1120, 1121, 1123, 1124, 1126, 1129, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1142, 1143, 1148, 1149, 1151, 1153, 1156, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1180, 1182, 1183, 1184, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1213], "_": [1, 78, 82, 221, 253, 294, 476, 598, 603, 604, 618, 619, 887, 1137, 1142, 1143, 1158, 1190, 1213], "squar": [1, 82, 280, 455, 587, 741, 837, 1017, 1125, 1213], "cube": [1, 82, 336, 544, 741, 889, 1213], "s2": [1, 69, 87, 88, 139, 140, 175, 294, 891, 912, 970, 1002, 1016, 1057, 1070, 1195, 1204, 1213], "renam": [1, 106, 114, 115, 153, 173, 176, 184, 185, 186, 187, 192, 227, 236, 237, 249, 269, 270, 273, 275, 294, 303, 308, 350, 351, 352, 353, 354, 442, 446, 449, 454, 466, 479, 494, 503, 504, 506, 519, 527, 528, 529, 545, 560, 591, 601, 605, 606, 607, 608, 611, 615, 616, 622, 640, 642, 645, 646, 663, 682, 683, 704, 720, 723, 741, 779, 780, 781, 782, 791, 807, 808, 819, 826, 827, 830, 832, 849, 855, 859, 904, 905, 906, 907, 909, 999, 1005, 1027, 1040, 1055, 1063, 1082, 1093, 1109, 1111, 1130, 1140, 1144, 1145, 1146, 1147, 1150, 1154, 1155, 1161, 1180, 1185, 1186, 1191, 1213], "n2": 1, "in_plac": [1, 191, 242, 267, 294, 1085, 1117, 1124, 1213], "true": [1, 6, 12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 43, 45, 57, 58, 59, 63, 65, 67, 84, 85, 86, 103, 104, 108, 110, 112, 114, 115, 116, 118, 119, 120, 122, 125, 126, 128, 129, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 144, 145, 146, 150, 152, 155, 156, 157, 158, 161, 166, 171, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 193, 195, 196, 197, 200, 203, 204, 209, 210, 216, 217, 219, 221, 222, 230, 231, 232, 233, 234, 236, 244, 247, 251, 253, 255, 256, 259, 260, 261, 262, 263, 264, 265, 269, 274, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 294, 302, 303, 304, 305, 306, 307, 308, 319, 327, 328, 330, 331, 333, 345, 346, 347, 348, 349, 356, 363, 365, 368, 371, 374, 376, 383, 384, 387, 388, 390, 391, 392, 396, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 410, 411, 412, 413, 414, 415, 429, 431, 432, 433, 439, 440, 441, 443, 444, 445, 447, 448, 450, 451, 452, 453, 455, 457, 460, 461, 465, 473, 491, 494, 496, 502, 507, 511, 512, 513, 514, 515, 516, 518, 519, 534, 535, 536, 538, 541, 542, 547, 552, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 578, 583, 585, 586, 589, 590, 592, 593, 595, 600, 602, 611, 618, 619, 621, 628, 629, 630, 632, 634, 638, 640, 652, 655, 658, 659, 660, 661, 662, 663, 665, 668, 669, 673, 674, 685, 686, 687, 688, 689, 694, 700, 701, 706, 714, 717, 723, 728, 729, 731, 732, 741, 757, 759, 760, 761, 762, 763, 769, 771, 773, 777, 778, 779, 780, 781, 782, 786, 787, 789, 791, 792, 796, 801, 805, 807, 809, 813, 815, 820, 821, 822, 823, 826, 831, 833, 834, 836, 838, 839, 840, 841, 842, 843, 844, 849, 852, 856, 857, 859, 869, 877, 882, 885, 888, 891, 892, 909, 916, 917, 919, 922, 924, 925, 926, 928, 932, 933, 935, 938, 940, 941, 942, 943, 945, 946, 947, 948, 949, 950, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 969, 970, 972, 973, 974, 981, 987, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1017, 1021, 1022, 1034, 1052, 1055, 1064, 1070, 1076, 1079, 1080, 1082, 1086, 1100, 1109, 1122, 1124, 1128, 1129, 1131, 1132, 1134, 1139, 1141, 1150, 1157, 1158, 1160, 1167, 1168, 1169, 1171, 1173, 1194, 1195, 1201, 1203, 1204, 1213, 1220, 1221], "s3": [1, 39, 118, 129, 130, 133, 134, 294, 1057, 1213], "n3": 1, "8": [1, 16, 36, 37, 39, 41, 42, 43, 44, 45, 56, 57, 63, 68, 75, 77, 78, 79, 81, 82, 86, 136, 142, 156, 159, 160, 161, 162, 163, 164, 165, 166, 168, 172, 177, 179, 181, 189, 191, 199, 202, 206, 207, 209, 211, 214, 223, 225, 228, 231, 233, 234, 235, 236, 240, 243, 245, 246, 248, 254, 255, 256, 257, 263, 266, 267, 269, 294, 305, 307, 320, 344, 346, 349, 355, 364, 430, 438, 458, 468, 470, 479, 485, 486, 487, 488, 524, 538, 544, 555, 556, 561, 578, 584, 586, 605, 608, 609, 610, 628, 658, 664, 673, 674, 675, 677, 679, 691, 693, 698, 702, 705, 706, 707, 708, 709, 710, 711, 712, 713, 722, 725, 726, 730, 741, 759, 764, 766, 767, 768, 770, 774, 776, 783, 786, 790, 792, 801, 803, 806, 807, 811, 818, 826, 849, 852, 899, 908, 929, 990, 1016, 1029, 1031, 1040, 1046, 1047, 1049, 1078, 1089, 1092, 1094, 1097, 1099, 1101, 1103, 1144, 1147, 1148, 1149, 1167, 1213, 1221], "9": [1, 14, 36, 37, 39, 40, 41, 42, 45, 63, 68, 78, 86, 136, 160, 161, 175, 184, 189, 194, 206, 230, 232, 233, 236, 247, 248, 263, 267, 269, 287, 294, 301, 305, 307, 320, 344, 346, 349, 357, 364, 430, 438, 444, 454, 458, 468, 483, 491, 526, 538, 549, 555, 559, 561, 567, 569, 580, 584, 598, 631, 639, 671, 676, 677, 729, 741, 779, 783, 785, 790, 805, 807, 818, 826, 844, 849, 852, 910, 922, 933, 935, 943, 949, 963, 964, 1002, 1016, 1029, 1052, 1089, 1094, 1100, 1102, 1104, 1119, 1137, 1170, 1213], "27": [1, 82, 287, 349, 382, 389, 406, 741, 844, 1213, 1221], "16": [1, 40, 53, 72, 80, 136, 176, 183, 230, 269, 294, 346, 349, 438, 506, 524, 544, 559, 632, 676, 690, 691, 694, 741, 778, 805, 813, 826, 849, 852, 949, 963, 1063, 1078, 1109, 1120, 1171, 1187, 1213], "64": [1, 52, 55, 74, 80, 82, 135, 152, 343, 524, 544, 741, 1078, 1213], "25": [1, 32, 40, 82, 110, 144, 161, 183, 203, 230, 265, 269, 294, 358, 368, 370, 388, 391, 405, 407, 547, 559, 562, 563, 564, 565, 566, 568, 569, 570, 651, 685, 686, 688, 689, 690, 696, 706, 728, 729, 741, 778, 787, 794, 805, 824, 826, 849, 852, 910, 911, 924, 949, 963, 969, 990, 1078, 1082, 1213], "125": [1, 40, 82, 294, 301, 741, 1078, 1213], "inner": [2, 60, 143, 202, 264, 294, 324, 359, 476, 495, 553, 649, 741, 786, 809, 823, 849, 874, 912, 1037, 1056, 1196, 1213], "polarsdatatyp": [2, 60, 114, 115, 128, 141, 142, 143, 144, 146, 153, 156, 206, 294, 308, 333, 416, 503, 505, 506, 507, 554, 600, 601, 663, 692, 703, 704, 705, 706, 714, 717, 732, 737, 741, 759, 849, 852, 859, 882, 1063, 1064, 1088, 1139, 1140, 1213], "pythondatatyp": [2, 60], "width": [2, 31, 40, 114, 115, 128, 294, 495, 849, 1056], "int": [2, 15, 17, 18, 19, 22, 30, 31, 37, 38, 40, 45, 49, 57, 59, 65, 68, 80, 106, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 128, 129, 131, 132, 133, 134, 135, 142, 143, 144, 145, 146, 147, 148, 153, 155, 157, 167, 170, 171, 173, 177, 179, 181, 188, 189, 190, 192, 193, 198, 200, 201, 203, 205, 206, 207, 209, 214, 216, 217, 227, 228, 231, 234, 239, 240, 241, 243, 245, 246, 248, 249, 254, 257, 259, 263, 266, 268, 271, 278, 288, 294, 301, 326, 332, 355, 358, 413, 414, 415, 419, 420, 421, 427, 429, 430, 432, 434, 435, 459, 465, 468, 473, 474, 475, 484, 489, 490, 493, 494, 495, 496, 538, 540, 543, 544, 547, 550, 553, 555, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 577, 579, 584, 588, 597, 600, 601, 606, 609, 610, 611, 612, 615, 617, 619, 620, 631, 632, 637, 644, 645, 646, 650, 656, 658, 665, 673, 675, 684, 687, 690, 696, 698, 700, 701, 714, 717, 718, 719, 722, 723, 726, 727, 730, 732, 741, 757, 760, 771, 772, 773, 776, 783, 787, 790, 801, 811, 812, 814, 816, 818, 819, 820, 824, 825, 829, 835, 845, 849, 866, 867, 881, 882, 891, 892, 908, 911, 971, 972, 973, 974, 978, 979, 980, 984, 985, 988, 989, 990, 1016, 1018, 1019, 1026, 1027, 1028, 1029, 1034, 1035, 1036, 1045, 1050, 1051, 1054, 1055, 1056, 1057, 1066, 1070, 1071, 1073, 1074, 1075, 1077, 1078, 1081, 1082, 1084, 1089, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1114, 1115, 1118, 1123, 1126, 1136, 1139, 1140, 1145, 1148, 1149, 1150, 1151, 1154, 1156, 1158, 1159, 1170, 1171, 1176, 1183, 1184, 1185, 1186, 1192, 1197, 1202, 1213, 1220, 1221], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 294, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 737, 741, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1213, 1220], "fix": [2, 15, 119, 142, 144, 408, 562, 563, 564, 565, 566, 568, 569, 570, 690, 741, 966], "length": [2, 60, 86, 114, 115, 128, 142, 181, 183, 184, 186, 187, 230, 243, 294, 355, 391, 405, 490, 496, 516, 557, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 584, 603, 604, 606, 608, 609, 610, 615, 617, 637, 714, 717, 718, 719, 732, 741, 778, 779, 781, 782, 801, 805, 814, 849, 891, 908, 918, 949, 963, 1051, 1057, 1075, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1123, 1142, 1143, 1145, 1147, 1148, 1149, 1154, 1156, 1176, 1213], "paramet": [2, 7, 8, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 50, 57, 58, 59, 60, 63, 64, 65, 66, 68, 70, 78, 79, 80, 81, 82, 84, 85, 86, 88, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 152, 153, 155, 156, 157, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 198, 200, 201, 202, 203, 205, 206, 207, 209, 210, 212, 213, 214, 216, 217, 219, 220, 221, 223, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 238, 240, 241, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 273, 275, 278, 280, 286, 288, 294, 301, 303, 304, 305, 306, 307, 308, 318, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 338, 339, 340, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 363, 364, 365, 371, 387, 390, 391, 392, 394, 396, 397, 405, 408, 410, 411, 412, 413, 414, 415, 416, 419, 421, 422, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 444, 455, 457, 459, 464, 465, 466, 467, 468, 470, 473, 474, 475, 476, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 502, 503, 504, 505, 506, 507, 518, 522, 524, 527, 528, 529, 534, 535, 538, 539, 540, 543, 544, 545, 547, 548, 550, 552, 553, 554, 555, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 606, 607, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 637, 638, 640, 641, 642, 644, 645, 646, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 737, 741, 757, 759, 760, 762, 763, 765, 766, 767, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 786, 787, 790, 791, 792, 796, 797, 800, 801, 802, 803, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 832, 835, 837, 843, 845, 849, 852, 855, 856, 857, 858, 859, 868, 875, 876, 877, 878, 879, 880, 881, 882, 886, 892, 893, 894, 895, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 917, 918, 919, 925, 945, 948, 949, 950, 952, 954, 955, 963, 966, 969, 970, 971, 972, 973, 974, 977, 978, 979, 980, 981, 984, 985, 988, 989, 990, 993, 994, 1004, 1012, 1013, 1017, 1019, 1025, 1026, 1027, 1028, 1029, 1031, 1034, 1035, 1036, 1037, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1063, 1064, 1078, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1118, 1122, 1123, 1124, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1139, 1140, 1141, 1145, 1146, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1173, 1176, 1177, 1180, 1184, 1185, 1186, 1190, 1191, 1192, 1193, 1194, 1195, 1197, 1198, 1201, 1202, 1203, 1204, 1213, 1220], "The": [2, 25, 38, 39, 40, 45, 59, 60, 63, 67, 69, 70, 78, 83, 84, 88, 103, 105, 106, 107, 109, 112, 114, 115, 116, 117, 119, 123, 124, 126, 128, 132, 134, 137, 138, 139, 140, 148, 161, 163, 164, 165, 168, 169, 172, 181, 182, 183, 186, 188, 194, 200, 203, 206, 213, 219, 230, 231, 232, 233, 236, 237, 255, 262, 265, 269, 270, 273, 280, 294, 303, 326, 327, 328, 329, 356, 360, 361, 368, 382, 387, 388, 391, 394, 405, 406, 416, 419, 422, 427, 434, 469, 473, 494, 505, 506, 507, 539, 547, 550, 553, 554, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 580, 583, 589, 593, 594, 597, 600, 601, 607, 609, 610, 616, 622, 623, 624, 625, 626, 627, 628, 692, 696, 706, 718, 719, 720, 723, 731, 733, 734, 736, 737, 741, 742, 743, 746, 748, 749, 750, 767, 770, 774, 778, 781, 783, 785, 787, 790, 792, 797, 801, 805, 807, 808, 809, 822, 826, 827, 830, 837, 849, 855, 858, 876, 877, 878, 892, 909, 910, 913, 914, 922, 940, 945, 946, 949, 952, 963, 964, 977, 978, 981, 988, 1030, 1034, 1063, 1064, 1082, 1084, 1088, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1119, 1122, 1128, 1132, 1133, 1139, 1140, 1146, 1148, 1149, 1155, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1205, 1207, 1209, 1213, 1214, 1217, 1218, 1219, 1221], "datatyp": [2, 37, 43, 57, 60, 76, 103, 105, 106, 107, 109, 111, 119, 121, 123, 124, 127, 132, 146, 165, 168, 175, 235, 294, 333, 416, 578, 649, 692, 703, 741, 753, 768, 770, 806, 809, 849, 859, 882, 910, 1004, 1011, 1013, 1015, 1064, 1116, 1196, 1213], "valu": [2, 9, 15, 16, 17, 18, 22, 33, 35, 37, 40, 43, 57, 60, 61, 63, 67, 69, 76, 78, 86, 88, 106, 108, 114, 115, 116, 117, 119, 128, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 154, 155, 161, 164, 166, 169, 170, 171, 172, 176, 181, 183, 186, 188, 189, 194, 198, 200, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 217, 219, 221, 222, 223, 225, 230, 231, 232, 233, 234, 240, 241, 244, 245, 246, 247, 248, 251, 252, 256, 259, 260, 263, 264, 265, 266, 276, 277, 279, 281, 282, 284, 285, 294, 300, 301, 302, 304, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 325, 326, 328, 329, 330, 331, 332, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 349, 355, 356, 358, 360, 361, 364, 368, 382, 388, 406, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 450, 451, 452, 453, 456, 457, 458, 460, 461, 462, 463, 466, 467, 468, 469, 472, 474, 475, 477, 478, 480, 481, 482, 484, 489, 492, 493, 496, 497, 499, 501, 502, 505, 506, 507, 508, 509, 510, 521, 522, 523, 524, 525, 532, 533, 534, 535, 537, 539, 540, 543, 544, 547, 548, 550, 553, 554, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 574, 575, 576, 577, 580, 581, 582, 583, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 597, 600, 601, 602, 609, 610, 612, 613, 614, 617, 619, 620, 621, 637, 639, 641, 643, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 658, 659, 661, 664, 670, 672, 674, 676, 677, 678, 679, 680, 681, 682, 683, 693, 694, 699, 702, 703, 707, 708, 709, 710, 711, 712, 713, 716, 717, 718, 719, 724, 725, 731, 741, 756, 757, 767, 772, 773, 774, 778, 781, 784, 785, 786, 787, 793, 794, 795, 796, 798, 799, 802, 803, 805, 809, 811, 812, 815, 816, 817, 820, 823, 824, 833, 834, 836, 838, 839, 841, 842, 849, 852, 854, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 875, 877, 878, 879, 880, 886, 890, 893, 894, 895, 897, 898, 899, 908, 909, 910, 911, 913, 914, 918, 922, 940, 946, 964, 970, 971, 972, 973, 974, 977, 978, 979, 980, 983, 984, 985, 987, 988, 989, 990, 991, 993, 994, 996, 998, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1014, 1018, 1019, 1021, 1022, 1023, 1024, 1027, 1028, 1029, 1030, 1033, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1045, 1050, 1054, 1058, 1063, 1065, 1066, 1068, 1069, 1071, 1073, 1074, 1075, 1077, 1078, 1081, 1082, 1083, 1084, 1088, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1106, 1107, 1108, 1109, 1110, 1111, 1114, 1115, 1119, 1120, 1121, 1122, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1139, 1140, 1141, 1148, 1149, 1151, 1152, 1153, 1156, 1158, 1159, 1160, 1176, 1183, 1184, 1185, 1186, 1187, 1188, 1194, 1195, 1196, 1199, 1201, 1203, 1204, 1213, 1221], "within": [2, 60, 137, 138, 139, 140, 182, 183, 184, 185, 186, 187, 188, 203, 230, 265, 294, 434, 550, 559, 586, 741, 778, 779, 781, 782, 787, 805, 849, 988, 1213, 1220], "each": [2, 37, 40, 57, 60, 78, 115, 116, 132, 137, 138, 139, 140, 142, 181, 182, 183, 184, 185, 186, 187, 201, 203, 206, 219, 230, 234, 256, 262, 264, 265, 272, 273, 276, 278, 280, 288, 294, 356, 391, 405, 442, 443, 446, 447, 475, 478, 479, 484, 493, 500, 507, 547, 550, 558, 564, 566, 568, 570, 573, 579, 586, 598, 603, 604, 605, 608, 619, 620, 665, 668, 672, 700, 701, 723, 731, 741, 762, 778, 779, 781, 782, 787, 801, 805, 822, 823, 830, 832, 833, 835, 837, 845, 849, 891, 909, 949, 963, 999, 1000, 1005, 1006, 1036, 1039, 1040, 1045, 1054, 1082, 1084, 1092, 1106, 1118, 1137, 1142, 1143, 1144, 1147, 1158, 1159, 1182, 1213, 1221], "exampl": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 78, 79, 80, 81, 82, 86, 87, 88, 103, 104, 105, 106, 107, 108, 109, 110, 112, 115, 116, 117, 118, 119, 125, 128, 129, 130, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 177, 178, 179, 180, 181, 182, 183, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 294, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 370, 371, 372, 374, 375, 376, 380, 382, 383, 384, 387, 388, 389, 390, 391, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 609, 610, 612, 613, 614, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 685, 686, 688, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 737, 741, 753, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 881, 882, 884, 885, 886, 887, 888, 890, 891, 892, 893, 896, 897, 898, 899, 900, 901, 902, 903, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 928, 929, 930, 931, 932, 933, 935, 937, 938, 940, 941, 942, 943, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 977, 978, 979, 980, 981, 983, 984, 985, 988, 989, 990, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1018, 1021, 1022, 1029, 1030, 1031, 1032, 1036, 1037, 1039, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1054, 1056, 1057, 1062, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1076, 1078, 1079, 1080, 1082, 1083, 1084, 1087, 1088, 1089, 1090, 1091, 1092, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1110, 1112, 1114, 1118, 1119, 1120, 1121, 1123, 1124, 1126, 1128, 1129, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1143, 1148, 1149, 1151, 1152, 1153, 1156, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1182, 1183, 1184, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1213, 1220], "dtype": [2, 15, 40, 48, 69, 81, 87, 88, 103, 105, 107, 109, 110, 114, 115, 116, 117, 123, 124, 125, 128, 141, 142, 143, 144, 146, 152, 156, 183, 184, 186, 187, 203, 230, 254, 255, 256, 263, 294, 308, 333, 334, 348, 349, 408, 416, 429, 464, 473, 494, 501, 503, 505, 506, 507, 552, 553, 554, 559, 562, 563, 564, 565, 566, 568, 569, 570, 578, 600, 601, 628, 643, 645, 649, 654, 663, 665, 692, 696, 700, 701, 703, 704, 705, 706, 714, 717, 723, 732, 741, 759, 778, 779, 781, 782, 787, 805, 849, 852, 871, 872, 874, 882, 884, 885, 887, 892, 902, 903, 910, 911, 966, 970, 971, 995, 997, 1001, 1004, 1011, 1013, 1015, 1025, 1034, 1056, 1062, 1063, 1088, 1090, 1109, 1116, 1139, 1140, 1167, 1183, 1192, 1194, 1195, 1196, 1200, 1213, 1221], "method": [2, 3, 4, 5, 9, 36, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 85, 86, 104, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 134, 141, 150, 153, 164, 169, 173, 176, 182, 184, 185, 186, 187, 192, 194, 200, 206, 207, 209, 214, 217, 223, 227, 231, 232, 233, 240, 246, 249, 261, 269, 275, 280, 286, 294, 301, 304, 305, 308, 338, 350, 351, 352, 353, 354, 394, 397, 411, 412, 419, 426, 431, 433, 438, 442, 446, 449, 454, 457, 466, 479, 489, 494, 502, 503, 504, 506, 507, 522, 524, 526, 528, 529, 530, 531, 534, 535, 538, 544, 545, 548, 550, 560, 562, 563, 564, 565, 566, 568, 569, 570, 576, 591, 601, 605, 606, 607, 608, 611, 615, 616, 622, 624, 625, 626, 627, 631, 637, 641, 642, 645, 646, 651, 653, 658, 673, 706, 715, 733, 734, 736, 737, 741, 742, 743, 746, 747, 748, 749, 750, 753, 763, 765, 767, 779, 780, 781, 782, 785, 791, 802, 811, 819, 821, 826, 832, 837, 843, 849, 858, 859, 893, 904, 905, 906, 907, 952, 955, 977, 978, 993, 999, 1005, 1027, 1040, 1050, 1055, 1063, 1064, 1083, 1084, 1093, 1099, 1109, 1111, 1114, 1130, 1140, 1144, 1145, 1146, 1147, 1150, 1154, 1155, 1161, 1170, 1176, 1179, 1185, 1186, 1196, 1203, 1205, 1207, 1209, 1213, 1214, 1217, 1218, 1219], "attribut": [2, 48, 49, 50, 60, 141, 294, 733, 734, 736, 737, 742, 743, 746, 748, 749, 750, 849, 1205, 1207, 1209, 1214, 1217, 1218, 1219], "arg": [3, 4, 5, 46, 47, 51, 52, 53, 54, 55, 56, 61, 62, 66, 69, 71, 72, 73, 74, 75, 76, 77, 172, 220, 256, 294, 543, 668, 695, 741, 774, 800, 849, 1064, 1194, 1195, 1213], "kwarg": [3, 4, 5, 46, 47, 51, 52, 53, 54, 55, 56, 61, 62, 66, 69, 71, 72, 73, 74, 75, 76, 77, 116, 160, 172, 220, 256, 294, 543, 741, 774, 800, 849, 1195, 1213, 1220], "A": [5, 18, 37, 40, 57, 63, 66, 84, 85, 110, 114, 115, 116, 117, 128, 130, 135, 148, 175, 183, 202, 203, 208, 210, 215, 221, 247, 251, 263, 264, 265, 269, 270, 294, 300, 360, 361, 364, 411, 412, 419, 431, 433, 441, 445, 448, 450, 457, 496, 502, 505, 516, 534, 535, 556, 561, 562, 563, 564, 565, 566, 568, 569, 570, 590, 591, 592, 597, 598, 599, 602, 612, 613, 637, 671, 690, 691, 695, 741, 778, 786, 787, 803, 823, 826, 827, 849, 852, 913, 914, 918, 978, 1094, 1095, 1096, 1098, 1101, 1102, 1103, 1129, 1130, 1131, 1136, 1137, 1138, 1141, 1151, 1152, 1176, 1213, 1220], "encod": [5, 77, 114, 115, 128, 253, 294, 328, 428, 593, 639, 741, 877, 1132], "set": [5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 25, 30, 31, 32, 35, 37, 39, 40, 41, 42, 43, 44, 57, 58, 59, 78, 79, 104, 106, 109, 114, 115, 116, 119, 120, 122, 125, 126, 128, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 152, 159, 164, 174, 182, 183, 184, 185, 186, 187, 188, 200, 203, 207, 209, 210, 212, 214, 230, 234, 236, 243, 246, 247, 253, 255, 260, 261, 263, 269, 294, 304, 306, 308, 338, 356, 408, 434, 444, 473, 484, 485, 486, 487, 488, 490, 494, 496, 506, 507, 543, 547, 554, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 573, 579, 583, 584, 589, 607, 616, 617, 622, 623, 624, 625, 626, 627, 628, 629, 630, 634, 655, 659, 661, 665, 669, 674, 685, 686, 688, 689, 693, 700, 701, 702, 714, 717, 718, 719, 723, 728, 729, 731, 732, 741, 753, 762, 767, 769, 777, 778, 779, 780, 781, 782, 786, 787, 791, 792, 796, 805, 807, 809, 814, 821, 826, 832, 837, 849, 856, 857, 888, 893, 909, 966, 988, 1002, 1034, 1045, 1046, 1047, 1048, 1049, 1051, 1055, 1057, 1063, 1064, 1082, 1088, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1106, 1107, 1111, 1118, 1122, 1123, 1128, 1146, 1155, 1156, 1161, 1162, 1163, 1164, 1167, 1168, 1169, 1173, 1194, 1201, 1213, 1221], "string": [5, 7, 8, 10, 11, 17, 19, 20, 21, 25, 36, 37, 38, 40, 43, 44, 48, 57, 63, 69, 77, 87, 88, 110, 114, 115, 116, 117, 128, 137, 138, 139, 140, 141, 142, 143, 146, 149, 155, 175, 181, 182, 183, 185, 203, 219, 221, 230, 233, 236, 237, 244, 254, 259, 260, 263, 265, 269, 270, 273, 294, 301, 330, 335, 387, 391, 394, 397, 405, 416, 418, 424, 428, 439, 476, 518, 539, 543, 554, 559, 562, 563, 564, 565, 566, 568, 569, 570, 586, 589, 590, 592, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 637, 639, 660, 662, 668, 670, 671, 672, 679, 683, 685, 686, 688, 689, 695, 708, 712, 720, 723, 725, 728, 729, 731, 741, 757, 769, 777, 778, 780, 787, 805, 807, 808, 809, 815, 820, 826, 827, 830, 849, 852, 879, 885, 886, 945, 949, 952, 955, 963, 976, 994, 1037, 1088, 1127, 1128, 1129, 1131, 1134, 1135, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1172, 1174, 1175, 1176, 1192, 1213, 1221], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 428, 741, 765, 849], "activ": [6, 12, 13, 23, 24, 26, 27, 28, 29, 33, 34, 470, 598, 1031, 1137], "bool": [6, 12, 13, 14, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 43, 45, 57, 58, 59, 78, 84, 85, 86, 87, 88, 103, 104, 108, 110, 114, 115, 119, 120, 122, 124, 125, 126, 128, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 152, 155, 156, 157, 158, 166, 171, 172, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 191, 193, 195, 196, 197, 202, 203, 210, 219, 221, 230, 233, 234, 238, 242, 244, 247, 251, 253, 255, 256, 259, 260, 261, 262, 264, 265, 267, 269, 277, 279, 281, 284, 294, 303, 304, 305, 306, 307, 308, 318, 325, 327, 328, 330, 331, 333, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 374, 390, 392, 405, 410, 411, 412, 413, 414, 415, 431, 433, 439, 440, 441, 443, 444, 445, 447, 448, 450, 451, 452, 453, 455, 457, 460, 461, 465, 470, 473, 484, 491, 494, 497, 502, 503, 505, 507, 511, 512, 513, 514, 515, 518, 534, 535, 536, 538, 541, 542, 547, 550, 552, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 575, 578, 583, 585, 586, 589, 590, 592, 593, 595, 611, 612, 613, 618, 619, 621, 628, 629, 630, 632, 634, 640, 652, 655, 658, 659, 660, 661, 662, 663, 665, 668, 669, 673, 676, 680, 685, 686, 687, 688, 689, 700, 701, 703, 706, 714, 717, 723, 728, 729, 731, 732, 741, 757, 759, 760, 762, 763, 769, 771, 773, 774, 777, 778, 779, 780, 781, 782, 786, 787, 791, 792, 796, 801, 805, 810, 813, 815, 820, 821, 822, 823, 826, 834, 836, 838, 841, 849, 852, 856, 857, 859, 868, 875, 877, 882, 885, 888, 892, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 928, 948, 950, 963, 969, 970, 972, 973, 974, 981, 987, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1021, 1022, 1026, 1027, 1028, 1031, 1034, 1045, 1052, 1055, 1058, 1064, 1076, 1079, 1080, 1082, 1084, 1085, 1086, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1106, 1107, 1109, 1110, 1111, 1112, 1117, 1122, 1124, 1128, 1129, 1131, 1132, 1134, 1150, 1151, 1152, 1157, 1158, 1160, 1167, 1168, 1169, 1171, 1173, 1193, 1194, 1195, 1198, 1201, 1203, 1213, 1220], "none": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 48, 49, 57, 58, 59, 61, 63, 65, 66, 68, 78, 85, 88, 103, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 153, 157, 161, 164, 170, 171, 181, 183, 184, 186, 187, 188, 194, 198, 202, 203, 204, 206, 207, 209, 212, 214, 217, 218, 221, 230, 231, 234, 240, 241, 243, 244, 246, 251, 253, 256, 260, 261, 262, 263, 264, 265, 294, 304, 306, 307, 308, 320, 326, 338, 344, 346, 349, 356, 360, 361, 387, 390, 391, 405, 412, 413, 414, 415, 416, 419, 420, 421, 427, 434, 438, 439, 448, 450, 451, 452, 458, 460, 461, 469, 474, 478, 484, 485, 486, 487, 488, 490, 496, 503, 505, 506, 507, 515, 518, 520, 535, 536, 537, 540, 544, 547, 550, 551, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 573, 576, 577, 578, 579, 580, 584, 585, 589, 590, 592, 594, 595, 598, 600, 601, 602, 603, 604, 607, 609, 610, 611, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 629, 630, 632, 634, 637, 638, 639, 640, 649, 659, 660, 661, 662, 663, 670, 672, 674, 679, 685, 686, 687, 688, 689, 690, 692, 693, 702, 703, 704, 705, 706, 708, 712, 717, 718, 719, 723, 725, 727, 728, 729, 731, 741, 760, 761, 763, 767, 772, 773, 778, 779, 781, 782, 785, 786, 787, 789, 791, 792, 796, 799, 805, 809, 811, 812, 813, 814, 815, 821, 822, 823, 828, 832, 837, 849, 852, 856, 857, 859, 866, 867, 892, 893, 909, 910, 912, 913, 914, 930, 931, 932, 937, 948, 949, 963, 968, 969, 972, 973, 974, 978, 979, 980, 982, 988, 990, 992, 993, 994, 1004, 1009, 1010, 1013, 1016, 1017, 1018, 1021, 1022, 1030, 1035, 1039, 1045, 1046, 1047, 1049, 1051, 1057, 1063, 1064, 1065, 1066, 1067, 1068, 1072, 1082, 1083, 1084, 1088, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1106, 1107, 1110, 1111, 1113, 1114, 1115, 1118, 1119, 1122, 1123, 1126, 1128, 1129, 1131, 1133, 1134, 1137, 1139, 1140, 1141, 1142, 1143, 1146, 1148, 1149, 1150, 1155, 1156, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1167, 1168, 1169, 1171, 1173, 1176, 1191, 1192, 1193, 1195, 1196, 1202, 1213, 1220], "decim": [6, 14, 15, 16, 32, 33, 37, 40, 57, 255, 294, 571, 631, 741, 849, 1104, 1170, 1213], "temporari": 6, "remov": [6, 9, 89, 114, 115, 128, 152, 162, 207, 209, 214, 246, 253, 294, 308, 405, 416, 504, 507, 527, 607, 616, 622, 623, 624, 625, 626, 627, 692, 741, 766, 849, 909, 949, 963, 1082, 1146, 1155, 1161, 1162, 1163, 1164, 1165, 1166, 1169, 1203, 1213], "onc": [6, 66, 114, 115, 119, 148, 206, 232, 234, 273, 294, 484, 507, 573, 626, 627, 741, 758, 830, 849, 1045, 1064, 1106, 1165, 1166, 1213], "stabil": [6, 188, 294, 434, 741, 988, 1213], "current": [6, 7, 8, 10, 11, 35, 65, 104, 110, 116, 117, 133, 157, 158, 202, 203, 294, 370, 391, 496, 540, 741, 753, 760, 761, 762, 786, 787, 849, 852, 892, 896, 916, 924, 949, 1078, 1213, 1220], "consid": [6, 85, 87, 88, 114, 115, 128, 134, 137, 138, 139, 140, 164, 166, 176, 199, 206, 212, 232, 261, 263, 264, 294, 308, 338, 355, 391, 505, 507, 562, 563, 564, 565, 566, 568, 569, 570, 676, 694, 737, 741, 763, 767, 783, 790, 796, 821, 837, 849, 885, 888, 893, 908, 949, 970, 990, 1004, 1064, 1082, 1107, 1109, 1110, 1213], "beta": 6, "cfg": [7, 9, 22, 150], "previous": [7, 8], "save": [7, 8, 11, 183, 203, 230, 265, 294, 362, 370, 387, 391, 405, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 688, 689, 690, 728, 729, 737, 741, 753, 778, 787, 805, 849, 924, 945, 949, 963], "option": [7, 8, 9, 10, 11, 35, 39, 40, 49, 78, 114, 116, 118, 119, 120, 122, 126, 129, 130, 131, 133, 134, 136, 141, 142, 143, 144, 145, 146, 147, 183, 198, 203, 212, 251, 255, 260, 264, 294, 455, 560, 562, 563, 564, 565, 566, 568, 569, 570, 583, 617, 655, 703, 723, 731, 741, 753, 778, 786, 787, 796, 809, 823, 849, 852, 1013, 1017, 1093, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1122, 1156, 1191, 1201, 1213], "from": [7, 8, 9, 10, 11, 15, 21, 33, 37, 40, 57, 63, 64, 65, 78, 86, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 156, 161, 162, 167, 169, 174, 181, 183, 186, 200, 201, 203, 204, 212, 221, 225, 230, 231, 233, 234, 236, 237, 253, 260, 261, 263, 264, 265, 294, 345, 356, 357, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 412, 416, 428, 438, 455, 484, 496, 507, 532, 533, 535, 540, 543, 547, 549, 559, 561, 562, 563, 565, 568, 569, 570, 573, 586, 597, 598, 600, 601, 611, 624, 625, 626, 627, 628, 629, 630, 634, 653, 666, 667, 670, 684, 685, 686, 687, 688, 690, 717, 727, 728, 729, 737, 740, 741, 759, 765, 766, 771, 778, 781, 787, 796, 803, 805, 807, 808, 821, 823, 828, 849, 852, 909, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 971, 977, 1013, 1017, 1045, 1057, 1073, 1074, 1075, 1078, 1082, 1094, 1106, 1136, 1137, 1139, 1140, 1150, 1165, 1166, 1167, 1168, 1169, 1173, 1204, 1213, 1220, 1221], "json": [7, 8, 10, 11, 43, 44, 123, 124, 130, 132, 294, 428, 520, 600, 601, 602, 639, 741, 753, 765, 809, 849, 1139, 1140, 1141], "produc": [7, 8, 143, 144, 146, 202, 294, 466, 467, 515, 705, 786, 791, 792, 849, 1027, 1028], "load_from_fil": [7, 10, 11], "file": [7, 8, 10, 11, 36, 37, 41, 42, 43, 44, 45, 57, 58, 59, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 169, 294, 520, 765, 809, 849, 977, 1213], "path": [8, 11, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 57, 58, 59, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 294, 520, 575, 602, 741, 765, 809, 813, 849, 1112, 1141, 1213, 1221], "load": [8, 10, 11, 106, 108, 116, 118, 119, 125, 129, 130, 145, 147, 294, 741, 753, 783, 790, 849, 1221], "reset": [9, 150], "default": [9, 12, 14, 15, 19, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 57, 59, 78, 85, 86, 103, 105, 106, 107, 108, 109, 110, 114, 115, 117, 119, 123, 124, 125, 126, 128, 137, 139, 141, 142, 143, 144, 145, 146, 150, 161, 164, 167, 182, 183, 184, 185, 186, 187, 188, 200, 202, 203, 210, 212, 219, 221, 230, 231, 232, 233, 234, 240, 245, 247, 253, 261, 263, 264, 266, 271, 294, 303, 304, 306, 335, 356, 390, 391, 405, 410, 412, 413, 414, 415, 434, 473, 484, 489, 490, 494, 496, 498, 506, 515, 532, 533, 535, 540, 547, 550, 554, 559, 562, 563, 564, 565, 566, 568, 569, 570, 573, 576, 579, 588, 589, 597, 607, 611, 616, 617, 622, 623, 624, 625, 628, 629, 630, 632, 634, 655, 656, 659, 661, 665, 669, 673, 674, 675, 685, 686, 687, 688, 689, 693, 696, 700, 701, 702, 703, 714, 717, 722, 723, 728, 729, 730, 732, 741, 762, 763, 767, 769, 777, 778, 779, 780, 781, 782, 786, 787, 796, 805, 809, 811, 816, 821, 824, 849, 856, 857, 886, 893, 909, 910, 948, 949, 963, 969, 971, 972, 973, 974, 988, 1034, 1045, 1050, 1051, 1055, 1057, 1063, 1073, 1074, 1078, 1082, 1084, 1088, 1106, 1114, 1118, 1126, 1128, 1129, 1136, 1146, 1150, 1155, 1156, 1161, 1162, 1163, 1164, 1167, 1168, 1169, 1171, 1173, 1201, 1202, 1213, 1221], "state": [9, 84, 85, 96, 676, 680, 753, 762, 763, 769, 771, 801, 813, 849], "note": [9, 15, 25, 39, 40, 63, 67, 68, 69, 78, 85, 87, 88, 103, 104, 105, 107, 109, 110, 114, 116, 117, 118, 119, 123, 124, 126, 129, 130, 134, 137, 139, 142, 144, 146, 148, 150, 152, 155, 160, 161, 170, 183, 184, 186, 187, 188, 198, 199, 200, 202, 203, 206, 217, 220, 221, 230, 231, 232, 233, 240, 252, 255, 259, 260, 264, 265, 269, 294, 338, 348, 349, 360, 361, 383, 384, 387, 391, 405, 434, 439, 448, 450, 454, 470, 473, 489, 494, 496, 505, 507, 526, 528, 529, 530, 531, 545, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 576, 583, 590, 597, 598, 599, 603, 604, 612, 623, 624, 625, 628, 637, 642, 643, 651, 676, 685, 686, 688, 689, 690, 694, 703, 714, 716, 717, 728, 729, 731, 732, 737, 741, 752, 757, 763, 771, 772, 778, 779, 781, 782, 783, 787, 790, 803, 805, 811, 813, 815, 820, 823, 826, 849, 893, 902, 903, 910, 913, 914, 941, 942, 945, 963, 987, 988, 1031, 1034, 1050, 1055, 1064, 1100, 1107, 1110, 1114, 1117, 1122, 1129, 1136, 1137, 1138, 1142, 1143, 1151, 1162, 1163, 1164, 1167, 1176, 1183, 1194, 1213, 1220], "oper": [9, 40, 69, 86, 88, 93, 94, 103, 105, 106, 107, 108, 109, 114, 116, 126, 153, 158, 169, 172, 175, 182, 185, 192, 193, 204, 206, 213, 217, 219, 220, 224, 228, 230, 233, 234, 240, 250, 255, 256, 260, 263, 272, 273, 294, 301, 302, 305, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 411, 412, 426, 431, 433, 454, 457, 484, 485, 486, 487, 488, 489, 496, 502, 519, 522, 524, 526, 528, 529, 534, 535, 538, 544, 545, 552, 559, 573, 576, 641, 642, 651, 658, 659, 661, 671, 672, 691, 741, 753, 761, 771, 777, 780, 783, 786, 790, 796, 797, 805, 811, 830, 849, 896, 900, 901, 902, 903, 904, 905, 906, 907, 908, 977, 1045, 1046, 1047, 1048, 1049, 1050, 1086, 1106, 1114, 1189, 1193, 1194, 1195, 1203, 1213], "environ": [9, 35, 133, 145, 148], "ani": [9, 37, 39, 40, 45, 48, 57, 83, 103, 104, 105, 106, 107, 108, 109, 114, 115, 116, 118, 119, 120, 122, 123, 124, 126, 128, 129, 130, 131, 133, 141, 143, 144, 146, 150, 153, 160, 164, 169, 171, 172, 175, 198, 200, 201, 206, 210, 219, 220, 231, 232, 233, 247, 251, 252, 255, 256, 261, 263, 264, 294, 301, 304, 305, 308, 333, 392, 411, 412, 421, 426, 429, 431, 433, 444, 457, 464, 470, 502, 503, 505, 506, 507, 519, 522, 524, 528, 529, 534, 535, 538, 539, 543, 545, 554, 555, 560, 561, 574, 589, 611, 624, 625, 626, 627, 628, 629, 630, 632, 634, 641, 642, 645, 651, 658, 659, 662, 663, 673, 703, 706, 731, 741, 767, 773, 774, 800, 821, 823, 849, 852, 856, 859, 950, 977, 980, 984, 1002, 1016, 1025, 1031, 1063, 1064, 1088, 1089, 1093, 1094, 1107, 1108, 1111, 1128, 1150, 1167, 1168, 1169, 1171, 1173, 1185, 1193, 1194, 1195, 1213, 1220, 1221], "local": [9, 39, 116, 118, 129, 130, 133, 146, 294, 405, 541, 542, 741, 885, 887, 920, 921, 953, 963, 1079, 1080, 1213], "non": [9, 37, 39, 40, 49, 57, 78, 108, 135, 184, 187, 201, 212, 230, 236, 237, 240, 260, 264, 269, 270, 294, 338, 439, 496, 506, 540, 554, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 591, 592, 598, 603, 637, 660, 662, 670, 671, 672, 679, 683, 690, 708, 712, 718, 719, 720, 723, 725, 741, 779, 782, 796, 805, 807, 808, 811, 823, 826, 827, 849, 893, 994, 1057, 1078, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1114, 1130, 1131, 1137, 1142, 1176, 1194, 1213], "env": [9, 147], "back": [9, 78, 169, 256, 294, 539, 635, 741, 809, 849, 977, 1174, 1195, 1213], "contain": [10, 37, 38, 39, 40, 57, 78, 83, 104, 105, 108, 110, 116, 118, 129, 130, 137, 138, 143, 155, 164, 183, 186, 201, 217, 221, 259, 264, 294, 304, 306, 308, 330, 331, 444, 506, 507, 554, 589, 595, 597, 599, 602, 620, 621, 637, 659, 661, 706, 741, 757, 767, 778, 781, 801, 820, 823, 849, 852, 856, 857, 909, 1063, 1070, 1082, 1088, 1128, 1134, 1136, 1138, 1141, 1159, 1160, 1176, 1189, 1213], "save_to_fil": 10, "json_str": 10, "written": [11, 36, 37, 40, 41, 42, 43, 44, 45, 57, 58, 59, 294, 809, 849], "leav": [11, 212, 294, 496, 796, 849], "directli": [11, 35, 65, 85, 116, 144, 146, 150, 233, 294, 413, 414, 415, 717, 741, 763, 849, 972, 973, 974, 1213, 1221], "json_fil": 11, "ascii": [12, 25, 603, 604, 606, 615, 637, 1142, 1143, 1145, 1154, 1176], "charact": [12, 14, 17, 25, 31, 32, 33, 37, 38, 57, 114, 115, 128, 294, 387, 596, 598, 603, 604, 606, 607, 608, 609, 610, 615, 616, 618, 619, 622, 623, 624, 625, 626, 627, 637, 801, 849, 852, 945, 1135, 1137, 1142, 1143, 1145, 1146, 1147, 1148, 1149, 1154, 1155, 1157, 1158, 1161, 1162, 1163, 1164, 1176], "displai": [12, 15, 16, 17, 18, 22, 24, 28, 30, 40, 181, 294], "tabl": [12, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 38, 39, 40, 64, 65, 66, 68, 103, 110, 114, 115, 118, 119, 128, 129, 130, 221, 250, 256, 263, 264, 294, 823, 849, 1195, 1213, 1220], "outlin": 12, "fals": [12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 37, 39, 40, 43, 45, 57, 58, 59, 63, 78, 84, 85, 104, 108, 110, 114, 115, 116, 119, 120, 122, 124, 125, 126, 128, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 152, 155, 156, 157, 158, 161, 166, 175, 180, 181, 182, 183, 184, 185, 186, 187, 191, 193, 195, 196, 197, 200, 202, 203, 204, 209, 210, 216, 217, 219, 221, 222, 230, 231, 232, 233, 234, 238, 242, 244, 247, 251, 253, 255, 256, 259, 260, 261, 264, 265, 267, 269, 276, 277, 279, 281, 282, 284, 287, 294, 304, 305, 306, 308, 318, 325, 327, 330, 331, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 374, 390, 392, 405, 410, 411, 412, 413, 414, 415, 433, 439, 440, 441, 443, 444, 445, 447, 448, 450, 451, 452, 453, 455, 457, 460, 461, 465, 470, 473, 484, 491, 494, 497, 502, 503, 505, 507, 511, 514, 516, 518, 534, 535, 536, 538, 541, 542, 547, 550, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 575, 578, 583, 585, 586, 589, 590, 592, 595, 600, 611, 612, 613, 618, 619, 621, 628, 629, 630, 632, 652, 655, 658, 659, 660, 661, 662, 665, 668, 669, 673, 676, 680, 685, 686, 687, 688, 689, 700, 701, 703, 714, 717, 723, 728, 729, 731, 732, 741, 757, 759, 760, 761, 762, 763, 769, 771, 777, 778, 779, 780, 781, 782, 786, 787, 789, 791, 792, 801, 805, 810, 813, 815, 820, 821, 823, 826, 833, 834, 836, 838, 839, 841, 844, 849, 852, 856, 857, 868, 875, 882, 885, 888, 891, 892, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 928, 948, 950, 963, 969, 970, 972, 973, 974, 981, 987, 994, 995, 996, 998, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1017, 1021, 1022, 1031, 1034, 1045, 1052, 1055, 1058, 1070, 1076, 1079, 1080, 1082, 1084, 1085, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1106, 1109, 1112, 1117, 1122, 1124, 1128, 1129, 1131, 1134, 1139, 1150, 1151, 1152, 1157, 1158, 1160, 1167, 1168, 1169, 1171, 1194, 1195, 1198, 1201, 1203, 1204, 1213, 1220], "revert": [12, 14, 15], "utf8_full_condens": [12, 25, 110], "format": [12, 16, 20, 21, 25, 37, 40, 41, 42, 57, 113, 114, 115, 116, 128, 134, 168, 181, 200, 212, 232, 233, 252, 292, 294, 391, 394, 397, 518, 628, 629, 630, 634, 690, 770, 796, 809, 849, 952, 955, 1167, 1168, 1169, 1173, 1212], "style": [12, 25, 40, 116, 126, 221, 294], "abc": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 301, 598, 612, 624, 741, 852, 1137, 1151], "xyz": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 301, 592, 598, 741, 1131, 1137, 1191, 1213], "f64": [12, 14, 15, 16, 20, 23, 24, 26, 27, 28, 29, 30, 32, 60, 63, 78, 80, 82, 86, 104, 106, 134, 144, 157, 158, 160, 161, 162, 165, 170, 171, 175, 180, 181, 182, 183, 193, 194, 202, 203, 208, 209, 210, 211, 215, 221, 222, 223, 243, 244, 245, 247, 266, 269, 273, 277, 279, 281, 282, 283, 284, 286, 287, 294, 300, 303, 310, 311, 312, 313, 314, 315, 333, 336, 337, 341, 342, 343, 355, 356, 357, 360, 361, 392, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 425, 426, 431, 433, 438, 448, 450, 451, 452, 454, 455, 457, 470, 481, 498, 499, 500, 502, 508, 509, 510, 521, 524, 526, 532, 533, 534, 535, 540, 544, 547, 548, 549, 550, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 581, 582, 583, 587, 588, 647, 648, 651, 656, 666, 667, 670, 671, 673, 675, 691, 692, 706, 709, 710, 721, 722, 730, 737, 741, 760, 766, 772, 773, 777, 778, 785, 786, 787, 794, 795, 802, 815, 816, 824, 826, 828, 830, 834, 836, 838, 839, 840, 841, 843, 844, 849, 852, 860, 861, 862, 863, 864, 865, 889, 890, 897, 898, 899, 908, 909, 910, 913, 914, 950, 972, 973, 974, 979, 983, 990, 993, 1031, 1078, 1082, 1084, 1094, 1096, 1097, 1099, 1100, 1101, 1103, 1104, 1105, 1120, 1121, 1125, 1187, 1188, 1200, 1213, 1221], "multi": [13, 40, 114, 115, 294, 416, 597, 741, 1136], "automat": [13, 65, 68, 103, 105, 106, 107, 109, 110, 114, 115, 116, 117, 119, 123, 124, 128, 132, 144, 146, 148, 236, 269, 294, 506, 554, 623, 624, 625, 741, 807, 826, 849, 1063, 1088, 1162, 1163, 1164, 1213, 1220], "turn": [13, 57, 58, 59, 84, 85, 114, 115, 128, 635, 762, 763, 769, 771, 791, 792, 801, 849, 1174], "struct": [13, 110, 217, 236, 258, 262, 269, 294, 356, 496, 547, 554, 557, 558, 599, 600, 619, 620, 655, 676, 677, 679, 680, 681, 705, 741, 807, 822, 826, 837, 849, 909, 1057, 1082, 1091, 1138, 1139, 1156, 1158, 1159, 1213], "v": [13, 14, 45, 65, 66, 167, 294, 574, 741, 1108, 1213], "v2": [13, 120, 131], "out": [13, 19, 57, 58, 59, 110, 136, 230, 233, 294, 328, 473, 474, 494, 590, 593, 731, 805, 849, 877, 1034, 1035, 1055, 1129, 1132], "separ": [14, 15, 29, 32, 37, 57, 112, 114, 115, 128, 219, 221, 253, 260, 262, 294, 308, 471, 476, 507, 596, 672, 676, 677, 680, 681, 741, 822, 849, 1032, 1037, 1135, 1182, 1190, 1213], "set_thousands_separ": 14, "thousand": [14, 32], "group": [14, 32, 40, 45, 59, 63, 115, 182, 183, 184, 185, 186, 187, 201, 217, 219, 221, 230, 233, 263, 265, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 294, 302, 355, 418, 424, 429, 432, 470, 507, 515, 517, 539, 550, 558, 559, 585, 586, 590, 597, 598, 599, 612, 655, 706, 741, 777, 778, 779, 780, 781, 782, 805, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 852, 908, 1031, 1092, 1129, 1136, 1137, 1138, 1151, 1201, 1213], "9876": 14, "54321": 14, "1010101": 14, "123456": [14, 852], "78": 14, "tbl_cell_numeric_align": [14, 15, 32], "right": [14, 15, 20, 21, 23, 32, 40, 114, 115, 137, 138, 139, 140, 183, 184, 186, 187, 202, 203, 230, 264, 294, 356, 413, 414, 415, 439, 485, 486, 487, 488, 547, 559, 562, 563, 564, 565, 566, 568, 569, 570, 574, 583, 615, 670, 685, 686, 688, 689, 728, 729, 741, 778, 779, 781, 782, 786, 787, 805, 823, 849, 909, 972, 973, 974, 994, 1046, 1047, 1048, 1049, 1082, 1108, 1122, 1154, 1213], "thousands_separ": [14, 15, 32], "decimal_separ": [14, 32], "float_precis": [14, 15, 32, 37, 40, 57, 294, 849], "print": [14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 30, 32, 33, 115, 136, 137, 139, 165, 181, 182, 201, 204, 254, 272, 294, 437, 518, 741, 762, 784, 849, 1002, 1192, 1213, 1221], "876": 14, "543": 14, "010": [14, 632, 1171], "101": [14, 32, 364, 632, 1171, 1221], "000": [14, 15, 32, 40, 294, 1221], "123": [14, 592, 598, 613, 637, 731, 852, 1131, 1137, 1152, 1176, 1191, 1213], "456": [14, 15, 364, 852, 918, 1191, 1213], "780": 14, "precis": [15, 16, 37, 39, 40, 48, 49, 57, 116, 200, 232, 233, 252, 294, 363, 631, 849, 852, 917, 1170], "control": [15, 16, 40, 68, 85, 86, 142, 294, 763, 769, 849], "number": [15, 16, 17, 18, 19, 22, 30, 37, 38, 40, 45, 57, 59, 69, 78, 88, 97, 103, 105, 107, 109, 112, 114, 115, 117, 119, 123, 124, 125, 128, 132, 133, 135, 142, 144, 145, 147, 148, 155, 157, 167, 168, 170, 171, 181, 189, 200, 201, 204, 205, 216, 217, 234, 240, 241, 245, 248, 259, 263, 266, 276, 278, 288, 294, 319, 326, 332, 344, 355, 356, 358, 372, 375, 380, 382, 392, 406, 407, 409, 413, 414, 415, 419, 421, 427, 435, 448, 450, 458, 459, 468, 475, 478, 479, 484, 489, 493, 496, 543, 547, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 576, 577, 579, 588, 603, 604, 605, 608, 612, 619, 620, 631, 644, 650, 656, 673, 674, 675, 690, 698, 718, 719, 722, 726, 730, 741, 757, 760, 770, 771, 772, 773, 783, 790, 801, 811, 812, 816, 818, 820, 824, 833, 835, 845, 849, 881, 892, 908, 909, 911, 926, 929, 938, 940, 950, 964, 965, 967, 971, 972, 973, 974, 978, 980, 989, 1001, 1018, 1019, 1029, 1036, 1039, 1040, 1045, 1050, 1054, 1057, 1070, 1071, 1082, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1104, 1105, 1106, 1114, 1115, 1118, 1126, 1142, 1143, 1144, 1147, 1151, 1158, 1159, 1170, 1184, 1197, 1202, 1213, 1221], "place": [15, 16, 37, 57, 155, 163, 169, 191, 192, 193, 221, 226, 228, 233, 241, 244, 259, 267, 294, 318, 476, 577, 585, 741, 757, 812, 815, 820, 849, 858, 868, 977, 1037, 1085, 1115, 1124, 1213], "float": [15, 16, 37, 40, 51, 52, 57, 119, 134, 137, 138, 139, 140, 141, 144, 146, 152, 161, 167, 170, 203, 223, 234, 241, 286, 294, 337, 356, 360, 361, 392, 410, 411, 412, 413, 414, 415, 420, 425, 431, 433, 438, 441, 445, 448, 450, 451, 452, 457, 465, 484, 498, 502, 508, 521, 532, 533, 534, 535, 544, 547, 548, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 573, 651, 715, 717, 741, 772, 787, 802, 812, 813, 843, 849, 852, 882, 890, 909, 910, 912, 913, 914, 950, 969, 971, 972, 973, 974, 979, 983, 990, 1001, 1017, 1026, 1027, 1028, 1045, 1059, 1066, 1067, 1073, 1074, 1081, 1082, 1083, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1104, 1106, 1107, 1108, 1110, 1111, 1122, 1126, 1183, 1194, 1202, 1213, 1221], "point": [15, 16, 40, 51, 52, 144, 146, 170, 183, 186, 204, 294, 337, 356, 360, 392, 420, 425, 448, 450, 484, 507, 571, 573, 741, 772, 778, 781, 791, 792, 803, 849, 890, 909, 913, 950, 979, 983, 1001, 1045, 1082, 1104, 1106, 1194, 1213], "standard": [15, 40, 245, 255, 294, 375, 414, 568, 583, 588, 602, 722, 737, 741, 816, 849, 929, 973, 1122, 1126, 1141, 1213, 1221], "behaviour": [15, 78, 86, 164, 294, 590, 597, 598, 612, 651, 741, 767, 849, 1129, 1136, 1137, 1151], "when": [15, 19, 22, 24, 28, 37, 40, 45, 48, 57, 59, 68, 69, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 114, 115, 116, 119, 120, 122, 125, 126, 128, 129, 131, 132, 134, 137, 138, 139, 140, 144, 146, 153, 155, 165, 167, 169, 171, 175, 183, 184, 186, 187, 202, 206, 220, 230, 231, 233, 236, 237, 240, 244, 253, 255, 259, 261, 264, 270, 294, 338, 413, 414, 415, 421, 489, 496, 506, 516, 543, 554, 558, 559, 576, 585, 586, 603, 604, 623, 624, 625, 628, 668, 676, 680, 694, 741, 757, 773, 778, 779, 781, 782, 786, 791, 792, 805, 807, 808, 811, 815, 820, 821, 823, 827, 849, 893, 971, 972, 973, 974, 977, 980, 1050, 1063, 1088, 1092, 1107, 1110, 1114, 1142, 1143, 1162, 1163, 1164, 1167, 1190, 1213], "larger": [15, 57, 58, 59, 673, 762, 849], "should": [15, 38, 40, 57, 58, 59, 86, 103, 105, 107, 109, 118, 123, 124, 126, 128, 132, 134, 141, 142, 146, 155, 162, 200, 203, 206, 231, 232, 233, 252, 253, 259, 262, 280, 294, 302, 335, 355, 408, 416, 448, 450, 470, 507, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 574, 583, 655, 690, 692, 703, 706, 718, 719, 731, 741, 757, 766, 771, 786, 787, 792, 809, 813, 815, 820, 822, 849, 852, 886, 908, 966, 1031, 1064, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1108, 1122, 1201, 1213], "ensur": [15, 40, 117, 143, 144, 146, 182, 185, 219, 231, 294, 439, 741, 777, 780, 791, 792, 849, 852, 1194, 1213], "awar": [15, 200, 232, 233, 252, 294, 771, 849, 1169], "both": [15, 30, 37, 57, 69, 87, 88, 183, 184, 186, 187, 202, 203, 213, 230, 231, 264, 294, 307, 338, 356, 416, 439, 547, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 688, 689, 728, 729, 737, 741, 752, 778, 779, 781, 782, 786, 787, 797, 805, 823, 849, 893, 994, 1004, 1213], "limit": [15, 16, 59, 116, 117, 128, 171, 294, 326, 339, 340, 421, 427, 741, 773, 783, 849, 894, 895, 980, 1213], "represent": [15, 43, 44, 254, 294, 335, 368, 372, 375, 376, 378, 380, 382, 385, 388, 389, 392, 406, 407, 409, 649, 741, 769, 789, 849, 886, 887, 922, 926, 928, 929, 933, 935, 938, 940, 943, 946, 947, 950, 964, 965, 967, 1192, 1196, 1213], "look": [15, 183, 294, 327, 496, 505, 741, 778, 849, 876], "appli": [15, 25, 37, 40, 57, 63, 86, 128, 141, 144, 146, 175, 206, 220, 280, 294, 366, 367, 368, 372, 374, 375, 376, 378, 380, 382, 385, 388, 389, 392, 395, 406, 407, 409, 414, 415, 503, 505, 507, 543, 560, 562, 563, 565, 569, 612, 628, 629, 630, 634, 676, 677, 680, 681, 694, 704, 705, 706, 716, 731, 741, 783, 790, 791, 792, 800, 837, 849, 893, 920, 921, 922, 926, 928, 929, 933, 935, 938, 940, 943, 946, 947, 950, 953, 964, 965, 967, 973, 974, 1064, 1093, 1095, 1096, 1098, 1102, 1151, 1167, 1168, 1169, 1173, 1213], "float64": [15, 37, 40, 57, 106, 114, 144, 165, 167, 175, 235, 256, 269, 294, 310, 311, 312, 313, 314, 315, 333, 341, 342, 343, 357, 392, 416, 448, 450, 549, 581, 582, 647, 648, 692, 714, 717, 732, 741, 768, 806, 826, 849, 852, 950, 1195, 1200, 1213], "doe": [15, 37, 39, 57, 78, 86, 97, 103, 105, 106, 107, 109, 110, 114, 115, 116, 118, 119, 123, 124, 128, 129, 132, 134, 158, 169, 188, 201, 202, 231, 232, 233, 261, 269, 294, 408, 434, 496, 506, 554, 624, 625, 653, 737, 741, 761, 771, 786, 792, 821, 826, 849, 896, 966, 977, 987, 988, 1063, 1088, 1117, 1203, 1213], "cover": 15, "nativ": [15, 114, 116, 119, 120, 122, 126, 142, 200, 206, 232, 233, 252, 280, 294, 507, 706, 741, 747, 837, 1064, 1213, 1221], "level": [15, 40, 45, 59, 128, 131, 132, 133, 144, 175, 206, 217, 294, 422, 741, 783, 790, 849], "larg": [15, 16, 19, 39, 78, 116, 294], "maximum": [15, 31, 37, 57, 114, 115, 128, 134, 142, 143, 144, 146, 181, 183, 207, 208, 294, 462, 508, 532, 541, 550, 707, 708, 741, 778, 793, 849, 930, 1023, 1065, 1073, 1079, 1084, 1213], "import": [15, 21, 33, 36, 37, 39, 40, 41, 42, 45, 48, 78, 103, 104, 107, 108, 128, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 156, 161, 162, 164, 181, 183, 201, 203, 212, 219, 221, 253, 255, 256, 263, 265, 294, 357, 362, 363, 364, 365, 368, 370, 371, 372, 374, 375, 376, 380, 382, 383, 384, 387, 388, 389, 390, 391, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 561, 562, 563, 565, 568, 569, 570, 666, 667, 685, 686, 688, 690, 728, 729, 737, 741, 753, 759, 763, 765, 766, 767, 778, 787, 792, 796, 809, 849, 897, 899, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 928, 929, 930, 931, 932, 933, 935, 937, 938, 940, 941, 942, 943, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 998, 1003, 1007, 1008, 1013, 1094, 1120, 1187, 1213, 1221], "pi": [15, 357, 741, 897, 899, 1120, 1187, 1213], "e": [15, 36, 37, 39, 41, 42, 45, 57, 104, 113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 134, 161, 181, 189, 199, 248, 250, 255, 263, 294, 301, 308, 410, 416, 439, 498, 507, 512, 513, 515, 516, 517, 518, 519, 554, 578, 583, 624, 625, 692, 706, 731, 741, 765, 789, 803, 849, 852, 969, 970, 994, 1088, 1109, 1122, 1194, 1213, 1221], "const": 15, "15": [15, 40, 136, 143, 183, 193, 206, 230, 294, 355, 358, 372, 380, 384, 391, 405, 543, 559, 569, 601, 677, 728, 741, 778, 805, 849, 908, 911, 949, 963, 1140, 1213], "141592653589793": 15, "718281828459045": [15, 410, 498, 741, 969, 1059, 1213], "align": [15, 20, 21, 40, 78, 86, 294], "numer": [15, 21, 37, 40, 57, 156, 162, 203, 212, 221, 263, 294, 301, 338, 426, 439, 500, 522, 524, 544, 553, 578, 599, 637, 641, 651, 741, 753, 759, 766, 787, 796, 849, 852, 893, 910, 970, 994, 1011, 1109, 1116, 1138, 1176, 1194, 1213, 1221], "order": [15, 40, 57, 58, 59, 63, 65, 78, 84, 106, 116, 135, 137, 138, 155, 164, 172, 182, 183, 184, 185, 186, 187, 202, 219, 220, 221, 230, 234, 238, 244, 255, 259, 261, 265, 294, 318, 325, 335, 360, 361, 422, 469, 484, 491, 497, 550, 559, 563, 564, 565, 566, 568, 570, 573, 574, 575, 585, 586, 614, 624, 625, 626, 627, 640, 652, 653, 655, 668, 731, 741, 752, 757, 767, 774, 777, 778, 779, 780, 781, 782, 786, 796, 805, 810, 815, 820, 821, 849, 868, 875, 886, 888, 913, 914, 981, 1012, 1030, 1045, 1052, 1058, 1084, 1090, 1106, 1108, 1112, 1124, 1153, 1180, 1198, 1199, 1201, 1213, 1221], "cleanli": [15, 181, 294], "line": [15, 25, 40, 114, 115, 119, 128, 181, 195, 197, 294, 597, 1136], "up": [15, 40, 70, 114, 115, 117, 128, 200, 203, 232, 233, 252, 294, 308, 337, 507, 741, 786, 787, 792, 849, 852, 890, 1213], "xx": [15, 79, 81, 143, 146, 852], "yy": [15, 79, 81, 143, 146, 852], "11111111": 15, "44444444444": 15, "100000": [15, 32], "987654321": 15, "23456789": 15, "11": [15, 21, 45, 59, 104, 136, 144, 230, 294, 303, 383, 384, 387, 391, 405, 438, 540, 550, 559, 561, 569, 584, 658, 724, 729, 741, 762, 763, 783, 790, 801, 805, 818, 849, 852, 945, 949, 963, 1064, 1094, 1213], "111": 15, "100": [15, 22, 32, 40, 106, 109, 114, 115, 123, 128, 132, 240, 294, 554, 576, 600, 601, 631, 741, 811, 849, 1088, 1095, 1096, 1098, 1114, 1139, 1140, 1170, 1213, 1221], "988": 15, "44": [15, 213, 294, 359, 741, 797, 849], "444": 15, "23": [15, 136, 183, 230, 294, 364, 368, 372, 380, 388, 391, 407, 559, 562, 563, 565, 568, 569, 570, 687, 690, 727, 728, 729, 741, 778, 805, 849, 852, 918, 926, 1221], "789": [15, 852], "fmt": [16, 437, 695, 741, 784, 849], "floatfmt": 16, "mix": [16, 910, 1169, 1213], "how": [16, 39, 40, 78, 86, 106, 109, 117, 133, 164, 202, 221, 263, 264, 294, 335, 358, 390, 391, 405, 438, 466, 467, 468, 539, 553, 567, 600, 601, 628, 630, 687, 731, 741, 767, 786, 823, 849, 886, 911, 948, 949, 963, 1027, 1028, 1029, 1100, 1139, 1140, 1167, 1169, 1213], "full": [16, 48, 78, 83, 86, 114, 115, 118, 128, 129, 130, 134, 183, 184, 186, 187, 230, 294, 559, 628, 629, 630, 634, 741, 778, 779, 781, 782, 791, 792, 805, 849, 852, 1167, 1168, 1169, 1173, 1221], "scientif": 16, "notat": [16, 40, 294], "small": [16, 117, 143, 204, 294, 391, 771, 849, 1221], "2304980958725870923": 16, "1e6": 16, "1e": [16, 137, 138, 139, 140], "230498": 16, "0000e": 16, "230498095872587": 16, "1000000": [16, 403, 961], "00000001": [16, 658, 741], "plai": [17, 672], "sam": 17, "As": [17, 69, 87, 88, 103, 105, 106, 107, 109, 119, 123, 124, 132, 294, 496, 731, 849], "time": [17, 39, 48, 50, 63, 68, 83, 84, 85, 126, 128, 169, 183, 184, 186, 187, 203, 230, 265, 294, 332, 362, 363, 364, 365, 366, 370, 371, 387, 390, 391, 394, 396, 397, 405, 408, 464, 465, 496, 559, 562, 563, 564, 565, 566, 568, 569, 570, 579, 628, 630, 634, 649, 650, 671, 672, 685, 686, 687, 688, 689, 690, 696, 728, 729, 741, 762, 763, 778, 779, 781, 782, 787, 801, 805, 849, 852, 881, 916, 917, 918, 919, 924, 925, 945, 948, 949, 952, 954, 955, 963, 966, 977, 1025, 1027, 1028, 1118, 1167, 1169, 1173, 1196, 1197, 1213, 1221], "goe": 17, "By": [17, 19, 35, 78, 114, 115, 128, 183, 202, 203, 230, 240, 245, 264, 265, 266, 294, 387, 391, 405, 489, 559, 562, 563, 564, 565, 566, 568, 569, 570, 576, 588, 656, 673, 675, 685, 686, 688, 689, 690, 703, 722, 728, 729, 730, 741, 762, 778, 786, 787, 805, 811, 816, 824, 849, 945, 949, 963, 1050, 1114, 1126, 1194, 1202, 1213], "begin": [17, 40, 294, 413, 414, 415, 597, 741, 972, 973, 974, 1136, 1213], "beauti": 17, "friendship": 17, "len_byt": [17, 604, 605, 1143, 1144], "len": [17, 40, 142, 144, 201, 294, 345, 479, 507, 741, 1040, 1213], "u32": [17, 63, 116, 154, 156, 218, 271, 276, 285, 287, 294, 302, 309, 316, 317, 318, 319, 320, 344, 345, 458, 462, 463, 467, 478, 525, 537, 550, 554, 558, 562, 563, 565, 568, 569, 570, 574, 592, 603, 604, 649, 653, 659, 664, 668, 669, 674, 713, 741, 756, 759, 799, 829, 833, 842, 844, 849, 868, 869, 870, 882, 887, 990, 1039, 1084, 1092, 1131, 1142, 1143, 1196, 1199, 1201, 1213], "37": 17, "beaut": 17, "48": [17, 230, 294, 559, 741, 805, 849], "fmt_str_length": 17, "50": [17, 32, 40, 161, 169, 181, 294, 338, 391, 405, 741, 893, 910, 963, 1213], "element": [18, 19, 30, 143, 146, 155, 198, 221, 231, 245, 259, 266, 294, 308, 310, 311, 312, 313, 314, 315, 332, 336, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 360, 361, 417, 418, 422, 434, 444, 458, 466, 467, 469, 470, 471, 478, 479, 485, 486, 487, 488, 499, 500, 507, 539, 540, 550, 553, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 574, 580, 581, 582, 587, 588, 619, 620, 631, 647, 648, 650, 656, 673, 675, 718, 719, 722, 730, 741, 757, 815, 816, 820, 824, 849, 859, 860, 861, 862, 863, 864, 865, 881, 889, 892, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 913, 914, 975, 976, 981, 989, 1002, 1016, 1018, 1019, 1027, 1028, 1030, 1031, 1032, 1039, 1040, 1046, 1047, 1048, 1049, 1060, 1061, 1064, 1078, 1084, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1108, 1119, 1120, 1121, 1125, 1126, 1158, 1159, 1170, 1184, 1187, 1188, 1192, 1197, 1198, 1202, 1213], "empti": [18, 36, 37, 57, 94, 106, 114, 115, 119, 125, 128, 157, 158, 183, 196, 212, 294, 703, 720, 760, 761, 778, 796, 849, 852, 892, 896, 997, 1213], "alwai": [18, 37, 39, 57, 63, 114, 143, 182, 185, 206, 280, 294, 515, 628, 685, 731, 792, 849, 1064, 1167, 1213, 1220, 1221], "neg": [18, 49, 135, 183, 184, 186, 187, 189, 205, 230, 240, 241, 243, 248, 294, 489, 490, 543, 559, 576, 577, 584, 617, 741, 778, 779, 781, 782, 805, 811, 812, 814, 829, 849, 989, 1019, 1050, 1051, 1114, 1115, 1123, 1156, 1184, 1213], "result": [18, 37, 43, 44, 45, 57, 58, 59, 78, 86, 107, 109, 116, 117, 118, 119, 128, 131, 133, 134, 146, 169, 183, 186, 188, 202, 217, 221, 230, 233, 240, 241, 256, 265, 273, 294, 391, 394, 397, 405, 413, 414, 415, 419, 434, 455, 495, 496, 505, 507, 539, 547, 555, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 575, 576, 577, 618, 619, 630, 651, 676, 677, 680, 681, 685, 686, 687, 688, 689, 690, 705, 714, 717, 718, 719, 732, 741, 758, 778, 779, 781, 782, 786, 791, 792, 801, 805, 809, 811, 812, 830, 849, 858, 909, 949, 952, 955, 963, 972, 973, 974, 977, 988, 1017, 1056, 1064, 1082, 1089, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1112, 1114, 1115, 1157, 1158, 1169, 1194, 1213, 1220, 1221], "being": [18, 85, 114, 115, 116, 128, 134, 156, 168, 253, 263, 264, 294, 308, 355, 391, 562, 563, 564, 565, 566, 568, 569, 570, 691, 741, 759, 763, 770, 771, 849, 888, 908, 949, 990, 1082, 1213, 1221], "content": [18, 579, 741, 1118, 1213], "final": [18, 40, 78, 133, 294, 413, 414, 415, 741, 771, 849, 972, 973, 974, 1213], "item": [18, 86, 115, 181, 231, 234, 294, 358, 418, 465, 468, 474, 476, 484, 573, 620, 741, 911, 976, 1026, 1029, 1035, 1037, 1045, 1106, 1159, 1213], "num": [18, 40, 258, 294, 439, 741, 994, 1213], "fmt_table_cell_list_len": 18, "10": [18, 21, 22, 32, 36, 37, 39, 40, 41, 42, 45, 59, 63, 78, 86, 110, 117, 128, 136, 144, 146, 158, 169, 180, 181, 183, 189, 191, 193, 194, 199, 216, 220, 221, 222, 226, 228, 230, 236, 248, 269, 273, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 294, 303, 307, 316, 317, 318, 320, 338, 344, 346, 349, 358, 362, 364, 370, 383, 384, 390, 391, 405, 408, 434, 435, 438, 444, 454, 458, 459, 468, 475, 490, 493, 499, 515, 517, 526, 540, 543, 554, 559, 584, 632, 644, 658, 670, 676, 685, 688, 691, 694, 696, 698, 703, 705, 726, 729, 741, 762, 763, 778, 783, 785, 790, 800, 801, 805, 807, 817, 818, 826, 830, 833, 834, 836, 838, 839, 840, 841, 842, 843, 844, 849, 852, 893, 911, 916, 918, 924, 948, 963, 966, 969, 989, 1002, 1019, 1029, 1036, 1051, 1054, 1060, 1064, 1078, 1088, 1107, 1110, 1171, 1184, 1213, 1221], "size": [19, 45, 59, 114, 115, 116, 142, 143, 144, 146, 148, 167, 263, 294, 555, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 665, 700, 701, 718, 719, 741, 762, 849, 971, 1089, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1213, 1221], "overwrit": [19, 38, 39, 103, 105, 106, 107, 109, 114, 115, 123, 124, 128, 132, 152, 264, 294, 303, 741, 771, 849], "chunk": [19, 59, 112, 114, 115, 126, 128, 131, 132, 133, 144, 146, 169, 201, 216, 294, 307, 551, 741, 849, 858, 891, 977, 986, 1070, 1085, 1189, 1213], "stream": [19, 41, 42, 57, 58, 59, 84, 85, 122, 155, 182, 185, 202, 259, 261, 294, 757, 762, 763, 769, 771, 777, 780, 786, 791, 792, 796, 801, 813, 815, 820, 821, 849], "engin": [19, 38, 116, 117, 119, 148, 182, 185, 202, 206, 261, 280, 294, 777, 780, 786, 791, 792, 796, 821, 837, 849, 1064, 1213], "determin": [19, 37, 40, 57, 76, 78, 86, 106, 109, 114, 115, 116, 119, 125, 126, 128, 133, 135, 153, 162, 175, 183, 186, 200, 201, 206, 221, 230, 260, 265, 294, 335, 374, 390, 391, 405, 496, 506, 515, 547, 553, 554, 562, 563, 564, 565, 566, 568, 569, 570, 583, 600, 601, 628, 630, 631, 687, 714, 717, 732, 741, 778, 781, 805, 849, 886, 928, 948, 949, 963, 990, 1057, 1063, 1082, 1088, 1122, 1139, 1140, 1167, 1169, 1170, 1213], "schema": [19, 33, 36, 38, 39, 63, 79, 80, 81, 86, 98, 99, 101, 103, 105, 106, 107, 109, 114, 115, 116, 117, 121, 123, 124, 127, 128, 132, 133, 142, 144, 153, 157, 158, 165, 167, 201, 206, 213, 217, 255, 294, 321, 322, 323, 324, 325, 495, 496, 515, 600, 601, 658, 723, 741, 760, 761, 768, 791, 792, 797, 809, 832, 837, 849, 852, 873, 896, 1139, 1140, 1213], "thread": [19, 37, 57, 85, 112, 114, 115, 117, 148, 294, 308, 470, 507, 741, 763, 849, 1031], "pool": [19, 85, 148, 763, 849], "For": [19, 39, 40, 114, 115, 117, 118, 119, 128, 129, 130, 164, 169, 202, 203, 230, 280, 294, 413, 414, 415, 496, 507, 516, 552, 583, 590, 597, 598, 599, 612, 676, 680, 690, 694, 695, 737, 741, 767, 787, 805, 837, 849, 972, 973, 974, 977, 1004, 1086, 1122, 1129, 1136, 1137, 1138, 1151, 1194, 1213], "some": [19, 35, 39, 40, 69, 88, 106, 114, 115, 116, 119, 128, 152, 164, 294, 737, 767, 849, 1002, 1213, 1221], "dataset": [19, 45, 114, 115, 126, 128, 134, 202, 294, 455, 741, 753, 786, 791, 792, 849, 1017, 1213], "esp": 19, "have": [19, 35, 39, 40, 48, 69, 78, 88, 104, 113, 114, 115, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 144, 146, 169, 200, 224, 230, 232, 233, 252, 294, 355, 413, 414, 415, 507, 516, 550, 559, 599, 741, 765, 796, 805, 813, 829, 849, 852, 908, 972, 973, 974, 977, 987, 1084, 1169, 1213, 1221], "too": [19, 558, 741, 771, 849], "optimist": 19, "lead": [19, 45, 110, 134, 183, 184, 186, 187, 210, 230, 240, 247, 294, 429, 432, 489, 505, 507, 559, 575, 576, 607, 622, 623, 625, 645, 673, 741, 778, 779, 781, 782, 791, 792, 805, 811, 832, 837, 849, 1050, 1064, 1112, 1114, 1146, 1161, 1162, 1164, 1213], "memori": [19, 59, 86, 103, 104, 107, 108, 109, 114, 115, 116, 119, 120, 126, 128, 131, 132, 133, 152, 169, 206, 233, 242, 280, 294, 539, 551, 578, 741, 762, 849, 977, 1064, 1085, 1116, 1117, 1213], "error": [19, 39, 85, 114, 115, 128, 156, 221, 231, 294, 303, 328, 333, 454, 473, 476, 494, 526, 590, 593, 597, 599, 600, 602, 628, 629, 630, 634, 741, 759, 763, 832, 837, 849, 877, 882, 1034, 1037, 1055, 1129, 1132, 1136, 1138, 1139, 1141, 1167, 1168, 1169, 1173, 1213], "row": [19, 25, 30, 37, 38, 40, 43, 45, 57, 59, 78, 79, 81, 86, 95, 97, 102, 106, 107, 109, 110, 114, 115, 116, 119, 120, 122, 123, 126, 128, 131, 132, 133, 134, 137, 138, 142, 144, 153, 155, 157, 164, 169, 172, 175, 177, 181, 182, 183, 185, 188, 189, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 212, 217, 233, 234, 243, 248, 249, 252, 254, 259, 261, 263, 264, 271, 278, 280, 288, 294, 319, 418, 430, 435, 459, 471, 496, 539, 540, 555, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 584, 586, 596, 600, 601, 644, 646, 665, 668, 680, 681, 694, 698, 700, 701, 716, 718, 719, 726, 731, 741, 757, 760, 762, 767, 771, 774, 775, 776, 778, 783, 786, 787, 788, 790, 792, 796, 814, 818, 819, 820, 821, 823, 829, 835, 837, 845, 849, 976, 977, 985, 989, 1032, 1078, 1089, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1123, 1135, 1139, 1140, 1184, 1186, 1213, 1221], "per": [19, 37, 40, 57, 142, 144, 155, 181, 217, 218, 237, 244, 259, 270, 283, 285, 286, 294, 308, 470, 473, 474, 494, 507, 586, 655, 668, 741, 757, 808, 815, 820, 827, 840, 842, 843, 849, 1031, 1034, 1035, 1055, 1201, 1213], "everi": [19, 37, 57, 114, 115, 128, 177, 183, 186, 249, 252, 265, 294, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 391, 405, 418, 430, 462, 463, 468, 471, 474, 475, 485, 490, 493, 596, 646, 676, 677, 680, 681, 741, 771, 776, 778, 781, 819, 849, 900, 901, 902, 903, 904, 905, 906, 907, 908, 949, 963, 976, 985, 987, 1023, 1024, 1029, 1032, 1035, 1036, 1046, 1051, 1054, 1135, 1186, 1213], "process": [19, 37, 57, 58, 59, 114, 115, 116, 128, 148, 294, 762, 849], "liter": [20, 21, 25, 39, 63, 85, 116, 119, 125, 144, 145, 146, 147, 181, 200, 207, 209, 214, 216, 219, 231, 232, 236, 237, 240, 246, 251, 264, 269, 270, 294, 303, 327, 338, 364, 411, 412, 419, 426, 431, 433, 439, 457, 502, 506, 522, 524, 534, 535, 544, 554, 590, 592, 612, 613, 641, 651, 660, 662, 665, 669, 670, 671, 672, 679, 683, 684, 685, 686, 687, 688, 689, 700, 701, 703, 708, 712, 714, 717, 720, 723, 725, 727, 728, 729, 732, 741, 763, 773, 807, 808, 811, 823, 826, 827, 849, 852, 856, 857, 876, 893, 909, 918, 978, 994, 1082, 1107, 1110, 1114, 1129, 1131, 1151, 1152, 1213, 1220], "left": [20, 21, 40, 65, 78, 137, 138, 139, 140, 183, 184, 186, 187, 202, 203, 230, 264, 294, 356, 413, 414, 415, 438, 439, 547, 559, 562, 563, 564, 565, 566, 568, 569, 570, 574, 606, 649, 670, 676, 677, 680, 681, 685, 686, 688, 689, 694, 716, 728, 729, 731, 741, 778, 779, 781, 782, 786, 787, 805, 823, 849, 909, 972, 973, 974, 994, 1082, 1108, 1145, 1196, 1213], "center": [20, 21, 40, 294, 413, 414, 415, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 741, 972, 973, 974, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1213], "cell": [20, 21, 40, 294], "valueerror": [20, 25], "recognis": [20, 21, 25, 141], "column_abc": 20, "column_xyz": 20, "keyerror": 21, "datetim": [21, 37, 39, 40, 57, 78, 110, 119, 144, 156, 161, 181, 183, 184, 186, 187, 201, 203, 230, 265, 294, 362, 363, 364, 365, 366, 368, 370, 371, 372, 374, 375, 376, 378, 380, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 465, 559, 562, 563, 564, 565, 566, 568, 569, 570, 628, 630, 649, 685, 686, 688, 689, 690, 696, 703, 728, 729, 741, 759, 778, 779, 781, 782, 787, 805, 849, 852, 915, 916, 917, 918, 919, 920, 922, 924, 925, 926, 928, 929, 930, 931, 932, 933, 935, 937, 938, 940, 941, 942, 943, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 1013, 1026, 1027, 1028, 1073, 1074, 1107, 1111, 1167, 1169, 1196, 1213], "date": [21, 40, 48, 78, 114, 115, 117, 119, 125, 128, 134, 144, 156, 161, 181, 183, 184, 186, 187, 201, 203, 230, 294, 363, 364, 365, 368, 371, 374, 375, 376, 382, 383, 384, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 465, 559, 562, 563, 564, 565, 566, 568, 569, 570, 628, 629, 649, 685, 686, 688, 689, 696, 703, 727, 741, 759, 778, 779, 781, 782, 787, 805, 849, 852, 917, 918, 919, 922, 925, 926, 928, 929, 930, 931, 932, 933, 937, 938, 940, 941, 942, 943, 945, 946, 947, 948, 949, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 1013, 1026, 1027, 1028, 1073, 1074, 1107, 1111, 1167, 1168, 1196, 1213], "333": [21, 572, 741, 1105, 1213], "mno": [21, 25], "2023": [21, 40, 110, 136, 201, 294, 364, 690, 703, 852, 918], "29": [21, 144, 362, 383, 916, 941], "2001": [21, 363, 368, 371, 372, 374, 380, 382, 387, 388, 389, 391, 396, 405, 406, 407, 408, 562, 563, 565, 568, 569, 570, 628, 741, 852, 917, 922, 925, 926, 928, 930, 931, 932, 933, 935, 937, 938, 940, 943, 945, 946, 947, 949, 954, 963, 964, 965, 966, 967, 1167], "null": [21, 37, 39, 57, 65, 78, 86, 106, 114, 115, 124, 128, 134, 152, 155, 157, 161, 164, 166, 171, 175, 176, 194, 202, 209, 210, 211, 218, 221, 223, 240, 241, 244, 245, 246, 247, 251, 256, 259, 262, 264, 266, 269, 276, 294, 304, 306, 307, 308, 318, 326, 328, 338, 344, 346, 349, 358, 360, 361, 387, 398, 399, 400, 401, 402, 403, 404, 412, 413, 414, 415, 416, 419, 420, 421, 427, 438, 448, 450, 451, 452, 458, 460, 461, 468, 469, 472, 473, 474, 477, 478, 485, 486, 487, 488, 489, 494, 496, 507, 535, 536, 537, 540, 551, 554, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 576, 577, 578, 580, 585, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 602, 603, 604, 609, 610, 611, 617, 619, 620, 621, 632, 637, 638, 639, 640, 649, 659, 660, 661, 662, 670, 671, 672, 674, 679, 692, 703, 708, 712, 718, 719, 723, 725, 731, 741, 757, 760, 767, 773, 785, 786, 799, 809, 811, 812, 815, 820, 822, 823, 826, 828, 833, 849, 856, 857, 859, 868, 877, 892, 893, 911, 913, 914, 956, 957, 958, 959, 960, 961, 962, 970, 972, 973, 974, 978, 980, 987, 993, 1009, 1010, 1018, 1021, 1022, 1029, 1030, 1034, 1039, 1047, 1049, 1050, 1055, 1057, 1064, 1077, 1078, 1088, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1109, 1114, 1115, 1119, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1139, 1141, 1142, 1143, 1148, 1149, 1150, 1156, 1158, 1159, 1160, 1171, 1176, 1192, 1194, 1195, 1196, 1203, 1213, 1220, 1221], "07": [21, 364, 390, 391, 405, 628, 685, 688, 696, 852, 918, 948, 1167], "05": [21, 134, 137, 138, 139, 140, 144, 156, 203, 265, 294, 364, 365, 390, 392, 394, 397, 398, 685, 688, 759, 787, 849, 852, 918, 919, 920, 921, 948, 949, 952, 953, 955, 956, 963], "visibl": [22, 167, 294, 971, 1213], "eg": [22, 30, 40, 86, 117, 150, 294, 391, 628, 630, 651, 741, 987, 1167, 1169, 1213], "low": [22, 116, 148, 547, 741, 1082, 1213], "rang": [22, 40, 116, 117, 161, 167, 183, 201, 294, 357, 368, 382, 388, 389, 391, 405, 406, 438, 665, 671, 684, 685, 686, 687, 688, 689, 700, 701, 727, 728, 729, 741, 778, 849, 910, 922, 940, 946, 947, 949, 963, 964, 971, 1078, 1213], "98": [22, 193, 294, 332, 429, 432, 585, 631, 650, 741, 1170], "99": [22, 40, 170, 171, 193, 196, 264, 294, 302, 332, 419, 421, 429, 432, 585, 650, 731, 741, 772, 773, 823, 849, 969, 978, 1213], "tbl_col": 22, "95": [22, 302, 741], "96": [22, 302, 741], "97": [22, 193, 294, 302, 741], "move": [23, 233, 294, 413, 414, 415, 562, 563, 565, 569, 741, 972, 973, 974, 1095, 1096, 1098, 1102, 1213], "inlin": [23, 233, 294, 590, 597, 598, 612, 1129, 1136, 1137, 1151], "parenthes": 23, "inform": [24, 28, 38, 39, 83, 118, 129, 130, 133, 137, 139, 160, 294, 455, 583, 590, 597, 598, 612, 741, 801, 849, 887, 1017, 1122, 1129, 1136, 1137, 1151, 1213], "below": [24, 39, 118, 129, 130, 164, 183, 221, 294, 421, 685, 686, 688, 689, 728, 729, 731, 737, 741, 767, 778, 849], "ascii_ful": 25, "ascii_full_condens": 25, "ascii_no_bord": 25, "ascii_borders_onli": 25, "ascii_borders_only_condens": 25, "ascii_horizontal_onli": 25, "ascii_markdown": 25, "utf8_ful": [25, 78, 110], "utf8_no_bord": 25, "utf8_borders_onli": 25, "utf8_horizontal_onli": 25, "noth": [25, 597, 602, 1136, 1141], "rounded_corn": 25, "border": 25, "includ": [25, 35, 37, 39, 40, 57, 83, 116, 118, 129, 130, 144, 155, 161, 167, 219, 233, 259, 260, 263, 264, 294, 356, 392, 439, 547, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 618, 619, 623, 624, 676, 680, 718, 719, 741, 757, 820, 823, 849, 852, 909, 910, 950, 971, 994, 1082, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1157, 1158, 1162, 1203, 1213], "divid": [25, 356, 391, 405, 413, 414, 415, 455, 547, 741, 909, 949, 963, 972, 973, 974, 1017, 1082, 1213], "same": [25, 39, 40, 67, 69, 78, 84, 85, 86, 87, 88, 120, 128, 137, 138, 139, 140, 142, 150, 182, 206, 221, 233, 244, 261, 269, 270, 273, 280, 294, 300, 307, 324, 360, 361, 429, 432, 495, 511, 514, 539, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 586, 603, 640, 741, 762, 763, 777, 791, 792, 815, 821, 826, 827, 830, 849, 854, 859, 874, 909, 913, 914, 918, 1056, 1064, 1082, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1142, 1204, 1213], "dens": [25, 181, 294, 550, 741, 1084, 1213], "space": [25, 183, 294, 778, 849], "horizont": [25, 86, 175, 191, 207, 208, 209, 210, 214, 215, 246, 247, 263, 294, 660, 662, 671, 672, 676, 677, 679, 680, 681, 683, 691, 694, 708, 712, 716, 725], "markdown": 25, "compat": [25, 40, 45, 59, 294, 590, 591, 592, 597, 598, 599, 612, 613, 849, 852, 1129, 1130, 1131, 1136, 1137, 1138, 1151, 1152], "No": [25, 635, 1174], "round": [25, 40, 80, 110, 116, 294, 337, 343, 425, 572, 647, 741, 890, 983, 1105, 1213], "corner": [25, 40, 110, 294], "op": [25, 146, 294, 553, 741, 849, 1169, 1213], "one": [25, 37, 38, 40, 57, 68, 78, 95, 103, 105, 106, 107, 108, 109, 114, 115, 119, 123, 124, 125, 128, 145, 146, 147, 150, 171, 172, 181, 182, 183, 184, 186, 187, 200, 212, 221, 230, 231, 232, 238, 240, 255, 258, 274, 294, 302, 356, 421, 429, 432, 489, 496, 500, 559, 576, 585, 598, 706, 721, 731, 737, 741, 773, 774, 777, 778, 779, 781, 782, 796, 805, 810, 811, 828, 831, 849, 858, 909, 980, 1013, 1050, 1057, 1061, 1082, 1114, 1137, 1177, 1213], "more": [25, 40, 43, 45, 59, 68, 78, 86, 87, 88, 102, 103, 104, 105, 106, 107, 108, 109, 116, 117, 118, 119, 123, 124, 125, 126, 129, 130, 137, 139, 144, 146, 150, 160, 161, 199, 200, 204, 206, 212, 217, 231, 232, 234, 255, 261, 280, 294, 305, 308, 325, 455, 484, 497, 500, 505, 507, 538, 573, 583, 598, 603, 628, 629, 630, 652, 721, 731, 741, 796, 821, 849, 852, 859, 875, 887, 910, 1013, 1017, 1045, 1058, 1064, 1106, 1122, 1137, 1142, 1167, 1168, 1169, 1198, 1213, 1221], "semigraph": 25, "box": [25, 206, 294], "draw": [25, 30, 143, 1221], "found": [25, 37, 40, 57, 65, 90, 99, 101, 106, 110, 165, 294, 574, 602, 626, 627, 628, 630, 741, 849, 1108, 1141, 1165, 1166, 1167, 1169, 1213, 1220], "unicod": 25, "block": [25, 85, 182, 185, 261, 294, 731, 763, 777, 780, 803, 821, 829, 837, 849, 1107, 1110, 1213], "http": [25, 40, 41, 42, 104, 116, 117, 152, 160, 294, 597, 599, 1136, 1138], "en": [25, 40, 294], "wikipedia": 25, "org": [25, 41, 42, 104, 116, 117, 152, 160, 294], "wiki": 25, "drawing_charact": 25, "box_draw": 25, "tbl_format": 25, "tbl_hide_column_data_typ": 25, "tbl_hide_dataframe_shap": 25, "hide": [26, 27, 28, 29, 40, 294], "etc": [26, 39, 40, 114, 118, 120, 122, 126, 129, 130, 131, 294, 741, 852, 1107, 1110, 1213], "between": [29, 86, 141, 142, 144, 146, 160, 223, 286, 294, 333, 358, 359, 439, 468, 476, 485, 486, 487, 488, 540, 547, 548, 566, 589, 666, 667, 673, 675, 715, 718, 719, 741, 802, 843, 849, 882, 887, 911, 912, 994, 1029, 1037, 1046, 1047, 1048, 1049, 1078, 1082, 1083, 1099, 1128, 1213], "set_tbl_column_data_type_inlin": 29, "max": [30, 40, 45, 59, 63, 148, 161, 171, 182, 208, 221, 230, 294, 339, 346, 351, 421, 496, 539, 550, 559, 562, 575, 620, 708, 721, 741, 773, 777, 805, 849, 894, 900, 904, 910, 980, 1057, 1084, 1095, 1112, 1159, 1213], "tbl_row": 30, "also": [32, 37, 40, 57, 68, 69, 106, 116, 119, 125, 128, 142, 143, 144, 145, 146, 150, 165, 182, 183, 184, 186, 187, 213, 217, 230, 232, 236, 244, 264, 269, 294, 346, 349, 387, 390, 439, 507, 550, 562, 563, 564, 565, 566, 568, 569, 570, 586, 623, 624, 676, 677, 680, 681, 685, 694, 696, 716, 731, 740, 741, 747, 777, 778, 779, 781, 782, 797, 805, 807, 815, 823, 826, 828, 849, 852, 948, 994, 1084, 1130, 1131, 1162, 1213], "char": [32, 598, 1137], "omit": [32, 106, 110, 142, 144, 146, 150, 217, 233, 294, 728, 729, 852], "set_decimal_separ": 32, "x": [32, 65, 66, 78, 86, 104, 110, 114, 115, 117, 128, 142, 144, 152, 167, 191, 195, 197, 202, 212, 221, 232, 233, 263, 294, 301, 303, 305, 357, 411, 412, 426, 431, 433, 434, 457, 464, 476, 500, 502, 504, 505, 507, 522, 524, 527, 528, 529, 530, 531, 534, 535, 538, 544, 545, 553, 558, 580, 583, 619, 641, 642, 649, 651, 658, 660, 662, 666, 667, 676, 677, 679, 694, 703, 705, 708, 712, 716, 725, 731, 741, 786, 792, 796, 814, 849, 852, 887, 980, 1015, 1064, 1119, 1122, 1158, 1196, 1213, 1220], "1234567": 32, "987654": [32, 852], "10101": 32, "y": [32, 78, 86, 104, 110, 142, 144, 152, 167, 195, 197, 202, 212, 221, 232, 233, 263, 294, 301, 303, 305, 394, 397, 411, 412, 431, 433, 457, 464, 476, 502, 504, 507, 527, 528, 529, 530, 531, 534, 535, 538, 545, 553, 558, 628, 629, 630, 642, 651, 658, 660, 662, 666, 667, 679, 690, 703, 708, 712, 725, 741, 786, 796, 814, 849, 852, 887, 952, 955, 1167, 1168, 1169], "1234": [32, 572, 741, 1105, 1213], "7654321": 32, "234": 32, "567": 32, "987": 32, "654": 32, "00": [32, 40, 144, 183, 203, 265, 294, 362, 363, 365, 370, 372, 376, 380, 383, 384, 387, 390, 391, 392, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 562, 563, 565, 568, 569, 570, 628, 630, 634, 688, 690, 728, 729, 741, 778, 787, 849, 852, 916, 917, 919, 920, 921, 924, 925, 926, 932, 933, 938, 941, 942, 943, 945, 948, 949, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 966, 1167, 1169, 1173], "321": [32, 1221], "strip": [33, 607, 616, 623, 624, 625, 626, 627, 1146, 1155, 1162, 1163, 1164], "trail": [33, 181, 294, 616, 622, 623, 624, 1155, 1161, 1162, 1163], "zero": [33, 40, 103, 104, 113, 114, 115, 120, 122, 126, 143, 152, 171, 200, 231, 250, 255, 256, 294, 421, 496, 500, 574, 583, 637, 651, 741, 760, 773, 849, 892, 980, 1057, 1122, 1176, 1189, 1194, 1195, 1213], "enabl": [33, 34, 69, 87, 88, 137, 138, 139, 140, 149, 236, 269, 294, 304, 306, 575, 655, 737, 741, 762, 807, 826, 849, 856, 857, 1112, 1201, 1213], "d": [33, 36, 37, 39, 40, 41, 42, 45, 106, 134, 161, 181, 183, 188, 189, 193, 202, 248, 250, 263, 267, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 294, 301, 303, 371, 394, 397, 439, 543, 578, 592, 598, 619, 628, 629, 630, 670, 690, 696, 741, 778, 786, 833, 834, 836, 838, 839, 840, 841, 842, 843, 844, 849, 887, 925, 952, 955, 994, 1131, 1137, 1158, 1167, 1168, 1169, 1213], "01": [33, 78, 144, 156, 161, 181, 183, 230, 265, 294, 362, 363, 364, 365, 371, 372, 375, 376, 380, 382, 383, 384, 387, 389, 390, 391, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 559, 562, 563, 565, 568, 569, 570, 628, 629, 630, 634, 685, 686, 688, 690, 741, 759, 778, 805, 849, 852, 917, 918, 919, 920, 921, 925, 926, 932, 933, 938, 941, 942, 943, 945, 948, 949, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 966, 1167, 1168, 1169, 1173], "6789": 33, "scale": [33, 49, 167, 294, 507, 543, 631, 741, 971, 1170, 1213], "trim_decimal_zero": 33, "01000": 33, "67890": 33, "addit": [34, 39, 40, 106, 118, 119, 129, 130, 142, 162, 164, 168, 182, 185, 219, 236, 237, 238, 244, 262, 269, 270, 273, 294, 301, 370, 416, 419, 539, 586, 590, 597, 598, 612, 668, 670, 671, 672, 692, 720, 723, 741, 766, 770, 777, 780, 807, 808, 810, 815, 822, 826, 827, 830, 849, 916, 924, 978, 1129, 1136, 1137, 1151, 1213], "verbos": [34, 137, 139, 150, 598, 1137], "debug": [34, 762, 771, 791, 792, 849, 1221], "log": [34, 80, 332, 410, 500, 524, 544, 650, 741, 881, 969, 1197, 1213], "do_polars_oper": 34, "if_set": 35, "env_onli": 35, "dict": [35, 39, 40, 45, 66, 79, 81, 83, 103, 105, 106, 107, 108, 109, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 174, 200, 219, 225, 231, 232, 233, 235, 251, 252, 260, 294, 506, 554, 558, 741, 803, 806, 849, 1063, 1088, 1213], "show": [35, 40, 67, 164, 181, 204, 218, 294, 767, 801, 813, 849], "variabl": [35, 60, 65, 133, 145, 148, 212, 253, 294, 796, 849, 1190, 1213, 1220], "chang": [35, 78, 85, 114, 115, 116, 134, 263, 264, 265, 294, 308, 355, 356, 358, 391, 506, 507, 540, 547, 562, 563, 564, 565, 566, 568, 569, 570, 741, 763, 849, 887, 888, 908, 909, 949, 990, 1063, 1078, 1082, 1117, 1213], "restrict": [35, 620, 1159], "dictionari": [35, 40, 103, 105, 106, 107, 109, 114, 115, 116, 117, 121, 123, 124, 127, 128, 132, 200, 219, 231, 232, 233, 251, 252, 294, 506, 741, 849, 1063, 1213], "those": [35, 40, 114, 119, 233, 264, 294, 550, 597, 706, 741, 823, 849, 852, 1084, 1136, 1213], "been": [35, 40, 152, 153, 173, 176, 184, 185, 186, 187, 192, 227, 249, 275, 294, 308, 350, 351, 352, 353, 354, 442, 446, 449, 454, 466, 479, 494, 503, 504, 506, 507, 545, 550, 560, 562, 563, 564, 565, 566, 568, 569, 570, 591, 601, 605, 606, 607, 608, 611, 615, 616, 622, 642, 645, 646, 663, 682, 683, 704, 741, 779, 780, 781, 782, 791, 819, 832, 849, 859, 904, 905, 906, 907, 999, 1005, 1027, 1040, 1055, 1063, 1084, 1093, 1109, 1111, 1130, 1140, 1144, 1145, 1146, 1147, 1150, 1154, 1155, 1161, 1185, 1186, 1213], "set_fmt_float": 35, "via": [35, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 127, 128, 131, 132, 133, 200, 232, 294, 308, 507, 599, 741, 765, 849, 1138], "set_stat": 35, "all_stat": 35, "binaryio": [36, 41, 42, 113, 114, 119, 120, 121, 122, 125, 126, 127, 294], "bytesio": [36, 37, 40, 41, 42, 45, 113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 294, 765, 849], "compress": [36, 41, 42, 45, 58, 59, 294, 849], "avrocompress": [36, 294], "uncompress": [36, 41, 42, 45, 59, 120, 131, 294, 849], "write": [36, 37, 38, 39, 40, 41, 42, 43, 45, 57, 58, 59, 115, 120, 150, 294, 338, 520, 741, 789, 813, 849, 893, 1213], "apach": [36, 41, 42, 45, 113, 116, 117, 130, 294, 753], "avro": [36, 113, 294, 753], "writeabl": [36, 37, 41, 42, 43, 44, 45, 294], "like": [36, 37, 39, 41, 42, 43, 44, 45, 85, 104, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 183, 195, 197, 202, 255, 294, 344, 362, 458, 470, 478, 519, 550, 597, 624, 625, 655, 737, 741, 763, 765, 778, 849, 916, 1018, 1031, 1039, 1084, 1136, 1201, 1213], "object": [36, 37, 39, 40, 41, 42, 43, 44, 45, 68, 86, 104, 105, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 142, 144, 146, 152, 182, 183, 185, 186, 203, 204, 230, 233, 255, 256, 294, 685, 686, 688, 689, 703, 728, 729, 753, 765, 778, 779, 781, 782, 787, 805, 849, 852, 883, 915, 1020, 1127, 1179, 1189, 1213], "snappi": [36, 45, 59, 294, 849], "deflat": [36, 294], "pathlib": [36, 37, 41, 42, 45, 128, 294], "foo": [36, 37, 39, 41, 42, 43, 44, 45, 67, 156, 159, 160, 162, 163, 164, 165, 166, 169, 172, 175, 178, 179, 180, 188, 189, 190, 191, 193, 194, 196, 202, 206, 207, 208, 209, 210, 211, 214, 215, 218, 221, 223, 225, 226, 228, 231, 234, 235, 236, 239, 243, 245, 246, 247, 248, 250, 252, 253, 254, 255, 256, 257, 260, 261, 262, 266, 267, 268, 272, 294, 334, 356, 387, 430, 435, 437, 459, 511, 514, 515, 516, 517, 518, 519, 547, 555, 589, 592, 594, 596, 598, 599, 614, 618, 620, 623, 624, 625, 626, 627, 633, 636, 644, 664, 673, 674, 675, 693, 697, 698, 702, 707, 709, 710, 711, 713, 715, 720, 722, 726, 730, 731, 737, 741, 759, 764, 766, 767, 768, 774, 784, 785, 786, 799, 803, 806, 807, 821, 822, 825, 828, 849, 852, 884, 909, 945, 1037, 1082, 1089, 1131, 1133, 1135, 1137, 1138, 1153, 1159, 1165, 1166, 1172, 1175, 1213], "bar": [36, 37, 39, 41, 42, 43, 44, 45, 67, 156, 159, 160, 162, 163, 164, 165, 166, 169, 172, 175, 178, 179, 180, 189, 191, 193, 194, 196, 202, 206, 207, 208, 209, 210, 211, 214, 215, 218, 221, 223, 225, 226, 228, 231, 234, 235, 236, 243, 245, 246, 247, 248, 250, 252, 253, 254, 255, 256, 257, 261, 262, 266, 267, 272, 294, 334, 437, 511, 512, 513, 514, 515, 516, 517, 518, 519, 583, 592, 594, 596, 598, 599, 614, 618, 620, 626, 627, 664, 673, 674, 675, 693, 698, 702, 707, 709, 710, 711, 713, 720, 722, 726, 730, 731, 737, 741, 759, 764, 766, 767, 768, 774, 784, 785, 786, 799, 803, 806, 807, 821, 822, 825, 849, 852, 884, 1037, 1122, 1131, 1133, 1135, 1137, 1138, 1153, 1159, 1165, 1166, 1213], "ham": [36, 37, 39, 41, 42, 45, 156, 159, 160, 162, 163, 164, 165, 166, 172, 179, 188, 189, 191, 202, 207, 209, 211, 214, 218, 223, 225, 228, 231, 234, 235, 236, 243, 245, 246, 248, 253, 254, 255, 256, 257, 261, 266, 267, 294, 334, 518, 759, 764, 766, 767, 768, 774, 786, 799, 803, 806, 807, 821, 828, 849, 884], "dirpath": [36, 37, 41, 42, 45, 128, 294], "new_fil": [36, 37, 41, 42, 45, 294], "include_bom": [37, 57, 294, 849], "include_head": [37, 40, 57, 115, 260, 294, 849], "line_termin": [37, 57, 294, 849], "quote_char": [37, 57, 114, 115, 128, 294, 849], "batch_siz": [37, 57, 114, 115, 116, 132, 134, 294, 849], "1024": [37, 45, 57, 59, 114, 115, 116, 132, 294, 849], "datetime_format": [37, 57, 294, 849], "date_format": [37, 57, 294, 849], "time_format": [37, 57, 294, 849], "null_valu": [37, 57, 114, 115, 128, 294, 849], "quote_styl": [37, 57, 294, 849], "csvquotestyl": [37, 57, 294, 849], "textiowrapp": [37, 294], "comma": [37, 294], "csv": [37, 57, 58, 59, 114, 115, 119, 128, 294, 753, 849], "If": [37, 38, 39, 40, 41, 42, 43, 44, 45, 57, 59, 63, 69, 83, 85, 86, 103, 104, 105, 106, 107, 108, 109, 114, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 137, 138, 139, 140, 145, 152, 153, 155, 164, 169, 181, 183, 184, 186, 187, 189, 198, 199, 200, 203, 205, 206, 210, 217, 221, 230, 232, 233, 234, 240, 243, 247, 248, 252, 253, 255, 259, 260, 261, 263, 264, 294, 304, 306, 308, 364, 383, 384, 422, 455, 484, 489, 490, 496, 505, 507, 518, 539, 547, 550, 552, 555, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 574, 576, 579, 583, 584, 589, 598, 599, 600, 601, 607, 616, 617, 618, 619, 620, 622, 623, 624, 625, 628, 629, 630, 634, 637, 655, 659, 661, 663, 665, 669, 673, 674, 676, 685, 686, 688, 689, 690, 693, 694, 700, 701, 702, 703, 706, 714, 717, 718, 719, 723, 728, 729, 731, 732, 741, 757, 762, 763, 767, 769, 778, 779, 781, 782, 786, 787, 792, 796, 803, 805, 809, 811, 814, 820, 821, 823, 832, 837, 849, 852, 856, 857, 859, 893, 909, 918, 941, 942, 977, 987, 989, 990, 1016, 1017, 1019, 1045, 1050, 1051, 1057, 1064, 1082, 1084, 1086, 1089, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1106, 1108, 1112, 1114, 1118, 1122, 1123, 1128, 1137, 1138, 1139, 1140, 1146, 1155, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1167, 1168, 1169, 1173, 1176, 1184, 1189, 1194, 1201, 1203, 1213, 1220], "instead": [37, 43, 44, 63, 67, 78, 85, 86, 114, 115, 116, 119, 125, 126, 128, 134, 144, 181, 183, 199, 200, 206, 217, 219, 231, 232, 233, 236, 237, 240, 241, 256, 269, 270, 294, 318, 339, 340, 356, 369, 373, 377, 379, 381, 386, 390, 393, 405, 416, 489, 505, 547, 576, 577, 603, 604, 607, 616, 622, 623, 624, 625, 626, 627, 628, 630, 637, 665, 669, 674, 685, 686, 687, 688, 689, 690, 693, 700, 701, 702, 714, 717, 723, 728, 729, 732, 741, 763, 772, 778, 807, 808, 809, 811, 812, 823, 826, 827, 849, 852, 868, 894, 895, 909, 923, 927, 934, 936, 939, 944, 948, 951, 963, 995, 1001, 1004, 1011, 1013, 1015, 1050, 1082, 1107, 1110, 1114, 1115, 1142, 1143, 1146, 1155, 1161, 1162, 1163, 1164, 1167, 1169, 1176, 1195, 1213, 1220], "whether": [37, 57, 107, 109, 146, 149, 155, 166, 176, 199, 238, 259, 294, 304, 306, 374, 392, 460, 461, 512, 513, 575, 741, 757, 791, 792, 810, 815, 820, 849, 852, 856, 857, 885, 888, 928, 950, 970, 1021, 1022, 1109, 1213, 1220], "utf": [37, 57, 77, 294, 849], "bom": [37, 57, 294, 849], "header": [37, 40, 45, 57, 59, 110, 114, 115, 119, 128, 165, 221, 260, 294, 849], "field": [37, 39, 57, 70, 99, 101, 106, 255, 262, 294, 496, 554, 557, 598, 599, 600, 619, 620, 640, 676, 677, 680, 681, 705, 723, 741, 822, 849, 909, 1057, 1082, 1091, 1138, 1156, 1158, 1159, 1180, 1182, 1213], "symbol": [37, 57, 114, 115, 128, 294, 741, 849], "end": [37, 40, 57, 114, 115, 126, 128, 183, 294, 327, 330, 331, 362, 391, 416, 439, 490, 590, 595, 598, 609, 617, 621, 624, 627, 665, 685, 686, 688, 689, 692, 700, 701, 728, 729, 731, 741, 778, 783, 790, 801, 849, 852, 879, 916, 949, 994, 1051, 1134, 1137, 1148, 1156, 1160, 1213], "byte": [37, 45, 57, 59, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 167, 294, 603, 605, 849, 971, 1142, 1144, 1213], "quot": [37, 38, 57, 114, 115, 128, 294, 849], "specifi": [37, 40, 57, 78, 90, 99, 101, 119, 125, 144, 155, 156, 162, 167, 168, 171, 182, 183, 184, 185, 186, 187, 202, 219, 230, 231, 233, 236, 237, 238, 240, 244, 259, 262, 269, 270, 273, 294, 338, 413, 414, 415, 416, 421, 539, 553, 554, 562, 563, 564, 565, 566, 568, 569, 570, 576, 586, 668, 670, 671, 672, 685, 686, 688, 689, 692, 720, 723, 728, 729, 741, 757, 759, 766, 770, 773, 777, 778, 779, 780, 781, 782, 786, 805, 807, 808, 810, 811, 815, 820, 822, 826, 827, 830, 849, 893, 971, 972, 973, 974, 980, 1088, 1114, 1213], "defin": [37, 40, 48, 57, 116, 141, 142, 144, 153, 156, 164, 168, 183, 184, 186, 187, 206, 217, 220, 230, 264, 275, 280, 294, 308, 439, 473, 494, 507, 543, 547, 558, 559, 562, 563, 564, 565, 566, 568, 569, 570, 663, 685, 686, 688, 689, 703, 706, 723, 728, 729, 741, 759, 767, 770, 778, 779, 781, 782, 800, 805, 823, 832, 837, 849, 852, 859, 994, 1034, 1064, 1082, 1092, 1213], "chrono": [37, 57, 294, 394, 397, 628, 629, 630, 634, 849, 952, 955, 1167, 1168, 1169, 1173], "rust": [37, 45, 57, 96, 116, 120, 122, 126, 206, 280, 294, 599, 849, 1064, 1138, 1213], "crate": [37, 57, 294, 590, 591, 592, 597, 598, 599, 612, 613, 628, 629, 630, 634, 849, 852, 1129, 1130, 1131, 1136, 1137, 1138, 1151, 1152, 1167, 1168, 1169, 1173], "fraction": [37, 57, 137, 138, 139, 140, 234, 294, 392, 484, 540, 573, 628, 630, 741, 849, 950, 1045, 1078, 1106, 1167, 1169, 1213], "second": [37, 57, 137, 138, 139, 140, 143, 183, 203, 230, 265, 294, 387, 391, 404, 405, 559, 562, 563, 564, 565, 566, 568, 569, 570, 628, 630, 685, 686, 687, 688, 689, 690, 727, 728, 729, 731, 741, 778, 787, 805, 849, 852, 945, 949, 962, 963, 1167, 1169, 1221], "infer": [37, 57, 103, 105, 106, 107, 108, 109, 114, 115, 116, 119, 123, 124, 128, 132, 133, 153, 206, 294, 405, 555, 600, 601, 628, 629, 630, 631, 634, 717, 741, 849, 949, 963, 1089, 1139, 1140, 1167, 1168, 1169, 1170, 1173, 1213], "timeunit": [37, 48, 50, 57, 294, 363, 364, 396, 408, 630, 685, 686, 687, 688, 689, 690, 849, 852, 917, 918, 954, 966, 1169], "frame": [37, 38, 40, 57, 63, 64, 65, 66, 67, 68, 78, 85, 86, 106, 115, 119, 125, 137, 138, 144, 156, 157, 200, 201, 206, 213, 217, 220, 231, 232, 233, 256, 263, 264, 294, 759, 760, 797, 800, 823, 849, 852, 892, 1213, 1220, 1221], "repres": [37, 40, 57, 61, 76, 103, 105, 107, 108, 109, 116, 119, 245, 266, 272, 294, 448, 450, 505, 588, 656, 659, 673, 675, 690, 692, 703, 705, 706, 718, 719, 722, 730, 737, 741, 816, 824, 849, 1107, 1111, 1126, 1202, 1213], "necessari": [37, 57, 69, 88, 119, 255, 294, 849], "non_numer": [37, 57, 294, 849], "never": [37, 57, 116, 202, 231, 294, 786, 849], "strategi": [37, 57, 78, 86, 114, 141, 142, 143, 144, 146, 171, 183, 186, 202, 203, 216, 264, 294, 308, 421, 496, 507, 741, 773, 778, 781, 786, 787, 823, 849, 980, 1057, 1213], "put": [37, 57, 294, 849], "around": [37, 57, 294, 849], "thei": [37, 39, 40, 57, 69, 85, 86, 87, 88, 106, 128, 150, 204, 233, 294, 624, 625, 741, 763, 849, 852], "record": [37, 42, 57, 122, 134, 203, 255, 294, 787, 849], "termin": [37, 57, 294, 849], "indistinguish": [37, 57, 294, 849], "even": [37, 57, 114, 294, 543, 547, 741, 849, 1082, 1213], "invalid": [37, 57, 114, 115, 128, 294, 600, 602, 632, 651, 741, 849, 1139, 1141, 1171], "g": [37, 57, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 131, 134, 152, 199, 255, 263, 294, 301, 308, 416, 507, 578, 692, 741, 765, 803, 849, 970, 1109, 1194, 1213, 1221], "pars": [37, 57, 63, 114, 115, 119, 124, 128, 131, 132, 155, 182, 185, 236, 237, 240, 244, 259, 269, 270, 273, 294, 338, 439, 506, 539, 554, 586, 600, 601, 611, 631, 632, 660, 662, 668, 670, 671, 672, 679, 683, 696, 708, 712, 720, 721, 723, 725, 731, 741, 757, 777, 780, 807, 808, 811, 815, 820, 826, 827, 830, 849, 893, 994, 1114, 1139, 1140, 1150, 1169, 1170, 1171, 1213], "valid": [37, 40, 48, 57, 63, 116, 120, 122, 126, 146, 150, 167, 202, 294, 355, 590, 591, 592, 597, 598, 599, 602, 612, 613, 731, 741, 786, 849, 852, 908, 971, 987, 1129, 1130, 1131, 1136, 1137, 1138, 1141, 1151, 1152, 1213], "integ": [37, 39, 40, 53, 54, 55, 56, 57, 72, 73, 74, 75, 135, 142, 144, 145, 147, 164, 183, 230, 253, 294, 305, 337, 392, 425, 426, 538, 547, 552, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 611, 632, 658, 665, 696, 700, 701, 717, 741, 767, 778, 805, 849, 852, 890, 950, 983, 1004, 1082, 1086, 1100, 1107, 1111, 1150, 1171, 1213, 1220, 1221], "aren": [37, 57, 294, 849], "t": [37, 57, 65, 66, 86, 114, 119, 125, 128, 183, 206, 220, 261, 263, 294, 308, 355, 362, 370, 390, 410, 413, 414, 415, 470, 507, 539, 543, 597, 625, 628, 630, 731, 741, 778, 800, 821, 849, 852, 908, 948, 969, 970, 972, 973, 974, 1031, 1064, 1109, 1136, 1163, 1164, 1167, 1169, 1194, 1203, 1213], "strictli": [37, 57, 69, 88, 294, 771, 849], "table_nam": [38, 40, 294], "connect": [38, 114, 116, 117, 120, 122, 126, 131, 133, 134, 294, 754], "if_table_exist": [38, 294], "dbwritemod": [38, 294], "fail": [38, 39, 104, 118, 120, 124, 129, 133, 137, 138, 152, 261, 294, 319, 395, 496, 628, 629, 630, 634, 741, 821, 849, 1064, 1167, 1168, 1169, 1173, 1213], "dbwriteengin": [38, 294], "sqlalchemi": [38, 116, 136, 294], "databas": [38, 116, 117, 294, 753], "qualifi": [38, 294], "creat": [38, 40, 69, 88, 103, 107, 109, 116, 117, 129, 130, 142, 143, 144, 145, 146, 147, 157, 158, 183, 184, 187, 218, 221, 230, 265, 269, 294, 364, 391, 405, 496, 551, 559, 562, 563, 565, 568, 569, 570, 617, 671, 684, 685, 686, 687, 688, 689, 690, 727, 728, 729, 737, 741, 760, 761, 769, 778, 779, 782, 805, 826, 849, 892, 896, 909, 918, 949, 963, 1075, 1082, 1085, 1156, 1194, 1213, 1220, 1221], "append": [38, 39, 144, 169, 202, 203, 294, 551, 731, 741, 786, 787, 849, 977, 1213], "your": [38, 40, 69, 78, 88, 114, 115, 116, 119, 134, 200, 206, 232, 233, 236, 252, 269, 273, 280, 294, 308, 507, 599, 628, 629, 630, 637, 706, 741, 783, 790, 792, 807, 826, 830, 837, 849, 1064, 1138, 1167, 1168, 1169, 1176, 1213, 1221], "special": [38, 114, 115, 128, 294, 561, 598, 741, 859, 1064, 1094, 1137, 1213], "uri": [38, 39, 116, 117, 118, 129, 130, 294], "postgresql": [38, 116, 117, 294, 539, 741], "user": [38, 116, 117, 153, 206, 220, 275, 280, 294, 308, 505, 507, 543, 575, 663, 706, 741, 800, 832, 837, 849, 859, 1064, 1112, 1213], "pass": [38, 39, 40, 45, 66, 78, 105, 116, 117, 119, 128, 133, 134, 137, 139, 142, 144, 146, 155, 160, 162, 182, 183, 186, 189, 205, 219, 220, 230, 236, 240, 244, 248, 259, 265, 269, 273, 294, 308, 371, 387, 390, 419, 437, 489, 506, 507, 539, 543, 559, 562, 563, 564, 565, 566, 568, 569, 570, 576, 586, 623, 624, 625, 659, 668, 685, 696, 723, 731, 737, 741, 757, 766, 777, 778, 779, 781, 782, 784, 791, 792, 800, 805, 807, 811, 813, 815, 820, 826, 830, 837, 849, 859, 925, 948, 978, 989, 1019, 1050, 1063, 1064, 1114, 1162, 1163, 1164, 1184, 1213], "server": [38, 116, 117, 294], "port": [38, 114, 116, 117, 120, 122, 126, 131, 294], "sqlite": [38, 116, 294], "db": [38, 117, 294], "replac": [38, 39, 114, 115, 128, 170, 171, 227, 228, 260, 269, 270, 294, 364, 390, 505, 506, 613, 741, 772, 826, 827, 849, 918, 948, 1063, 1107, 1110, 1111, 1152, 1213], "insert": [38, 114, 115, 120, 122, 126, 128, 131, 132, 133, 192, 193, 226, 260, 262, 294, 574, 589, 637, 741, 822, 849, 1108, 1128, 1176, 1213], "mode": [38, 39, 57, 58, 59, 63, 137, 139, 221, 294, 598, 714, 717, 732, 741, 762, 849, 1137, 1213, 1220], "new": [38, 39, 40, 119, 128, 150, 177, 191, 192, 193, 206, 217, 218, 225, 226, 249, 260, 262, 263, 264, 269, 270, 294, 303, 364, 418, 430, 438, 504, 527, 612, 613, 619, 620, 638, 640, 646, 737, 741, 753, 776, 803, 819, 822, 823, 826, 827, 832, 837, 849, 855, 918, 976, 985, 1075, 1087, 1151, 1152, 1158, 1159, 1177, 1180, 1186, 1191, 1213, 1220], "alreadi": [38, 39, 294, 355, 470, 655, 741, 908, 1031, 1201, 1213], "adbc": [38, 116, 117, 294], "affect": [38, 39, 137, 138, 139, 140, 294], "driver": [38, 116, 117, 294], "provid": [38, 40, 66, 114, 115, 117, 118, 128, 129, 130, 133, 144, 146, 172, 198, 294, 328, 329, 416, 496, 505, 507, 593, 594, 597, 600, 602, 624, 625, 626, 627, 696, 723, 741, 753, 774, 849, 877, 878, 990, 1016, 1064, 1132, 1133, 1136, 1139, 1141, 1213, 1220, 1221], "otherwis": [38, 83, 116, 119, 143, 148, 206, 213, 233, 236, 280, 294, 328, 338, 356, 413, 414, 415, 496, 507, 515, 543, 547, 552, 563, 564, 565, 566, 568, 570, 590, 593, 659, 706, 731, 741, 797, 807, 837, 849, 877, 893, 909, 972, 973, 974, 1057, 1064, 1082, 1086, 1107, 1110, 1129, 1132, 1213], "deltalak": [39, 118, 129, 136, 294], "deltat": [39, 294], "ignor": [39, 143, 144, 146, 209, 210, 246, 247, 264, 294, 304, 306, 358, 390, 413, 414, 415, 468, 532, 533, 589, 659, 661, 741, 856, 857, 911, 948, 972, 973, 974, 1029, 1073, 1074, 1128, 1213], "overwrite_schema": [39, 294], "storage_opt": [39, 114, 118, 120, 122, 126, 129, 130, 131, 133, 294], "delta_write_opt": [39, 294], "delta": [39, 50, 118, 129, 245, 266, 294, 568, 570, 588, 656, 673, 675, 718, 719, 722, 730, 741, 753, 816, 824, 849, 1101, 1103, 1126, 1202, 1213], "handl": [39, 86, 110, 114, 115, 128, 134, 294, 358, 468, 637, 741, 762, 849, 911, 1029, 1176, 1213], "throw": [39, 156, 294, 333, 600, 602, 741, 759, 849, 882, 1139, 1141, 1213], "add": [39, 40, 115, 169, 183, 186, 206, 269, 270, 271, 294, 356, 528, 529, 545, 547, 642, 690, 694, 731, 741, 778, 781, 786, 826, 827, 828, 829, 849, 977, 1213], "anyth": [39, 231, 294], "updat": [39, 294, 849], "extra": [39, 45, 59, 114, 115, 118, 119, 120, 122, 126, 128, 129, 130, 131, 169, 183, 294, 741, 778, 849, 977, 1213], "storag": [39, 114, 118, 120, 122, 126, 129, 130, 131, 133, 294], "backend": [39, 116, 117, 118, 129, 130, 294], "cloud": [39, 116, 118, 129, 130, 133, 134, 294], "configur": [39, 118, 129, 130, 150, 294], "authent": [39, 118, 129, 130, 294], "see": [39, 40, 41, 42, 48, 116, 117, 118, 119, 129, 130, 133, 137, 138, 139, 140, 144, 146, 160, 183, 202, 220, 221, 294, 338, 421, 455, 505, 583, 590, 597, 598, 612, 685, 686, 688, 689, 716, 728, 729, 737, 741, 762, 778, 849, 852, 887, 893, 1017, 1122, 1129, 1136, 1137, 1151, 1213, 1221], "here": [39, 40, 45, 103, 105, 106, 107, 109, 116, 117, 118, 123, 124, 129, 130, 132, 133, 142, 144, 146, 294, 507, 599, 602, 741, 849, 1141], "gc": [39, 118, 129, 130, 294], "azur": [39, 118, 129, 130, 133, 294], "keyword": [39, 66, 118, 126, 129, 160, 220, 231, 236, 237, 269, 270, 273, 294, 543, 720, 723, 731, 741, 800, 807, 808, 826, 827, 830, 849, 1213], "argument": [39, 45, 88, 114, 118, 126, 128, 129, 160, 162, 168, 182, 183, 184, 185, 186, 187, 207, 209, 214, 219, 220, 221, 230, 236, 237, 238, 244, 246, 256, 262, 265, 269, 270, 273, 294, 391, 405, 416, 439, 539, 543, 554, 559, 562, 563, 564, 565, 566, 568, 569, 570, 586, 623, 624, 625, 659, 666, 667, 668, 670, 671, 672, 692, 720, 723, 731, 741, 766, 770, 777, 778, 779, 780, 781, 782, 800, 805, 807, 808, 810, 815, 822, 826, 827, 830, 849, 949, 963, 994, 1088, 1162, 1163, 1164, 1195, 1213], "while": [39, 85, 115, 118, 119, 129, 144, 146, 150, 200, 212, 260, 264, 294, 604, 763, 796, 823, 849, 987, 1143, 1213], "lake": [39, 118, 129, 294, 753], "typeerror": [39, 294], "unsupport": [39, 294], "arrowinvaliderror": [39, 294], "could": [39, 76, 91, 156, 294, 333, 676, 680, 690, 694, 741, 759, 767, 849, 882, 987, 1213], "primit": [39, 294, 444, 741, 1194, 1213], "categor": [39, 69, 87, 88, 104, 137, 138, 139, 140, 202, 253, 254, 294, 334, 335, 356, 547, 554, 649, 741, 852, 883, 884, 885, 886, 887, 888, 909, 1082, 1088, 1196, 1213], "protocol": [39, 104, 117, 152, 294], "associ": [39, 40, 64, 66, 78, 117, 143, 233, 294], "follow": [39, 40, 45, 83, 114, 115, 118, 128, 129, 130, 137, 183, 203, 206, 220, 230, 265, 294, 387, 391, 405, 543, 550, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 640, 651, 685, 686, 688, 689, 706, 728, 729, 731, 733, 734, 736, 741, 742, 743, 746, 748, 749, 750, 778, 787, 800, 805, 849, 945, 949, 963, 1084, 1107, 1110, 1205, 1207, 1209, 1213, 1214, 1217, 1218, 1219, 1221], "unsign": [39, 72, 73, 74, 75, 294, 552, 741, 852, 1004, 1086, 1213], "millisecond": [39, 183, 203, 230, 265, 294, 387, 391, 401, 405, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 688, 689, 690, 728, 729, 741, 778, 787, 805, 849, 852, 945, 949, 959, 963], "nanosecond": [39, 183, 203, 230, 265, 294, 387, 391, 392, 403, 405, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 688, 689, 690, 728, 729, 741, 778, 787, 805, 849, 945, 949, 950, 961, 963], "zone": [39, 48, 294, 362, 365, 390, 630, 685, 686, 687, 688, 689, 852, 916, 919, 948, 1169], "binari": [39, 41, 116, 119, 294, 327, 329, 330, 331, 852, 876, 879, 880], "nullabl": [39, 294], "To": [39, 85, 170, 207, 209, 214, 246, 294, 338, 360, 361, 421, 554, 590, 597, 598, 612, 624, 625, 626, 627, 635, 741, 772, 849, 893, 913, 914, 987, 1129, 1136, 1137, 1151, 1174, 1194, 1213], "pyarrow": [39, 45, 103, 104, 108, 114, 117, 118, 120, 122, 126, 129, 134, 136, 250, 255, 256, 294, 754, 1189, 1193, 1194, 1195, 1213], "ha": [39, 40, 78, 85, 116, 119, 128, 152, 153, 173, 176, 183, 184, 185, 186, 187, 192, 227, 230, 249, 265, 275, 294, 308, 332, 350, 351, 352, 353, 354, 355, 442, 446, 449, 454, 466, 479, 494, 503, 504, 506, 516, 545, 559, 560, 562, 563, 564, 565, 566, 568, 569, 570, 591, 601, 605, 606, 607, 608, 611, 615, 616, 622, 642, 645, 646, 650, 663, 674, 682, 683, 693, 702, 704, 737, 741, 763, 778, 779, 780, 781, 782, 791, 805, 819, 832, 837, 849, 859, 881, 892, 904, 905, 906, 907, 908, 910, 987, 999, 1001, 1005, 1027, 1040, 1055, 1063, 1093, 1109, 1111, 1130, 1140, 1144, 1145, 1146, 1147, 1150, 1154, 1155, 1161, 1185, 1186, 1197, 1213], "last": [39, 137, 138, 139, 140, 155, 189, 203, 205, 221, 233, 244, 248, 259, 261, 288, 294, 318, 355, 368, 383, 388, 406, 446, 447, 454, 474, 493, 496, 526, 528, 529, 530, 531, 545, 585, 620, 642, 644, 726, 741, 757, 787, 815, 818, 820, 821, 845, 849, 852, 868, 908, 922, 941, 946, 964, 989, 1005, 1006, 1019, 1035, 1054, 1159, 1184, 1213], "filesystem": [39, 118, 129, 130, 294], "table_path": [39, 118, 129, 130, 294], "match": [39, 40, 48, 86, 97, 103, 105, 106, 107, 109, 123, 124, 132, 137, 138, 139, 140, 171, 202, 203, 231, 264, 294, 513, 567, 590, 591, 592, 595, 597, 598, 600, 602, 612, 613, 621, 628, 629, 630, 731, 741, 773, 786, 787, 823, 849, 852, 1004, 1013, 1100, 1129, 1130, 1131, 1134, 1136, 1137, 1139, 1141, 1151, 1152, 1160, 1167, 1168, 1169, 1213], "version": [39, 83, 88, 118, 119, 129, 136, 152, 153, 173, 176, 183, 184, 185, 186, 187, 188, 192, 207, 209, 214, 227, 241, 246, 249, 275, 294, 308, 339, 340, 350, 351, 352, 353, 354, 369, 373, 377, 379, 381, 383, 384, 386, 390, 393, 405, 434, 442, 446, 449, 454, 466, 479, 494, 503, 504, 506, 545, 560, 577, 591, 601, 605, 606, 607, 608, 611, 615, 616, 622, 628, 630, 642, 645, 646, 663, 682, 683, 685, 687, 704, 716, 741, 778, 779, 780, 781, 782, 791, 812, 819, 832, 849, 859, 894, 895, 904, 905, 906, 907, 909, 923, 927, 934, 936, 939, 941, 942, 944, 948, 949, 951, 963, 988, 995, 999, 1001, 1004, 1005, 1011, 1013, 1015, 1027, 1040, 1055, 1063, 1082, 1093, 1109, 1111, 1115, 1130, 1140, 1144, 1145, 1146, 1147, 1150, 1154, 1155, 1161, 1167, 1169, 1185, 1186, 1203, 1213], "old": [39, 225, 294, 803, 849], "existing_table_path": [39, 294], "store": [39, 114, 126, 130, 169, 200, 232, 294, 334, 884, 977, 1213], "bucket": [39, 118, 129, 130, 133, 294, 391, 405, 949, 963, 990, 1213], "prefix": [39, 150, 294, 303, 331, 504, 527, 529, 530, 531, 621, 625, 626, 637, 642, 741, 852, 880, 1160, 1165, 1176], "aws_region": [39, 129, 133, 294], "the_aws_region": [39, 294], "aws_access_key_id": [39, 118, 129, 133, 294], "the_aws_access_key_id": [39, 118, 129, 130, 294], "aws_secret_access_kei": [39, 118, 129, 133, 294], "the_aws_secret_access_kei": [39, 118, 129, 130, 294], "pa": [39, 103, 134, 294], "workbook": [40, 119, 294], "worksheet": [40, 119, 125, 294], "posit": [40, 162, 168, 182, 185, 219, 236, 237, 238, 240, 244, 262, 269, 270, 273, 294, 413, 414, 415, 416, 489, 539, 547, 576, 586, 599, 611, 632, 666, 667, 668, 670, 671, 672, 692, 720, 723, 741, 766, 770, 777, 780, 807, 808, 810, 811, 815, 822, 826, 827, 830, 849, 972, 973, 974, 1050, 1082, 1114, 1138, 1150, 1171, 1213], "tupl": [40, 117, 119, 125, 153, 200, 206, 231, 232, 233, 239, 272, 294, 555, 741, 801, 813, 849, 852, 1089, 1213], "a1": [40, 79, 81, 294], "table_styl": [40, 294], "column_format": [40, 294], "columnformatdict": [40, 294], "dtype_format": [40, 294], "oneormoredatatyp": [40, 142, 294, 1013, 1213], "conditional_format": [40, 294], "conditionalformatdict": [40, 294], "header_format": [40, 294], "column_tot": [40, 294], "columntotalsdefinit": [40, 294], "column_width": [40, 294], "columnwidthsdefinit": [40, 294], "row_tot": [40, 294], "rowtotalsdefinit": [40, 294], "row_height": [40, 294], "sparklin": [40, 294], "sequenc": [40, 70, 78, 103, 105, 106, 107, 109, 114, 115, 116, 119, 123, 124, 125, 128, 132, 142, 143, 144, 155, 161, 168, 169, 202, 203, 212, 217, 219, 220, 221, 233, 244, 253, 259, 263, 264, 265, 294, 356, 444, 496, 503, 505, 543, 547, 586, 626, 627, 640, 663, 668, 676, 677, 680, 681, 694, 696, 704, 705, 706, 716, 721, 741, 757, 770, 786, 787, 796, 800, 815, 820, 823, 849, 909, 910, 977, 1057, 1082, 1107, 1111, 1180, 1213], "formula": [40, 294, 410, 741, 969, 1213], "autofilt": [40, 294], "autofit": [40, 294], "hidden_column": [40, 294], "selectortyp": [40, 294, 852], "hide_gridlin": [40, 294], "sheet_zoom": [40, 294], "freeze_pan": [40, 294], "excel": [40, 119, 294], "open": [40, 113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 133, 294, 765, 849], "xlsxwriter": [40, 136, 294], "close": [40, 116, 183, 184, 186, 187, 230, 294, 356, 439, 500, 547, 559, 562, 563, 564, 565, 566, 568, 569, 570, 583, 685, 686, 688, 689, 728, 729, 741, 778, 779, 781, 782, 805, 849, 909, 994, 1082, 1122, 1213], "xlsx": [40, 119, 294], "work": [40, 49, 104, 115, 134, 226, 237, 270, 294, 304, 306, 308, 325, 337, 338, 416, 425, 470, 497, 507, 539, 558, 603, 604, 652, 741, 808, 827, 849, 852, 856, 857, 875, 890, 893, 983, 1031, 1058, 1142, 1143, 1198, 1213], "directori": [40, 45, 126, 294], "sheet1": [40, 294], "medium": [40, 294], "kei": [40, 78, 83, 86, 130, 133, 183, 200, 202, 203, 213, 219, 221, 225, 229, 232, 233, 264, 294, 507, 723, 741, 771, 778, 786, 787, 797, 803, 804, 823, 849], "first_column": [40, 294], "last_column": [40, 294], "banded_column": [40, 294], "banded_row": [40, 294], "sheet": [40, 119, 125, 294], "chart": [40, 294, 801, 849], "subsequ": [40, 68, 224, 256, 294, 496, 731, 769, 849], "colnam": [40, 128, 144, 165, 294, 731, 768, 849], "given": [40, 63, 64, 78, 103, 105, 106, 107, 109, 114, 115, 116, 117, 119, 123, 124, 125, 128, 132, 133, 139, 140, 141, 142, 144, 145, 146, 147, 153, 155, 167, 168, 170, 183, 184, 186, 187, 198, 206, 219, 220, 230, 231, 233, 240, 241, 244, 259, 264, 294, 338, 362, 365, 394, 396, 397, 410, 439, 465, 489, 496, 498, 507, 539, 543, 550, 553, 554, 555, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 574, 576, 577, 598, 599, 609, 610, 628, 630, 637, 640, 663, 692, 704, 705, 706, 717, 718, 719, 741, 757, 770, 778, 779, 781, 782, 791, 792, 800, 805, 811, 812, 815, 820, 823, 832, 837, 849, 852, 859, 893, 916, 919, 952, 954, 955, 969, 971, 990, 994, 1016, 1026, 1050, 1057, 1059, 1062, 1064, 1075, 1084, 1088, 1089, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1108, 1114, 1115, 1137, 1138, 1148, 1149, 1167, 1169, 1176, 1200, 1204, 1213, 1220, 1221], "dd": [40, 294], "mm": [40, 294], "yyyi": [40, 294], "overridden": [40, 103, 105, 107, 109, 123, 124, 148, 294, 554, 741, 849, 1088, 1213], "basi": [40, 144, 294], "param": [40, 103, 105, 106, 107, 109, 114, 115, 123, 124, 128, 143, 144, 146, 231, 294, 849], "It": [40, 69, 88, 213, 220, 280, 294, 515, 558, 737, 741, 791, 792, 797, 837, 849, 1107, 1110, 1213], "float_dtyp": [40, 294], "simplifi": [40, 57, 58, 59, 84, 85, 294, 762, 763, 769, 771, 801, 813, 849], "uniform": [40, 294, 547, 741, 1082, 1213], "condit": [40, 164, 172, 231, 294, 595, 621, 669, 694, 731, 767, 774, 849], "suppli": [40, 103, 105, 106, 107, 109, 116, 123, 124, 132, 172, 231, 294, 543, 741, 774, 849], "typenam": [40, 294], "3_color_scal": [40, 294], "data_bar": [40, 294], "make": [40, 70, 86, 103, 108, 114, 115, 120, 122, 126, 131, 213, 217, 224, 265, 294, 414, 415, 530, 531, 539, 553, 619, 741, 797, 849, 973, 974, 990, 1158, 1213, 1221], "icon": [40, 294], "multipl": [40, 66, 84, 85, 86, 114, 115, 119, 125, 128, 131, 132, 133, 142, 146, 155, 162, 167, 169, 172, 182, 183, 191, 201, 219, 221, 233, 236, 238, 244, 259, 264, 269, 273, 294, 473, 494, 512, 516, 523, 524, 539, 554, 555, 558, 562, 563, 564, 565, 566, 568, 569, 570, 586, 668, 680, 681, 694, 704, 705, 707, 711, 716, 721, 724, 731, 737, 741, 757, 762, 763, 766, 774, 777, 778, 807, 810, 815, 820, 823, 826, 830, 837, 849, 858, 971, 977, 1034, 1055, 1069, 1088, 1089, 1213], "singl": [40, 64, 78, 85, 86, 114, 115, 116, 117, 119, 126, 128, 133, 142, 156, 162, 163, 164, 169, 178, 188, 198, 202, 206, 219, 231, 233, 244, 294, 308, 338, 387, 422, 429, 432, 434, 466, 467, 473, 494, 505, 507, 551, 554, 555, 586, 589, 657, 663, 668, 671, 672, 701, 705, 706, 721, 729, 741, 759, 762, 766, 767, 786, 815, 849, 893, 945, 977, 988, 1027, 1028, 1034, 1085, 1088, 1089, 1128, 1189, 1213], "across": [40, 78, 188, 208, 210, 215, 247, 294, 434, 660, 662, 676, 677, 679, 683, 708, 712, 725, 741, 988, 1213], "effect": [40, 175, 183, 186, 255, 294, 370, 507, 685, 686, 741, 778, 781, 829, 849, 916, 924], "heatmap": [40, 294], "min": [40, 45, 59, 161, 171, 215, 221, 230, 294, 340, 347, 352, 421, 539, 550, 559, 565, 712, 720, 741, 773, 805, 849, 895, 901, 905, 910, 980, 1084, 1098, 1213, 1221], "entir": [40, 294, 762, 849], "made": [40, 116, 294, 1194, 1213], "abov": [40, 137, 221, 294, 731], "than": [40, 57, 58, 59, 102, 107, 109, 114, 115, 116, 119, 125, 128, 134, 144, 146, 157, 182, 185, 200, 203, 206, 219, 231, 232, 234, 263, 280, 294, 431, 433, 457, 484, 502, 507, 518, 547, 558, 573, 583, 603, 609, 610, 620, 637, 673, 685, 706, 741, 762, 777, 780, 787, 837, 849, 1045, 1064, 1082, 1092, 1106, 1122, 1142, 1148, 1149, 1159, 1176, 1213, 1221], "bold": [40, 294], "font_color": [40, 294], "702963": [40, 294], "total": [40, 167, 294, 369, 373, 377, 379, 381, 386, 393, 398, 399, 400, 401, 402, 403, 404, 923, 927, 934, 936, 939, 944, 951, 956, 957, 958, 959, 960, 961, 962, 971, 1213], "export": [40, 200, 201, 232, 233, 252, 255, 294, 737], "sum": [40, 63, 167, 175, 182, 183, 198, 221, 230, 247, 273, 294, 348, 349, 354, 410, 422, 496, 507, 515, 517, 518, 519, 559, 569, 657, 659, 676, 678, 679, 680, 682, 683, 694, 706, 716, 725, 741, 762, 763, 765, 769, 771, 777, 778, 799, 801, 805, 809, 813, 830, 849, 852, 902, 903, 907, 969, 971, 1102, 1213], "must": [40, 104, 105, 118, 129, 130, 134, 161, 168, 183, 184, 186, 187, 203, 213, 230, 231, 294, 356, 496, 505, 547, 554, 559, 562, 563, 564, 565, 566, 568, 569, 570, 731, 741, 770, 778, 779, 781, 782, 787, 791, 792, 797, 805, 849, 909, 910, 1082, 1213], "funcnam": [40, 294], "averag": [40, 294, 413, 414, 415, 550, 741, 972, 973, 974, 1084, 1213], "count_num": [40, 294], "count": [40, 63, 114, 115, 120, 122, 126, 128, 131, 132, 133, 134, 154, 161, 183, 203, 217, 218, 221, 230, 260, 264, 265, 271, 280, 285, 294, 309, 345, 350, 387, 458, 466, 467, 507, 515, 517, 525, 537, 559, 562, 563, 564, 565, 566, 568, 569, 570, 591, 592, 653, 655, 664, 713, 741, 756, 778, 787, 799, 805, 829, 837, 842, 849, 910, 945, 990, 1027, 1028, 1071, 1077, 1130, 1131, 1199, 1201, 1213], "std_dev": [40, 294], "var": [40, 147, 294, 570, 741, 849, 1213], "pixel": [40, 294], "unit": [40, 48, 50, 137, 138, 139, 140, 144, 146, 167, 294, 363, 364, 371, 396, 408, 501, 516, 628, 630, 654, 685, 686, 687, 688, 689, 690, 696, 741, 801, 849, 852, 917, 918, 925, 954, 966, 971, 1062, 1167, 1169, 1200, 1213, 1221], "hand": [40, 114, 115, 128, 294, 485, 486, 487, 488, 1046, 1047, 1048, 1049], "side": [40, 183, 184, 186, 187, 230, 294, 439, 485, 486, 487, 488, 559, 562, 563, 564, 565, 566, 568, 569, 570, 574, 685, 686, 688, 689, 728, 729, 741, 778, 779, 781, 782, 805, 849, 994, 1046, 1047, 1048, 1049, 1108, 1213], "call": [40, 67, 69, 88, 115, 116, 137, 138, 139, 140, 144, 146, 150, 182, 183, 186, 204, 206, 230, 293, 294, 308, 346, 349, 454, 507, 526, 528, 529, 530, 531, 545, 579, 642, 737, 741, 754, 777, 778, 779, 781, 782, 805, 848, 849, 852, 859, 1064, 1118, 1213], "ad": [40, 106, 119, 183, 186, 260, 264, 269, 270, 294, 307, 419, 676, 677, 680, 681, 741, 778, 781, 823, 826, 827, 849, 909, 978, 1082, 1213], "wise": [40, 78, 116, 175, 294, 310, 311, 312, 313, 314, 315, 341, 342, 343, 417, 499, 580, 581, 582, 647, 648, 680, 681, 694, 716, 741, 860, 861, 862, 863, 864, 865, 897, 898, 899, 975, 1060, 1061, 1119, 1120, 1121, 1187, 1188, 1213], "particip": [40, 294], "distinct": [40, 146, 219, 294, 325, 442, 443, 446, 447, 497, 550, 690, 741, 875, 999, 1000, 1005, 1006, 1058, 1084, 1213, 1221], "referenc": [40, 294, 640], "differ": [40, 114, 134, 137, 139, 169, 183, 188, 200, 230, 232, 233, 252, 260, 294, 358, 368, 387, 388, 390, 406, 412, 434, 468, 485, 487, 496, 507, 532, 533, 535, 628, 653, 674, 693, 696, 702, 741, 769, 778, 805, 849, 852, 887, 911, 922, 945, 946, 948, 964, 970, 977, 988, 1029, 1046, 1048, 1064, 1073, 1074, 1109, 1167, 1213], "row_index": [40, 294], "height": [40, 164, 294], "intersect": [40, 294, 486, 852, 1047], "bodi": [40, 294], "start": [40, 113, 114, 115, 116, 117, 120, 122, 125, 126, 128, 131, 132, 133, 148, 182, 183, 185, 186, 204, 243, 265, 271, 294, 327, 330, 331, 368, 382, 388, 391, 405, 406, 416, 439, 490, 562, 563, 565, 568, 569, 570, 584, 590, 595, 598, 610, 617, 621, 625, 626, 637, 665, 676, 680, 685, 686, 688, 689, 692, 694, 700, 701, 728, 729, 731, 741, 777, 778, 780, 781, 801, 814, 829, 849, 852, 880, 917, 919, 922, 925, 926, 933, 935, 938, 940, 943, 946, 949, 954, 963, 964, 994, 1051, 1123, 1134, 1137, 1149, 1156, 1160, 1176, 1213, 1221], "unless": [40, 78, 105, 256, 294, 623, 624, 717, 849, 1162, 1195, 1203, 1213], "marker": [40, 294], "compliant": [40, 294], "case": [40, 69, 78, 85, 103, 105, 106, 107, 109, 116, 123, 124, 132, 133, 148, 153, 169, 183, 184, 186, 187, 200, 206, 230, 232, 233, 252, 294, 362, 504, 505, 515, 516, 527, 559, 590, 598, 612, 741, 763, 778, 779, 781, 782, 805, 849, 852, 916, 977, 1129, 1137, 1151, 1213], "three": [40, 258, 294, 356, 547, 574, 741, 909, 1057, 1082, 1213], "avail": [40, 112, 116, 117, 118, 129, 130, 142, 150, 221, 293, 294, 550, 733, 734, 736, 740, 741, 742, 743, 746, 747, 748, 749, 750, 753, 754, 771, 848, 849, 852, 1084, 1205, 1207, 1209, 1213, 1214, 1217, 1218, 1219], "insert_befor": [40, 294], "insert_aft": [40, 294], "respect": [40, 294, 852], "direct": [40, 117, 126, 130, 133, 137, 240, 263, 294, 489, 576, 741, 811, 849, 1050, 1114, 1213], "far": [40, 294], "strongli": [40, 148, 206, 231, 280, 294, 507, 741, 1064, 1213], "advis": [40, 69, 88, 204, 294], "structur": [40, 94, 98, 100, 169, 220, 233, 255, 294, 543, 741, 800, 849, 977, 1213], "wherev": [40, 206, 280, 294, 507, 741, 1064, 1213], "possibl": [40, 114, 155, 182, 185, 200, 206, 232, 259, 261, 280, 294, 501, 507, 515, 561, 620, 654, 741, 757, 777, 780, 815, 820, 821, 849, 1064, 1094, 1159, 1213], "simpl": [40, 146, 217, 294], "colx": [40, 68, 294, 530, 531, 852, 1221], "coli": [40, 294, 530, 531, 852, 1221], "after": [40, 68, 86, 106, 113, 114, 115, 120, 122, 126, 128, 131, 132, 133, 169, 262, 293, 294, 416, 506, 539, 550, 637, 741, 822, 849, 977, 1063, 1084, 1176, 1213], "befor": [40, 114, 116, 119, 128, 134, 137, 138, 139, 140, 148, 150, 169, 183, 186, 203, 262, 294, 348, 349, 355, 506, 539, 540, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 637, 643, 718, 719, 741, 778, 781, 784, 787, 822, 849, 902, 903, 908, 977, 1063, 1078, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1176, 1183, 1213], "most": [40, 65, 103, 114, 115, 117, 128, 137, 138, 139, 140, 294, 516, 523, 540, 620, 741, 1069, 1078, 1159, 1213, 1220], "mandatori": [40, 294], "return_dtyp": [40, 153, 206, 294, 308, 503, 505, 506, 507, 554, 663, 704, 705, 706, 741, 859, 1063, 1064, 1088, 1213], "latter": [40, 169, 294, 977, 1213], "appropri": [40, 134, 255, 294, 550, 741, 1084, 1213], "pure": [40, 294, 1194, 1213], "actual": [40, 106, 144, 146, 233, 294, 1117, 1213], "indic": [40, 113, 114, 115, 116, 120, 122, 126, 128, 141, 142, 146, 183, 184, 186, 187, 230, 233, 238, 240, 253, 294, 319, 429, 440, 441, 442, 443, 445, 446, 447, 448, 450, 451, 452, 473, 489, 494, 511, 514, 559, 562, 563, 564, 565, 566, 568, 569, 570, 574, 576, 580, 645, 668, 669, 741, 778, 779, 781, 782, 805, 810, 811, 849, 852, 984, 998, 999, 1000, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1034, 1050, 1055, 1107, 1108, 1111, 1114, 1119, 1185, 1190, 1213, 1221], "calcul": [40, 78, 183, 245, 266, 294, 358, 413, 414, 415, 455, 468, 485, 501, 567, 583, 588, 654, 656, 673, 675, 718, 719, 722, 730, 741, 778, 816, 824, 849, 911, 972, 973, 974, 1017, 1029, 1046, 1100, 1122, 1126, 1202, 1213], "individu": [40, 59, 144, 150, 230, 255, 294, 507, 598, 741, 762, 805, 849, 891, 1137, 1213], "gridlin": [40, 294], "zoom": [40, 294], "freez": [40, 294], "pane": [40, 294], "top": [40, 155, 259, 294, 757, 820, 849], "index": [40, 104, 108, 111, 136, 152, 173, 179, 183, 184, 186, 187, 192, 193, 198, 200, 203, 221, 227, 228, 230, 231, 232, 240, 243, 255, 257, 264, 265, 271, 294, 302, 316, 317, 318, 320, 387, 429, 432, 462, 463, 473, 474, 489, 490, 494, 496, 559, 562, 563, 564, 565, 566, 568, 569, 570, 574, 576, 584, 597, 617, 645, 741, 778, 779, 781, 782, 787, 805, 811, 814, 823, 829, 849, 866, 867, 868, 869, 870, 945, 984, 1016, 1023, 1024, 1034, 1035, 1050, 1051, 1055, 1057, 1075, 1107, 1108, 1111, 1114, 1123, 1136, 1156, 1185, 1213], "thu": [40, 169, 294, 673, 977, 1213], "altern": [40, 294, 737], "a2": [40, 79, 81, 294], "occur": [40, 84, 85, 294, 466, 467, 523, 550, 741, 762, 763, 769, 771, 801, 813, 849, 1027, 1028, 1069, 1084, 1213], "equival": [40, 103, 105, 106, 107, 109, 118, 123, 124, 132, 183, 198, 217, 294, 301, 305, 411, 412, 426, 431, 433, 457, 502, 522, 524, 534, 535, 538, 544, 604, 641, 651, 658, 741, 778, 849, 1016, 1143, 1172, 1174, 1175, 1213], "top_row": [40, 294], "top_col": [40, 294], "base": [40, 46, 164, 172, 183, 184, 186, 187, 230, 294, 362, 370, 410, 413, 414, 415, 498, 499, 547, 559, 611, 632, 741, 767, 774, 778, 779, 781, 782, 805, 849, 852, 916, 924, 969, 972, 973, 974, 990, 1059, 1060, 1082, 1150, 1171, 1204, 1213, 1221], "scroll": [40, 294], "region": [40, 130, 294], "initit": [40, 294], "5th": [40, 294], "properti": [40, 152, 159, 165, 174, 190, 235, 239, 268, 294, 764, 768, 806, 825, 849, 852, 1221], "readthedoc": [40, 294], "io": [40, 130, 294, 765, 809, 849], "html": [40, 41, 42, 104, 116, 152, 160, 294], "definit": [40, 142, 294, 455, 741, 1017, 1213], "take": [40, 119, 125, 144, 150, 175, 177, 183, 186, 210, 213, 220, 221, 249, 255, 294, 387, 429, 430, 473, 586, 646, 674, 685, 686, 691, 693, 702, 741, 776, 778, 781, 797, 819, 849, 945, 984, 985, 1034, 1186, 1204, 1213], "care": [40, 294, 308, 507, 575, 741, 1112, 1213], "rel": [40, 117, 118, 129, 130, 137, 138, 139, 140, 294, 387, 413, 414, 415, 564, 566, 568, 570, 741, 945, 972, 973, 974, 1213], "working_with_conditional_format": [40, 294], "similarli": [40, 106, 183, 203, 230, 265, 294, 387, 391, 405, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 688, 689, 728, 729, 741, 778, 787, 805, 849, 945, 949, 963], "well": [40, 114, 115, 116, 128, 221, 294, 439, 741, 994, 1213], "adjac": [40, 294], "two": [40, 68, 69, 87, 88, 105, 107, 109, 117, 175, 212, 213, 221, 258, 274, 280, 294, 302, 359, 364, 429, 432, 496, 547, 585, 666, 667, 673, 675, 718, 719, 741, 796, 797, 831, 837, 849, 912, 918, 1057, 1082, 1213], "help": [40, 137, 138, 139, 140, 294, 771, 849], "where": [40, 63, 78, 116, 117, 143, 164, 169, 183, 200, 212, 232, 245, 264, 266, 294, 319, 407, 410, 412, 535, 553, 574, 583, 586, 588, 656, 669, 673, 675, 718, 719, 722, 730, 731, 741, 767, 778, 796, 816, 823, 824, 849, 869, 965, 969, 977, 1108, 1122, 1126, 1202, 1204, 1213, 1220], "appear": [40, 106, 294, 653, 741, 1199, 1213], "working_with_sparklin": [40, 294], "inject": [40, 78, 294], "locat": [40, 169, 227, 228, 257, 262, 294, 574, 741, 822, 849, 977, 984, 1107, 1108, 1111, 1185, 1213], "syntax": [40, 172, 206, 217, 294, 590, 597, 598, 612, 737, 774, 813, 849, 1129, 1136, 1137, 1151, 1213], "correctli": [40, 119, 294], "microsoft": [40, 294], "com": [40, 117, 294, 413, 414, 415, 597, 598, 599, 741, 972, 973, 974, 1136, 1137, 1138, 1213], "u": [40, 48, 50, 66, 133, 294, 363, 364, 371, 396, 408, 628, 630, 685, 686, 687, 688, 689, 690, 696, 852, 917, 918, 925, 954, 966, 1167, 1169], "offic": [40, 294], "f5ed2452": [40, 294], "2337": [40, 294], "4f71": [40, 294], "bed3": [40, 294], "c8ae6d2b276": [40, 294], "instanti": [40, 116, 236, 269, 294, 807, 826, 849], "basic": [40, 294, 1221], "random": [40, 41, 135, 142, 144, 146, 188, 234, 294, 434, 484, 550, 573, 579, 655, 741, 753, 988, 1045, 1084, 1106, 1118, 1201, 1213], "dtm": [40, 294, 364, 852, 918], "500": [40, 264, 294, 771, 823, 849, 933, 935, 943, 1095, 1096, 1098, 1213], "val": [40, 229, 294, 335, 507, 543, 649, 731, 741, 804, 849, 886], "10_000": [40, 294], "20_000": [40, 294], "30_000": [40, 294], "increas": [40, 78, 114, 126, 133, 294, 355, 741, 908, 1213], "b4": [40, 294], "light": [40, 294], "twice": [40, 119, 294], "titl": [40, 63, 294], "explicit": [40, 116, 128, 142, 264, 294, 716, 823, 849], "integr": [40, 294, 1221], "multi_fram": [40, 294], "wb": [40, 294], "coordin": [40, 294], "advanc": [40, 119, 221, 294, 496, 1057, 1221], "min_color": [40, 294], "76933c": [40, 294], "mid_color": [40, 294], "c4d79b": [40, 294], "max_color": [40, 294], "ebf1d": [40, 294], "data_bar_2010": [40, 294], "bar_color": [40, 294], "9bbb59": [40, 294], "bar_negative_color_sam": [40, 294], "bar_negative_border_color_sam": [40, 294], "white": [40, 294], "w": [40, 65, 66, 183, 186, 233, 294, 592, 597, 599, 660, 662, 778, 781, 849, 852, 1131, 1136, 1138, 1163], "get_worksheet_by_nam": [40, 294], "fmt_titl": [40, 294], "add_format": [40, 294], "4f6228": [40, 294], "font_siz": [40, 294], "12": [40, 78, 110, 143, 144, 183, 199, 203, 230, 241, 265, 294, 303, 339, 340, 348, 362, 364, 368, 372, 380, 382, 383, 384, 387, 388, 389, 391, 405, 406, 407, 454, 504, 540, 545, 549, 559, 569, 577, 578, 592, 606, 615, 631, 642, 677, 684, 685, 686, 687, 688, 689, 705, 728, 729, 741, 778, 783, 787, 790, 805, 812, 813, 818, 849, 852, 894, 895, 916, 918, 940, 949, 963, 1064, 1104, 1115, 1131, 1145, 1154, 1170, 1213, 1221], "ital": [40, 294], "customis": [40, 294], "trend": [40, 294], "win_loss": [40, 294], "subtl": [40, 294], "tone": [40, 294], "hidden": [40, 294], "id": [40, 86, 130, 260, 280, 294, 558, 612, 613, 653, 741, 837, 1092, 1199, 1213, 1221], "q1": [40, 294], "55": [40, 80, 294], "20": [40, 144, 169, 191, 193, 213, 220, 222, 226, 228, 294, 316, 317, 318, 358, 391, 405, 434, 438, 543, 554, 562, 563, 565, 696, 703, 728, 741, 797, 800, 849, 852, 911, 949, 963, 1088, 1213], "35": [40, 294, 358, 741, 911, 1213], "q2": [40, 294], "30": [40, 169, 183, 191, 220, 226, 228, 251, 269, 294, 316, 317, 318, 358, 364, 372, 380, 382, 383, 389, 390, 391, 398, 405, 406, 434, 578, 703, 728, 741, 778, 800, 826, 849, 852, 911, 918, 941, 948, 949, 956, 963, 1213, 1221], "60": [40, 169, 294, 392, 404, 569, 628, 741, 946, 950, 962, 1167], "q3": [40, 294], "40": [40, 136, 169, 220, 294, 391, 405, 434, 631, 741, 800, 849, 929, 963, 1170], "80": [40, 294], "q4": [40, 294], "75": [40, 161, 294, 305, 538, 547, 562, 563, 564, 565, 568, 569, 570, 706, 741, 910, 990, 1082, 1213, 1221], "account": [40, 110, 117, 130, 294, 387, 413, 414, 415, 741, 945, 972, 973, 974, 1213], "flavour": [40, 116, 294], "integer_dtyp": [40, 236, 294, 807, 849, 852], "0_": [40, 294], "just": [40, 128, 212, 294, 796, 849], "unifi": [40, 294, 852], "2_color_scal": [40, 294], "95b3d7": [40, 294], "ffffff": [40, 294], "standardis": [40, 294], "z": [40, 65, 86, 110, 142, 144, 167, 195, 197, 202, 212, 232, 233, 263, 294, 301, 303, 305, 335, 434, 464, 504, 507, 527, 528, 529, 530, 531, 538, 545, 553, 598, 628, 630, 642, 660, 662, 679, 708, 712, 717, 725, 741, 786, 796, 814, 849, 852, 886, 980, 1137, 1167, 1169, 1213, 1220], "score": [40, 294], "conjunct": [40, 87, 119, 125, 294], "a123": [40, 294], "b345": [40, 294], "c567": [40, 294], "d789": [40, 294], "e101": [40, 294], "45": [40, 136, 230, 294, 364, 372, 380, 391, 405, 559, 569, 592, 598, 639, 666, 667, 703, 728, 741, 805, 849, 852, 918, 949, 963, 1131, 1137, 1221], "85": [40, 294, 1221], "font": [40, 294], "consola": [40, 294], "stdev": [40, 294], "ipccompress": [41, 42, 294], "arrow": [41, 42, 58, 103, 104, 116, 117, 120, 122, 131, 200, 232, 233, 250, 252, 294, 849, 1189, 1194, 1213], "ipc": [41, 42, 58, 120, 121, 122, 131, 134, 294, 753, 849], "feather": [41, 120, 131, 294, 753], "access": [41, 79, 80, 81, 82, 130, 133, 152, 200, 231, 232, 294, 599, 828, 849, 1138, 1221], "doc": [41, 42, 117, 137, 139, 160, 294], "python": [41, 42, 62, 104, 114, 115, 116, 136, 137, 139, 152, 200, 206, 232, 233, 252, 280, 294, 308, 364, 503, 505, 507, 599, 685, 686, 688, 689, 728, 729, 731, 741, 747, 837, 859, 918, 930, 931, 932, 937, 1064, 1138, 1193, 1213], "lz4": [41, 42, 45, 58, 59, 294, 849], "zstd": [41, 42, 45, 58, 59, 294, 849], "batch": [42, 112, 115, 116, 122, 132, 134, 294, 762, 791, 792, 849], "pretti": [43, 294], "row_ori": [43, 294], "iobas": [43, 44, 123, 124, 294, 520, 765, 809, 849], "serial": [43, 44, 294, 765, 849], "orient": [43, 79, 81, 107, 109, 294, 849], "slower": [43, 107, 109, 119, 182, 185, 206, 219, 265, 280, 294, 507, 706, 741, 777, 780, 837, 849, 1064, 1213], "common": [43, 78, 84, 85, 86, 264, 294, 504, 527, 741, 747, 762, 763, 769, 771, 801, 813, 823, 849], "write_ndjson": [43, 294], "bit_set": [43, 294, 809, 849], "newlin": [44, 124, 132, 294], "delimit": [44, 57, 124, 132, 221, 253, 294, 589, 849, 1128, 1190, 1213], "parquetcompress": [45, 294], "compression_level": [45, 59, 294, 849], "statist": [45, 59, 114, 115, 126, 133, 161, 294, 414, 415, 455, 562, 563, 564, 565, 566, 567, 568, 569, 570, 583, 741, 849, 910, 973, 974, 1017, 1100, 1122, 1213], "row_group_s": [45, 59, 294, 849], "data_page_s": [45, 294], "use_pyarrow": [45, 114, 120, 122, 126, 255, 294, 1193, 1194, 1213], "pyarrow_opt": [45, 118, 126, 129, 294], "parquet": [45, 59, 126, 127, 133, 294, 753, 849], "gzip": [45, 59, 294, 849], "lzo": [45, 59, 294, 849], "brotli": [45, 59, 294, 849], "choos": [45, 58, 59, 183, 221, 294, 778, 849], "good": [45, 58, 59, 200, 294, 849], "perform": [45, 58, 59, 78, 94, 104, 114, 115, 116, 120, 126, 128, 131, 132, 133, 152, 155, 182, 183, 184, 185, 186, 187, 203, 206, 207, 209, 214, 224, 230, 233, 246, 259, 280, 294, 308, 496, 507, 539, 559, 603, 604, 628, 629, 630, 741, 757, 778, 779, 781, 782, 787, 805, 815, 820, 829, 849, 1064, 1142, 1143, 1167, 1168, 1169, 1213], "fast": [45, 58, 59, 145, 147, 294, 419, 575, 741, 849, 978, 1112, 1213, 1221], "decompress": [45, 58, 59, 294, 849], "backward": [45, 59, 171, 203, 294, 326, 384, 421, 741, 773, 787, 849, 942, 980, 1213], "guarante": [45, 59, 104, 114, 115, 188, 261, 294, 434, 741, 771, 821, 849, 987, 988, 1213], "deal": [45, 59, 200, 294, 304, 306, 390, 391, 405, 550, 628, 630, 659, 661, 687, 741, 849, 856, 857, 948, 949, 963, 1084, 1167, 1169, 1213], "older": [45, 59, 294, 849], "reader": [45, 59, 112, 114, 115, 120, 122, 126, 294, 754, 849], "higher": [45, 59, 223, 286, 294, 548, 566, 715, 741, 802, 843, 849, 1083, 1099, 1213], "mean": [45, 59, 114, 115, 120, 126, 128, 161, 171, 182, 183, 203, 210, 221, 230, 265, 273, 294, 387, 391, 405, 418, 421, 559, 562, 563, 564, 565, 566, 568, 569, 570, 583, 597, 685, 686, 688, 689, 690, 728, 729, 731, 741, 773, 777, 778, 787, 791, 792, 805, 830, 849, 910, 945, 949, 963, 976, 980, 987, 1096, 1122, 1136, 1213], "smaller": [45, 59, 167, 294, 771, 849, 971, 1213], "disk": [45, 57, 58, 59, 120, 294, 813, 849], "22": [45, 59, 143, 294, 368, 388, 391, 405, 407, 408, 561, 562, 563, 565, 568, 569, 570, 628, 741, 849, 852, 949, 963, 966, 1094, 1167, 1213, 1221], "comput": [45, 59, 84, 86, 91, 167, 182, 203, 256, 261, 273, 286, 294, 300, 310, 311, 312, 313, 314, 315, 321, 322, 323, 336, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 359, 410, 417, 455, 480, 481, 482, 485, 486, 487, 488, 498, 499, 500, 523, 539, 540, 546, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 580, 581, 582, 583, 587, 647, 648, 655, 660, 662, 666, 667, 668, 673, 675, 691, 718, 719, 731, 741, 762, 777, 784, 786, 787, 821, 828, 830, 843, 849, 854, 860, 861, 862, 863, 864, 865, 871, 872, 873, 889, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 912, 969, 971, 975, 1017, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1059, 1060, 1061, 1069, 1078, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1119, 1120, 1121, 1122, 1125, 1187, 1188, 1195, 1201, 1213], "512": [45, 116, 200, 294, 544, 741, 1078, 1213], "page": [45, 59, 120, 126, 131, 133, 294, 741, 753, 849, 1213], "implement": [45, 104, 116, 152, 188, 206, 280, 294, 434, 454, 507, 526, 528, 529, 530, 531, 545, 642, 706, 741, 837, 988, 1064, 1107, 1110, 1213], "At": [45, 294], "moment": [45, 160, 294, 455, 583, 741, 1017, 1122, 1213], "write_t": [45, 294], "partition_col": [45, 117, 294], "write_to_dataset": [45, 294], "similar": [45, 148, 175, 203, 240, 294, 394, 397, 489, 539, 558, 576, 731, 741, 771, 787, 811, 849, 952, 955, 1050, 1092, 1114, 1213], "spark": [45, 294], "partit": [45, 117, 118, 126, 129, 133, 134, 201, 219, 294], "we": [45, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 127, 128, 133, 183, 203, 230, 265, 294, 387, 391, 405, 470, 496, 505, 507, 559, 562, 563, 564, 565, 566, 568, 569, 570, 599, 611, 632, 685, 686, 688, 689, 703, 728, 729, 731, 741, 765, 778, 787, 791, 792, 805, 849, 859, 945, 949, 963, 990, 1031, 1064, 1138, 1150, 1171, 1213], "use_pyarrow_write_to_dataset": [45, 294], "first": [45, 78, 114, 115, 119, 123, 128, 132, 137, 138, 139, 140, 143, 153, 181, 183, 186, 189, 203, 205, 206, 216, 220, 221, 248, 253, 254, 260, 261, 265, 278, 294, 318, 320, 355, 358, 384, 387, 391, 435, 442, 443, 459, 468, 470, 474, 475, 496, 506, 516, 543, 554, 574, 586, 597, 600, 602, 612, 613, 670, 674, 676, 694, 698, 731, 741, 762, 778, 781, 783, 787, 790, 800, 821, 828, 835, 849, 852, 868, 908, 910, 911, 942, 945, 949, 989, 999, 1000, 1019, 1029, 1031, 1035, 1036, 1057, 1063, 1108, 1136, 1138, 1139, 1141, 1151, 1152, 1184, 1192, 1213, 1221], "watermark": [45, 294], "partitioned_object": [45, 294], "calendar": [47, 48, 183, 203, 230, 265, 294, 375, 387, 391, 405, 409, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 688, 689, 690, 728, 729, 741, 778, 787, 805, 849, 929, 945, 949, 963, 967], "time_unit": [48, 50, 363, 364, 371, 396, 408, 630, 685, 686, 687, 688, 689, 690, 696, 852, 917, 918, 925, 954, 966, 1169], "time_zon": [48, 365, 390, 630, 685, 686, 687, 688, 689, 852, 916, 919, 924, 948, 1169], "timezon": [48, 852], "m": [48, 50, 66, 202, 294, 362, 363, 364, 370, 371, 394, 396, 397, 408, 597, 628, 629, 630, 634, 685, 686, 687, 688, 689, 690, 696, 786, 849, 852, 916, 917, 918, 924, 925, 952, 954, 955, 966, 1136, 1167, 1168, 1169, 1173], "zoneinfo": [48, 852], "run": [48, 57, 58, 59, 84, 85, 145, 147, 182, 185, 204, 206, 221, 237, 261, 270, 280, 294, 308, 355, 470, 507, 557, 558, 604, 720, 741, 762, 763, 769, 771, 777, 780, 791, 792, 796, 801, 808, 813, 821, 827, 849, 852, 908, 1031, 1064, 1091, 1092, 1143, 1213, 1220, 1221], "available_timezon": [48, 852], "check": [48, 114, 115, 128, 137, 138, 139, 140, 149, 166, 176, 183, 184, 186, 187, 196, 198, 202, 230, 294, 327, 330, 331, 439, 444, 465, 559, 590, 595, 621, 741, 778, 779, 781, 782, 786, 791, 792, 805, 849, 876, 879, 880, 970, 995, 997, 1001, 1002, 1004, 1011, 1012, 1013, 1015, 1016, 1026, 1109, 1129, 1134, 1160, 1213], "128": [49, 80, 1078, 1213], "bit": [49, 51, 52, 53, 54, 55, 56, 72, 73, 74, 75, 552, 590, 741, 1086, 1129, 1213], "experiment": [49, 85, 134, 263, 264, 294, 355, 391, 507, 562, 563, 564, 565, 566, 568, 569, 570, 741, 763, 849, 888, 908, 949, 990, 1082, 1213], "progress": 49, "expect": [49, 95, 97, 102, 114, 116, 128, 496, 507, 703, 741, 789, 791, 792, 849], "32": [51, 54, 73, 80, 198, 230, 294, 524, 559, 578, 741, 805, 849, 912, 946, 1078, 1099, 1213], "sign": [53, 54, 55, 56, 387, 552, 637, 741, 852, 945, 1004, 1086, 1176, 1213], "maintain_ord": [57, 58, 59, 155, 182, 185, 219, 221, 259, 261, 265, 274, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 294, 302, 325, 429, 432, 497, 507, 652, 674, 741, 757, 763, 769, 771, 777, 780, 801, 813, 815, 820, 821, 831, 833, 834, 836, 838, 839, 840, 841, 842, 843, 844, 849, 875, 1058, 1198, 1213], "type_coercion": [57, 58, 59, 84, 85, 762, 763, 769, 771, 801, 813, 849], "predicate_pushdown": [57, 58, 59, 84, 85, 762, 763, 769, 771, 791, 792, 801, 813, 849], "projection_pushdown": [57, 58, 59, 84, 85, 762, 763, 769, 771, 791, 792, 801, 813, 849], "simplify_express": [57, 58, 59, 84, 85, 762, 763, 769, 771, 801, 813, 849], "slice_pushdown": [57, 58, 59, 84, 85, 762, 763, 769, 771, 791, 792, 801, 813, 849], "no_optim": [57, 58, 59, 84, 85, 762, 763, 771, 791, 792, 801, 849], "evalu": [57, 58, 59, 170, 172, 203, 294, 305, 319, 355, 437, 460, 461, 496, 538, 554, 659, 661, 665, 669, 685, 686, 688, 689, 691, 700, 701, 714, 717, 723, 728, 729, 731, 732, 741, 762, 774, 784, 786, 787, 849, 869, 908, 1021, 1022, 1088, 1204, 1213], "queri": [57, 58, 59, 63, 65, 84, 85, 116, 117, 120, 128, 131, 132, 133, 169, 204, 220, 294, 505, 507, 554, 602, 741, 762, 763, 769, 771, 783, 790, 801, 813, 829, 832, 837, 849, 977, 1064, 1088, 1141, 1213, 1220], "ram": [57, 58, 59, 849], "maintain": [57, 58, 59, 155, 259, 294, 325, 497, 574, 652, 741, 757, 815, 820, 849, 875, 1058, 1108, 1198, 1213], "slightli": [57, 58, 59, 119, 849], "faster": [57, 58, 59, 116, 169, 255, 263, 294, 308, 507, 653, 741, 849, 859, 977, 1064, 1213], "coercion": [57, 58, 59, 84, 85, 553, 741, 762, 763, 769, 771, 801, 813, 849], "optim": [57, 58, 59, 84, 85, 126, 128, 131, 132, 133, 200, 204, 220, 224, 232, 261, 294, 762, 763, 769, 771, 791, 792, 801, 813, 821, 829, 837, 849, 889, 1107, 1213], "predic": [57, 58, 59, 84, 85, 128, 131, 132, 133, 134, 172, 198, 231, 294, 422, 657, 694, 731, 741, 762, 763, 769, 771, 774, 791, 792, 801, 803, 813, 829, 849, 981, 1107, 1110, 1213], "pushdown": [57, 58, 59, 84, 85, 762, 763, 769, 771, 791, 792, 801, 803, 813, 829, 849, 1107, 1110, 1213], "project": [57, 58, 59, 84, 85, 128, 130, 131, 132, 133, 308, 585, 586, 741, 762, 763, 769, 771, 791, 792, 801, 803, 809, 813, 849], "slice": [57, 58, 59, 79, 84, 85, 167, 189, 201, 248, 294, 475, 493, 507, 515, 517, 560, 562, 563, 564, 565, 566, 568, 569, 570, 741, 762, 763, 769, 771, 791, 792, 801, 813, 849, 971, 989, 1036, 1054, 1093, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1184, 1213], "off": [57, 58, 59, 84, 85, 114, 115, 128, 762, 763, 769, 771, 791, 792, 801, 849], "certain": [57, 58, 59, 85, 93, 118, 129, 192, 193, 265, 294, 624, 625, 762, 763, 801, 849, 1213], "lf": [57, 58, 59, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 783, 784, 785, 786, 788, 789, 790, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 811, 813, 814, 815, 816, 817, 818, 820, 821, 823, 824, 825, 826, 828, 829, 849, 1220, 1221], "scan_csv": [57, 58, 59, 114, 115, 849], "my_larger_than_ram_fil": [57, 58, 59, 849], "data_pagesize_limit": [59, 849], "reduc": [59, 114, 115, 126, 128, 131, 132, 133, 281, 282, 284, 287, 578, 677, 694, 741, 838, 839, 841, 844, 849, 1066, 1081, 1116, 1183, 1213], "pressur": [59, 114, 115, 126, 128, 132, 133, 578, 741, 849, 1116, 1213], "improv": [59, 120, 131, 849], "speed": [59, 308, 507, 741, 849, 1221], "integer_list": 60, "float_list": 60, "wrap": [62, 110, 439, 741], "arbitrari": [62, 144, 852], "eager": [63, 64, 65, 66, 67, 68, 183, 221, 263, 294, 363, 365, 368, 371, 376, 383, 384, 387, 388, 390, 391, 396, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 562, 563, 565, 568, 569, 570, 665, 669, 685, 686, 688, 689, 696, 700, 701, 714, 717, 723, 728, 729, 732, 740, 741, 778, 792, 849, 916, 917, 919, 922, 924, 925, 926, 932, 933, 935, 938, 940, 941, 942, 943, 945, 946, 947, 948, 949, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 1220], "against": [63, 116, 470, 849, 1031, 1220, 1221], "eagerli": [63, 496], "unset": [63, 143, 390, 496, 948], "init": [63, 150], "eager_execut": [63, 1220], "itself": [63, 142, 507, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 718, 719, 741, 789, 849, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1213, 1220], "impact": [63, 183, 186, 294, 778, 781, 849, 1220], "declar": [63, 103, 105, 106, 107, 109, 116, 123, 124, 132, 294, 849], "godfath": 63, "1972": 63, "6_000_000": 63, "134_821_952": 63, "dark": 63, "knight": 63, "2008": 63, "185_000_000": 63, "533_316_061": 63, "schindler": 63, "1993": 63, "22_000_000": 63, "96_067_179": 63, "pulp": 63, "fiction": 63, "1994": 63, "8_000_000": 63, "107_930_000": 63, "shawshank": 63, "redempt": 63, "25_000_000": 63, "28_341_469": 63, "release_year": 63, "budget": 63, "gross": 63, "imdb_scor": 63, "ctx": [63, 64, 65, 66, 67, 68], "film": 63, "1990": 63, "BY": [63, 65], "desc": [63, 65], "AS": [63, 721, 1220], "decad": 63, "total_gross": 63, "n_film": 63, "2000": [63, 374, 376, 383, 384, 387, 392, 852, 928, 941, 942, 945, 950], "533316061": 63, "232338648": 63, "1970": [63, 134], "134821952": 63, "register_glob": [64, 66, 68, 1220], "register_mani": [64, 65, 68], "unregist": [64, 65, 66, 1220], "frame_data": [64, 67], "execut": [64, 65, 67, 69, 86, 116, 204, 294, 470, 655, 741, 758, 791, 792, 801, 849, 1031, 1201, 1213, 1220], "collect": [64, 65, 68, 81, 84, 85, 128, 129, 130, 134, 144, 146, 162, 164, 204, 221, 250, 261, 262, 294, 416, 444, 507, 671, 692, 696, 723, 741, 756, 757, 759, 763, 765, 766, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 783, 785, 786, 787, 788, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 807, 809, 811, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 826, 828, 829, 830, 831, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 849, 852, 1002, 1213, 1220, 1221], "global": [65, 69, 87, 88, 135, 144, 149, 255, 294, 554, 741, 885, 887, 1088, 1213, 1220], "scope": [65, 68, 150, 752, 852, 1220], "map": [65, 66, 105, 106, 114, 115, 116, 117, 120, 121, 126, 127, 128, 131, 156, 165, 174, 200, 206, 225, 231, 232, 233, 251, 294, 303, 391, 405, 504, 505, 506, 507, 526, 539, 554, 558, 655, 705, 741, 759, 768, 803, 849, 852, 910, 949, 963, 1063, 1064, 1088, 1092, 1201, 1213, 1220], "recent": [65, 137, 138, 139, 140, 540, 741, 1078, 1213, 1220], "df1": [65, 67, 68, 78, 86, 137, 138, 166, 169, 213, 256, 267, 294, 797, 849], "df2": [65, 67, 68, 78, 86, 137, 138, 166, 169, 256, 267, 294], "join": [65, 69, 78, 84, 85, 86, 88, 203, 264, 294, 438, 539, 741, 762, 763, 769, 771, 787, 801, 813, 823, 828, 849], "named_fram": [66, 1220], "lf1": [66, 68], "o": [66, 120, 131, 332, 355, 596, 650, 741, 881, 908, 1135, 1162, 1197, 1213], "lf2": [66, 68, 849], "p": [66, 80, 220, 294, 543, 723, 741, 800, 849], "q": [66, 233, 294, 723], "r": [66, 114, 115, 128, 543, 592, 596, 597, 598, 599, 612, 741, 852, 1131, 1135, 1136, 1137, 1138, 1151], "lf3": [66, 849], "lf4": [66, 849], "either": [66, 144, 198, 203, 204, 207, 209, 214, 219, 230, 231, 246, 255, 294, 547, 559, 628, 659, 668, 723, 741, 787, 789, 805, 849, 852, 1082, 1167, 1213, 1221], "tbl1": [66, 68], "tbl2": [66, 68], "tbl3": 66, "tbl4": 66, "statement": [67, 731], "hello_world": 67, "baz": [67, 193, 194, 221, 262, 294, 599, 618, 620, 737, 785, 822, 849, 852, 1138, 1159], "hello_data": 67, "foo_bar": [67, 511, 514, 618, 703], "registr": [68, 753], "lifetim": [68, 150, 752], "context": [68, 69, 87, 88, 148, 217, 276, 294, 302, 308, 344, 422, 458, 470, 478, 505, 507, 515, 585, 586, 655, 663, 674, 693, 696, 702, 706, 717, 720, 740, 741, 752, 753, 828, 833, 849, 1018, 1031, 1039, 1201, 1213, 1220], "manag": [68, 69, 87, 88, 752, 753, 1220], "often": [68, 150, 183, 184, 186, 187, 230, 294, 466, 467, 553, 559, 741, 778, 779, 781, 782, 805, 849, 1027, 1028], "want": [68, 85, 106, 169, 206, 217, 294, 422, 505, 507, 558, 562, 563, 564, 565, 566, 568, 569, 570, 603, 676, 685, 694, 714, 717, 732, 741, 763, 783, 790, 849, 852, 977, 1064, 1092, 1142, 1213], "df0": [68, 213, 294, 797, 849], "exit": [68, 69, 87, 150, 1220], "construct": [68, 69, 87, 88, 103, 105, 106, 107, 108, 109, 116, 294, 428, 554, 714, 717, 732, 737, 741, 765, 849, 885, 1213], "persist": [68, 849], "through": [68, 104, 116, 737, 852, 1213], "tbl0": 68, "remain": [68, 114, 115, 128, 164, 167, 172, 294, 360, 361, 422, 469, 554, 619, 620, 741, 767, 774, 791, 792, 849, 913, 914, 971, 981, 1030, 1088, 1158, 1159, 1213], "text": [68, 116, 603, 604, 612, 613, 614, 721, 1142, 1143, 1153, 1221], "misc": 68, "testing1234": 68, "test1": 68, "test2": 68, "test3": 68, "disabl": [69, 87, 88, 200, 294, 762, 849], "cach": [69, 84, 85, 87, 88, 120, 128, 131, 133, 137, 138, 139, 140, 149, 554, 562, 563, 564, 565, 566, 568, 569, 570, 628, 629, 630, 634, 741, 752, 762, 763, 769, 771, 801, 813, 849, 885, 1088, 1167, 1168, 1169, 1173, 1213], "under": [69, 79, 80, 81, 82, 87, 88, 733, 734, 736, 737, 742, 743, 746, 748, 749, 750, 1205, 1207, 1209, 1214, 1217, 1218, 1219], "physic": [69, 88, 114, 115, 203, 294, 335, 649, 741, 758, 786, 787, 849, 886, 887, 1196, 1213], "equal": [69, 88, 114, 115, 116, 128, 137, 138, 139, 140, 155, 176, 183, 186, 203, 213, 259, 294, 356, 405, 411, 412, 431, 457, 496, 535, 547, 553, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 609, 610, 637, 718, 719, 731, 737, 741, 757, 778, 781, 787, 797, 815, 820, 849, 909, 949, 1057, 1082, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1109, 1148, 1149, 1176, 1213, 1221], "concaten": [69, 86, 87, 88, 175, 220, 294, 543, 671, 672, 741, 800, 849, 891, 1070, 1213], "introduc": [69, 88, 628, 629, 630, 1167, 1168, 1169], "overhead": [69, 88, 128, 131, 132, 133], "amount": [69, 88, 308, 507, 690, 741], "depend": [69, 83, 88, 116, 136, 462, 463, 507, 515, 547, 550, 674, 690, 693, 696, 702, 741, 1023, 1024, 1082, 1084, 1213, 1221], "categori": [69, 88, 253, 294, 334, 335, 356, 547, 741, 884, 886, 909, 990, 1082, 1213], "nest": [69, 110, 126, 167, 294, 753, 971, 1213, 1220, 1221], "clear": [69, 87, 158, 294, 761, 849, 896, 1213], "outermost": 69, "s1": [69, 87, 88, 139, 140, 175, 294, 970, 1016, 1057, 1195, 1204, 1213], "color": [69, 87, 88, 280, 327, 329, 330, 331, 655, 741, 837, 1201, 1213], "red": [69, 87, 88, 280, 655, 741, 837, 1201, 1213], "green": [69, 87, 88, 280, 655, 741, 837, 1201, 1213], "blue": [69, 87, 88, 327, 329, 330, 331, 655, 741, 1201, 1213], "concat": [69, 87, 88, 115, 891, 1070, 1213], "cat": [69, 87, 88, 254, 294, 356, 547, 590, 592, 633, 636, 649, 672, 736, 741, 852, 909, 990, 1082, 1129, 1131, 1172, 1175, 1209, 1213], "decor": [69, 79, 80, 81, 82, 144, 146, 206, 294, 507, 741, 752, 753, 1064, 1213], "dure": [69, 114, 115, 128, 150, 169, 294, 977, 1213], "afterward": [69, 731], "construct_categor": 69, "schemadict": [70, 103, 105, 106, 107, 108, 109, 114, 116, 117, 119, 125, 128, 294, 723, 791, 792, 832, 837, 849], "composit": [70, 143, 1221], "struct_seri": [70, 837], "dai": [71, 183, 186, 201, 203, 230, 265, 294, 383, 384, 387, 388, 391, 398, 405, 407, 559, 562, 563, 564, 565, 566, 568, 569, 570, 684, 685, 686, 687, 688, 689, 690, 728, 729, 741, 778, 781, 787, 805, 849, 852, 941, 942, 945, 946, 949, 956, 963, 965], "static": [76, 832, 837], "frametyp": [78, 1220], "joinstrategi": [78, 202, 294, 786, 849], "outer": [78, 86, 202, 264, 294, 786, 823, 849], "descend": [78, 155, 238, 244, 259, 294, 318, 491, 550, 575, 585, 586, 655, 668, 741, 757, 810, 815, 820, 849, 868, 1012, 1052, 1084, 1112, 1124, 1201, 1213], "fill": [78, 86, 157, 170, 171, 240, 241, 263, 294, 326, 346, 349, 420, 421, 427, 438, 562, 563, 565, 569, 576, 577, 606, 615, 695, 714, 717, 732, 741, 772, 773, 811, 812, 828, 849, 979, 980, 993, 1075, 1095, 1096, 1098, 1101, 1102, 1103, 1114, 1115, 1145, 1154, 1213], "sort": [78, 79, 137, 138, 143, 155, 183, 184, 186, 187, 203, 213, 220, 221, 230, 238, 259, 265, 278, 288, 294, 318, 335, 422, 507, 539, 559, 562, 563, 564, 565, 566, 568, 569, 570, 575, 586, 655, 657, 668, 706, 741, 757, 769, 778, 779, 781, 782, 787, 797, 800, 801, 805, 810, 813, 820, 835, 845, 849, 852, 868, 886, 1012, 1112, 1198, 1201, 1213, 1221], "origin": [78, 114, 115, 128, 164, 172, 261, 294, 360, 361, 390, 391, 405, 422, 454, 469, 506, 526, 539, 552, 553, 554, 555, 591, 592, 597, 602, 666, 667, 741, 767, 774, 821, 849, 909, 913, 914, 948, 949, 963, 981, 1030, 1063, 1082, 1088, 1089, 1130, 1131, 1136, 1141, 1213], "In": [78, 85, 116, 118, 129, 130, 133, 144, 146, 150, 167, 169, 183, 184, 186, 187, 206, 217, 230, 255, 294, 507, 559, 685, 741, 763, 778, 779, 781, 782, 805, 849, 971, 977, 1085, 1213], "duplic": [78, 92, 195, 202, 203, 261, 264, 294, 303, 440, 454, 526, 547, 741, 786, 787, 821, 823, 849, 996, 1082, 1213], "suitabl": [78, 86, 116, 142, 206, 294, 507, 574, 741, 1064, 1108, 1213, 1221], "get": [78, 85, 111, 121, 127, 134, 148, 155, 159, 165, 174, 178, 180, 183, 184, 186, 187, 189, 190, 195, 197, 198, 205, 208, 215, 216, 221, 230, 231, 235, 239, 243, 248, 259, 268, 278, 288, 294, 302, 316, 317, 318, 320, 325, 334, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 371, 423, 429, 435, 453, 456, 459, 472, 477, 497, 508, 509, 510, 515, 517, 521, 532, 533, 541, 542, 548, 557, 559, 584, 588, 643, 644, 652, 656, 693, 698, 702, 706, 707, 708, 709, 710, 711, 712, 722, 726, 730, 741, 757, 763, 764, 768, 775, 778, 779, 781, 782, 783, 788, 790, 805, 806, 814, 818, 820, 825, 835, 845, 849, 866, 867, 868, 869, 870, 875, 884, 891, 900, 901, 902, 903, 904, 905, 906, 907, 925, 986, 989, 994, 996, 1014, 1019, 1033, 1038, 1058, 1065, 1067, 1068, 1070, 1073, 1074, 1079, 1080, 1083, 1091, 1123, 1126, 1184, 1189, 1190, 1198, 1202, 1203, 1213], "speedup": [78, 200, 206, 294, 507, 741, 1064, 1213], "receiv": [78, 116, 128, 206, 220, 280, 294, 507, 543, 741, 800, 849, 1221], "now": [78, 230, 294, 405, 805, 849, 949, 963, 1169], "One": [78, 161, 217, 221, 294, 305, 538, 721, 741, 852, 910, 1213], "whose": [78, 203, 221, 294, 416, 692, 741, 787, 849, 852], "uniqu": [78, 141, 142, 143, 146, 154, 197, 202, 217, 221, 233, 285, 294, 309, 320, 356, 453, 525, 547, 628, 629, 630, 634, 653, 655, 664, 713, 741, 756, 786, 842, 849, 870, 909, 910, 1014, 1071, 1082, 1167, 1168, 1169, 1173, 1199, 1201, 1213], "post": 78, "constrain": [78, 164, 294, 767, 849], "newli": 78, "boolean": [78, 155, 172, 175, 204, 244, 259, 294, 304, 305, 306, 327, 330, 331, 374, 422, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 460, 461, 465, 536, 538, 541, 542, 586, 600, 657, 658, 668, 669, 723, 731, 741, 757, 761, 774, 789, 815, 820, 849, 852, 856, 857, 869, 876, 878, 928, 981, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1014, 1021, 1022, 1026, 1076, 1079, 1080, 1110, 1129, 1194, 1204, 1213], "know": [78, 116, 221, 294, 496, 1203, 1213], "2022": [78, 156, 161, 181, 294, 364, 372, 380, 391, 405, 628, 685, 686, 688, 690, 696, 759, 849, 852, 918, 929, 949, 963, 1167], "df3": [78, 294], "set_tbl_format": 78, "09": [78, 144, 230, 294, 364, 383, 384, 559, 631, 685, 729, 741, 805, 849, 852, 1170], "02": [78, 156, 181, 183, 230, 265, 294, 363, 364, 371, 383, 384, 387, 390, 396, 399, 402, 404, 408, 559, 562, 563, 565, 568, 569, 570, 571, 628, 629, 630, 634, 685, 686, 688, 690, 741, 759, 778, 805, 849, 852, 917, 918, 920, 921, 925, 926, 932, 933, 938, 941, 942, 943, 948, 949, 953, 954, 957, 960, 962, 963, 1057, 1167, 1168, 1169, 1173], "03": [78, 110, 156, 183, 230, 265, 294, 363, 364, 365, 371, 383, 384, 387, 390, 391, 392, 394, 396, 397, 398, 399, 402, 404, 405, 408, 559, 562, 563, 565, 568, 569, 570, 629, 634, 685, 686, 688, 690, 741, 759, 778, 805, 849, 917, 918, 919, 925, 926, 932, 933, 941, 942, 943, 948, 949, 952, 954, 955, 956, 957, 960, 962, 1168, 1173], "af1": 78, "af2": 78, "af3": 78, "keep": [78, 114, 115, 128, 261, 264, 265, 294, 454, 506, 519, 527, 554, 670, 741, 821, 823, 849, 1063, 1088, 1213], "easili": [78, 116, 236, 269, 273, 294, 723, 807, 826, 830, 849], "dot": [78, 741, 813, 849, 1213], "product": [78, 160, 294, 348, 353, 359, 741, 771, 849, 902, 906, 912, 1213], "fill_nul": [78, 170, 294, 741, 772, 828, 849, 1213], "sum_horizont": [78, 246, 294, 724], "167": 78, "47": 78, "callabl": [79, 80, 81, 82, 128, 153, 175, 206, 220, 275, 280, 294, 308, 496, 503, 504, 505, 507, 527, 543, 560, 561, 663, 676, 677, 680, 681, 694, 704, 705, 706, 716, 741, 791, 792, 800, 832, 837, 849, 859, 1057, 1064, 1093, 1094, 1213], "by_first_letter_of_column_nam": 79, "f": [79, 115, 161, 181, 201, 250, 260, 263, 294, 301, 496, 578, 596, 628, 630, 663, 671, 704, 741, 1057, 1135, 1167, 1169], "fromkei": [79, 81], "by_first_letter_of_column_valu": 79, "starts_with": [79, 327, 330, 590, 595, 852, 1134], "to_seri": [79, 178, 294, 628, 669, 717, 1167], "xy": [79, 81], "yz": [79, 81], "b1": [79, 81], "b2": [79, 81], "pow_n": 80, "powersofn": 80, "next": [80, 183, 203, 230, 265, 294, 326, 387, 391, 405, 550, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 688, 689, 728, 729, 741, 778, 787, 805, 849, 945, 949, 963, 1084, 1213], "ceil": [80, 741, 1213], "previou": [80, 150, 528, 529, 540, 545, 640, 642, 741, 1078, 1213], "floor": [80, 741, 1213], "nearest": [80, 203, 223, 286, 294, 337, 425, 438, 548, 566, 715, 741, 787, 802, 843, 849, 890, 983, 993, 1083, 1099, 1213], "24": [80, 167, 183, 203, 206, 230, 265, 294, 348, 355, 368, 387, 388, 391, 399, 405, 407, 524, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 688, 689, 690, 728, 729, 741, 778, 787, 805, 849, 908, 945, 949, 957, 963, 1016, 1213], "001": [80, 376, 400, 401, 403, 637, 690, 958, 959, 961, 1176], "next_pow2": 80, "prev_pow2": 80, "nearest_pow2": 80, "split_by_column_dtyp": 81, "collect_al": [81, 85, 762, 763, 849], "31": [82, 144, 364, 368, 372, 380, 383, 387, 398, 628, 684, 687, 696, 703, 852, 916, 918, 922, 941, 956, 1167, 1221], "42": [82, 188, 213, 230, 294, 559, 741, 797, 805, 849, 988, 1213], "961": 82, "1764": 82, "4160": 82, "build": [83, 104, 852, 1221], "wa": [83, 137], "compil": [83, 462, 463, 1023, 1024], "gate": 83, "info": [83, 118, 129, 130, 136], "host": [83, 114, 120, 122, 126, 131, 133], "git": 83, "lazy_fram": [84, 85], "iter": [84, 85, 86, 103, 116, 145, 147, 155, 172, 182, 183, 184, 185, 186, 187, 199, 200, 201, 230, 231, 232, 233, 236, 237, 238, 244, 259, 260, 269, 270, 272, 273, 294, 355, 539, 586, 660, 662, 668, 670, 671, 672, 679, 683, 708, 712, 720, 723, 725, 731, 737, 741, 757, 774, 777, 778, 779, 780, 781, 782, 805, 807, 808, 810, 815, 820, 826, 827, 830, 849, 908, 1213, 1221], "comm_subplan_elim": [84, 85, 762, 763, 769, 771, 801, 813, 849], "comm_subexpr_elim": [84, 85, 762, 763, 769, 771, 801, 813, 849], "graph": [84, 204, 294, 762, 784, 828, 849], "parallel": [84, 86, 112, 117, 126, 133, 183, 186, 203, 204, 220, 237, 270, 294, 355, 470, 655, 731, 741, 753, 778, 781, 786, 787, 808, 827, 837, 849, 908, 1031, 1201, 1213], "threadpool": [84, 148], "Will": [84, 85, 762, 763, 769, 771, 801, 813, 849, 1213], "try": [84, 85, 98, 100, 114, 115, 120, 126, 128, 131, 133, 762, 763, 769, 771, 801, 813, 849], "branch": [84, 85, 762, 763, 769, 771, 801, 813, 849], "subplan": [84, 85, 762, 763, 769, 771, 801, 813, 849], "union": [84, 85, 86, 488, 762, 763, 769, 771, 801, 813, 849, 852, 1049], "subexpress": [84, 85, 762, 763, 769, 771, 801, 813, 849], "reus": [84, 85, 762, 763, 769, 771, 801, 813, 849], "part": [84, 85, 103, 119, 144, 598, 619, 620, 763, 769, 771, 801, 813, 828, 849, 1137, 1158, 1159], "fashion": [84, 85, 202, 294, 763, 769, 771, 801, 813, 849], "alpha": [84, 85, 308, 413, 414, 415, 741, 762, 763, 769, 771, 801, 813, 849, 972, 973, 974, 1213], "gevent": [85, 136, 763, 849], "_geventdataframeresult": [85, 763, 849], "await": [85, 763, 849], "asynchron": [85, 763, 849], "them": [85, 103, 105, 106, 107, 109, 123, 124, 125, 128, 132, 133, 168, 169, 183, 203, 213, 230, 265, 294, 439, 476, 532, 533, 539, 559, 671, 685, 686, 688, 689, 728, 729, 741, 763, 770, 778, 787, 797, 805, 849, 852, 977, 1037, 1073, 1074, 1213], "schedul": [85, 763, 849], "insid": [85, 763, 849], "almost": [85, 206, 280, 294, 628, 629, 630, 763, 849, 1064, 1167, 1168, 1169, 1213], "instantli": [85, 763, 849], "asyncio": [85, 763, 849], "releas": [85, 308, 507, 741, 763, 849, 1221], "greenlet": [85, 763, 849], "task": [85, 763, 849], "wrapper": [85, 763, 849], "event": [85, 763, 849], "asyncresult": [85, 763, 849], "timeout": [85, 763, 849], "break": [85, 134, 263, 264, 294, 308, 355, 356, 391, 562, 563, 564, 565, 566, 568, 569, 570, 741, 763, 849, 888, 908, 909, 949, 990, 1082, 1213], "collect_async": [85, 849], "set_except": [85, 763, 849], "futur": [85, 152, 207, 209, 214, 246, 294, 685, 763, 849, 1203, 1213], "rerais": [85, 763, 849], "polarstyp": 86, "concatmethod": 86, "vertic": [86, 169, 207, 209, 214, 246, 263, 267, 294, 589, 1128], "rechunk": [86, 103, 108, 114, 115, 120, 122, 126, 128, 131, 132, 133, 169, 294, 741, 891, 977, 1070, 1213], "combin": [86, 98, 100, 172, 183, 188, 203, 230, 265, 294, 305, 319, 405, 538, 559, 607, 616, 622, 623, 624, 625, 685, 686, 688, 689, 728, 729, 731, 741, 778, 787, 805, 813, 849, 949, 963, 1146, 1155, 1161, 1162, 1163, 1164], "vertical_relax": 86, "diagon": [86, 260, 294], "diagonal_relax": 86, "vstack": [86, 169, 294], "addition": [86, 231, 294], "coerc": [86, 553, 741], "supertyp": [86, 171, 294, 307, 741, 773, 849], "mismatch": [86, 98, 124, 137, 139], "find": [86, 173, 179, 294, 574, 741, 1108, 1213], "miss": [86, 114, 115, 128, 170, 294, 326, 413, 414, 415, 427, 448, 450, 496, 741, 772, 849, 972, 973, 974, 1203, 1213], "stack": [86, 191, 267, 294], "don": [86, 183, 206, 261, 263, 294, 308, 355, 470, 507, 539, 741, 778, 821, 849, 852, 908, 970, 1031, 1064, 1109, 1203, 1213], "auto": [86, 103, 105, 106, 107, 109, 123, 124, 126, 132, 133, 260, 294, 405, 849, 949, 963, 1221], "logic": [86, 206, 280, 294, 304, 306, 507, 649, 659, 661, 706, 741, 765, 786, 809, 837, 849, 856, 857, 1064, 1196, 1213], "align_fram": 86, "pattern": [86, 114, 115, 128, 131, 132, 133, 200, 294, 513, 590, 591, 592, 597, 598, 599, 612, 613, 837, 852, 1107, 1110, 1129, 1130, 1131, 1136, 1137, 1138, 1151, 1152, 1213], "collis": 86, "need": [86, 110, 114, 115, 117, 183, 184, 186, 187, 230, 233, 242, 255, 294, 496, 554, 559, 578, 631, 690, 714, 717, 732, 741, 778, 779, 781, 782, 805, 849, 1088, 1116, 1170, 1213, 1221], "sure": [86, 103, 108, 114, 115, 120, 122, 126, 183, 184, 186, 187, 224, 230, 294, 559, 741, 778, 779, 781, 782, 805, 849], "contigu": [86, 103, 108, 114, 115, 120, 122, 126, 128, 131, 132, 133, 224, 294], "relev": 86, "df_h1": 86, "l1": 86, "l2": 86, "df_h2": 86, "r1": 86, "r2": 86, "r3": 86, "df_d1": 86, "df_d2": 86, "df_a1": 86, "df_a2": 86, "df_a3": 86, "enable_string_cach": 87, "stringcach": [87, 88, 202, 294, 753, 885, 887], "reliabl": [87, 88], "wai": [87, 88, 103, 105, 106, 107, 109, 123, 124, 132, 182, 201, 220, 244, 273, 294, 539, 543, 586, 597, 737, 741, 777, 800, 815, 830, 837, 849, 1136], "until": [87, 204, 294, 609, 610, 637, 1148, 1149, 1176], "deprec": [88, 89, 153, 173, 176, 183, 184, 185, 186, 187, 192, 207, 209, 214, 227, 241, 246, 249, 275, 294, 308, 339, 340, 350, 351, 352, 353, 354, 369, 373, 377, 379, 381, 386, 390, 393, 405, 442, 446, 449, 454, 466, 479, 494, 503, 504, 506, 545, 560, 577, 591, 601, 605, 606, 607, 608, 611, 615, 616, 622, 628, 630, 642, 645, 646, 663, 682, 683, 685, 687, 704, 741, 778, 779, 780, 781, 782, 791, 812, 819, 832, 849, 859, 894, 895, 904, 905, 906, 907, 909, 923, 927, 934, 936, 939, 944, 948, 949, 951, 963, 995, 999, 1001, 1004, 1005, 1011, 1013, 1015, 1027, 1040, 1055, 1063, 1082, 1093, 1109, 1111, 1115, 1130, 1140, 1144, 1145, 1146, 1147, 1150, 1154, 1155, 1161, 1167, 1169, 1185, 1186, 1203, 1213], "sinc": [88, 118, 129, 153, 155, 173, 176, 183, 184, 185, 186, 187, 192, 207, 209, 214, 227, 241, 246, 249, 259, 275, 294, 308, 339, 340, 350, 351, 352, 353, 354, 369, 371, 373, 377, 379, 381, 386, 390, 393, 405, 442, 446, 449, 454, 466, 479, 494, 503, 504, 506, 545, 560, 577, 591, 601, 605, 606, 607, 608, 611, 615, 616, 622, 628, 630, 642, 645, 646, 663, 682, 683, 685, 687, 696, 704, 741, 757, 778, 779, 780, 781, 782, 791, 812, 815, 819, 820, 832, 849, 859, 894, 895, 904, 905, 906, 907, 909, 923, 925, 927, 934, 936, 939, 944, 948, 949, 951, 963, 995, 999, 1001, 1004, 1005, 1011, 1013, 1015, 1027, 1040, 1055, 1063, 1082, 1093, 1109, 1111, 1115, 1130, 1140, 1144, 1145, 1146, 1147, 1150, 1154, 1155, 1161, 1167, 1169, 1185, 1186, 1203, 1213], "19": [88, 119, 136, 153, 173, 176, 183, 184, 185, 186, 187, 192, 203, 207, 209, 214, 227, 230, 241, 246, 249, 275, 294, 308, 339, 340, 350, 351, 352, 353, 354, 369, 373, 377, 379, 381, 386, 390, 391, 393, 405, 442, 446, 449, 454, 466, 479, 494, 503, 504, 506, 545, 559, 560, 563, 565, 577, 591, 601, 605, 606, 607, 608, 611, 615, 616, 622, 628, 630, 631, 642, 645, 646, 663, 682, 683, 685, 687, 704, 741, 778, 779, 780, 781, 782, 787, 791, 805, 812, 819, 832, 849, 859, 894, 895, 904, 905, 906, 907, 909, 923, 927, 934, 936, 939, 944, 948, 949, 951, 963, 995, 999, 1001, 1004, 1005, 1011, 1013, 1015, 1027, 1040, 1055, 1063, 1082, 1093, 1109, 1111, 1115, 1130, 1140, 1144, 1145, 1146, 1147, 1150, 1154, 1155, 1161, 1167, 1169, 1170, 1185, 1186, 1203, 1213], "longer": [88, 114, 128], "accept": [88, 113, 114, 115, 118, 120, 122, 126, 155, 182, 185, 236, 237, 240, 244, 259, 269, 270, 273, 294, 301, 338, 416, 439, 506, 539, 554, 586, 658, 660, 662, 668, 670, 671, 672, 679, 683, 692, 708, 712, 720, 723, 725, 731, 741, 757, 777, 780, 807, 808, 811, 815, 820, 826, 827, 830, 849, 893, 994, 1114, 1213], "disable_string_cach": 88, "finish": [91, 169, 294, 977, 1213], "least": [95, 144, 540, 741, 1078, 1213], "unexpect": [96, 294, 505, 507, 741, 1064, 1213], "caus": [96, 104, 114, 115, 128, 137, 152, 169, 294, 977, 1213], "panic": 96, "incompat": 100, "arrai": [103, 107, 114, 115, 126, 167, 250, 255, 256, 294, 321, 322, 323, 324, 325, 339, 340, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 464, 480, 481, 482, 483, 492, 495, 499, 562, 563, 565, 569, 575, 691, 741, 849, 871, 872, 873, 874, 875, 894, 895, 900, 901, 902, 903, 904, 905, 906, 907, 912, 971, 1025, 1041, 1042, 1043, 1044, 1052, 1053, 1056, 1060, 1061, 1095, 1096, 1098, 1101, 1102, 1103, 1112, 1117, 1189, 1194, 1195, 1203, 1213], "chunkedarrai": [103, 216, 294], "recordbatch": [103, 201, 294], "schemadefinit": [103, 105, 106, 107, 109, 123, 124, 132, 294, 849], "schema_overrid": [103, 105, 106, 107, 108, 109, 116, 117, 119, 123, 124, 125, 201, 255, 294, 849, 852, 875], "copi": [103, 104, 152, 157, 158, 201, 250, 255, 256, 269, 294, 419, 741, 760, 761, 826, 849, 892, 896, 978, 1189, 1194, 1195, 1213], "closest": 103, "pair": [103, 105, 106, 107, 109, 123, 124, 132, 143, 225, 294, 803, 849, 1221], "sever": [103, 105, 106, 107, 109, 123, 124, 132, 294, 849, 1221], "form": [103, 105, 106, 107, 109, 123, 124, 132, 200, 232, 263, 294, 540, 741, 849, 1078, 1213], "dimens": [103, 105, 107, 109, 123, 124, 132, 294, 555, 741, 849, 1089, 1213], "supportsinterchang": 104, "allow_copi": [104, 152], "interchang": [104, 152], "__dataframe__": 104, "convers": [104, 119, 152, 200, 201, 232, 233, 252, 255, 256, 294, 628, 629, 630, 634, 753, 987, 1167, 1168, 1169, 1173, 1193, 1194, 1195, 1213], "detail": [104, 116, 117, 137, 139, 152, 294, 849, 1221], "latest": [104, 118, 129, 152, 390, 391, 405, 427, 516, 628, 630, 687, 741, 948, 949, 963, 1167, 1169], "from_panda": 104, "from_arrow": 104, "effici": [104, 116, 119, 199, 201, 294], "reli": 104, "therefor": [104, 167, 294, 507, 731, 741, 971, 1213], "becaus": [104, 124, 167, 183, 186, 204, 206, 263, 280, 294, 470, 778, 781, 837, 849, 859, 971, 1031, 1064, 1213], "convert": [104, 108, 118, 119, 125, 129, 152, 251, 252, 253, 254, 255, 258, 294, 324, 357, 365, 394, 397, 495, 496, 504, 527, 549, 599, 611, 628, 629, 630, 631, 632, 634, 639, 741, 849, 874, 887, 919, 952, 955, 1056, 1057, 1138, 1150, 1167, 1168, 1169, 1170, 1171, 1173, 1182, 1192, 1193, 1194, 1195, 1203, 1213], "panda": [104, 108, 136, 183, 256, 294, 383, 384, 649, 741, 778, 849, 941, 942, 1195, 1196, 1213], "pd": [104, 108, 649, 741, 1195, 1196, 1213], "df_pd": 104, "dfi": [104, 152], "clone": [105, 106, 107, 108, 109, 157, 255, 256, 294, 760, 849, 892, 1193, 1194, 1195, 1203, 1213], "dimension": [105, 107, 109, 255, 294, 849, 1213], "infer_schema_length": [106, 109, 114, 115, 119, 123, 128, 132, 294, 600, 601, 849, 1139, 1140], "NOT": [106, 199, 294, 496, 514, 1220], "typic": [106, 116, 133, 206, 294, 370, 852, 924, 1064, 1213], "clearer": 106, "partial": [106, 114, 128, 294, 849], "mani": [106, 109, 116, 117, 169, 294, 600, 601, 977, 1139, 1140, 1213], "scan": [106, 109, 114, 115, 128, 129, 130, 131, 132, 133, 134, 183, 184, 186, 187, 230, 294, 559, 741, 771, 778, 779, 781, 782, 783, 790, 805, 849], "slow": [106, 109, 114, 115, 128, 308, 355, 507, 561, 741, 837, 908, 1094, 1213], "present": [106, 144, 444, 506, 624, 625, 741, 771, 849, 1063, 1203, 1213], "np": [107, 172, 255, 294, 429, 645, 741, 774, 849, 984, 998, 1003, 1007, 1008, 1185, 1213], "ndarrai": [107, 172, 255, 294, 429, 645, 741, 774, 849, 984, 1107, 1108, 1111, 1185, 1194, 1213], "numpi": [107, 136, 160, 200, 232, 233, 252, 255, 256, 294, 532, 533, 561, 741, 849, 998, 1003, 1007, 1008, 1073, 1074, 1094, 1194, 1195, 1203, 1213], "columnar": [107, 109, 200, 232, 294], "interpret": [107, 109, 114, 115, 128, 294, 849], "yield": [107, 109, 114, 115, 116, 128, 167, 169, 260, 294, 539, 741, 849, 971, 977, 1213], "conclus": [107, 109, 294, 849], "nan_to_nul": [108, 294, 849, 1213], "include_index": 108, "instal": [108, 114, 115, 117, 120, 122, 126, 160, 255, 256, 294, 813, 849, 1195, 1213], "nan": [108, 144, 152, 170, 256, 294, 360, 361, 411, 412, 420, 431, 433, 438, 448, 450, 451, 452, 457, 502, 508, 521, 532, 533, 534, 535, 561, 651, 673, 741, 772, 849, 861, 865, 913, 914, 979, 1007, 1008, 1073, 1074, 1094, 1194, 1195, 1213, 1221], "pd_df": 108, "pd_seri": 108, "tbl": [110, 112, 115], "reconstruct": 110, "repr": [110, 144, 146], "trim": 110, "whitespac": [110, 607, 616, 622, 623, 624, 625, 1146, 1155, 1161, 1162, 1163, 1164], "prompt": 110, "extract": [110, 366, 368, 369, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 385, 386, 388, 389, 392, 393, 395, 398, 399, 400, 401, 402, 403, 404, 406, 407, 409, 543, 598, 599, 600, 601, 602, 619, 741, 920, 921, 922, 923, 926, 927, 929, 933, 934, 935, 936, 938, 939, 940, 943, 944, 946, 947, 950, 951, 953, 956, 957, 958, 959, 960, 961, 962, 964, 965, 967, 1137, 1138, 1139, 1140, 1141], "to_init_repr": [110, 294, 1213], "truncat": [110, 114, 128, 181, 183, 186, 200, 232, 233, 252, 294, 778, 781, 801, 849], "identifi": [110, 212, 219, 261, 294, 796, 821, 849], "compound": [110, 233, 294, 852], "neither": [110, 119, 125, 234, 294, 496, 1057], "source_ac": 110, "source_cha": 110, "ident": [110, 157, 158, 294, 394, 557, 558, 741, 760, 761, 849, 892, 896, 952, 1091, 1092, 1213], "timestamp": [110, 183, 186, 294, 390, 391, 405, 696, 778, 781, 849, 948, 949, 963], "tor_id": 110, "nnel_id": 110, "\u03bc": [110, 144, 183, 200, 203, 230, 232, 233, 252, 265, 294, 362, 363, 364, 365, 370, 372, 376, 380, 383, 384, 387, 390, 391, 392, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 559, 562, 563, 565, 568, 569, 570, 628, 630, 688, 690, 696, 741, 778, 787, 805, 849, 852, 916, 917, 918, 919, 920, 921, 924, 925, 926, 932, 933, 938, 941, 942, 943, 945, 948, 949, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 966, 1167, 1169], "asia": [110, 852, 920, 921, 953], "tokyo": [110, 852], "123456780": 110, "9876543210": 110, "56": [110, 647, 741], "59": [110, 143, 364, 372, 380, 392, 687, 727, 728, 729, 852, 918, 938, 950], "663053": 110, "jst": [110, 852], "803065983": 110, "2055938745": 110, "38": [110, 144], "18": [110, 213, 230, 294, 349, 391, 405, 408, 438, 454, 526, 559, 741, 797, 801, 805, 849, 852, 966, 1169], "050545": 110, "source_actor_id": 110, "source_channel_id": 110, "to_list": [110, 230, 294, 1129, 1213], "datatypeclass": 111, "uint32": [111, 136, 156, 167, 294, 318, 429, 432, 462, 463, 478, 553, 591, 592, 603, 604, 645, 649, 741, 759, 849, 852, 869, 882, 970, 971, 1004, 1023, 1024, 1039, 1109, 1130, 1131, 1142, 1143, 1196, 1213], "regular": [111, 200, 231, 232, 265, 294, 344, 416, 458, 478, 590, 591, 592, 597, 598, 599, 612, 613, 692, 741, 852, 1018, 1039, 1129, 1130, 1131, 1136, 1137, 1138, 1151, 1152, 1213], "uint64": [111, 188, 294, 434, 462, 463, 552, 741, 988, 1023, 1024, 1086, 1213], "bigidx": 111, "read": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 169, 294, 428, 505, 731, 741, 765, 771, 849, 977, 1213], "over": [112, 114, 115, 116, 118, 128, 144, 153, 169, 199, 200, 201, 206, 231, 232, 233, 260, 272, 275, 280, 294, 308, 355, 421, 504, 505, 507, 515, 517, 518, 519, 527, 550, 562, 563, 564, 565, 566, 568, 569, 570, 663, 676, 677, 680, 681, 694, 704, 705, 706, 716, 741, 832, 837, 852, 859, 908, 977, 1064, 1095, 1096, 1098, 1102, 1213], "fetch": [112, 128, 204, 294, 760, 762, 783, 790, 849], "ideal": 112, "read_csv_batch": [112, 754], "tpch": [112, 115], "tables_scale_100": [112, 115], "lineitem": [112, 115, 117], "try_parse_d": [112, 114, 115, 128], "n_row": [113, 114, 115, 120, 122, 126, 128, 131, 132, 133, 201, 294, 771, 849], "handler": [113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 127, 765, 849], "builtin": [113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 127, 765, 849], "stop": [113, 114, 115, 120, 122, 126, 128, 131, 132, 133, 562, 563, 565, 568, 569, 570, 741, 917, 919, 925, 926, 933, 935, 938, 943, 949, 954], "textio": 114, "has_head": [114, 115, 119, 128], "new_column": [114, 115, 119, 128, 226, 227, 294], "comment_prefix": [114, 115, 128], "skip_row": [114, 115, 128], "missing_utf8_is_empty_str": [114, 115, 128], "ignore_error": [114, 115, 124, 128], "n_thread": [114, 115], "8192": 114, "csvencod": [114, 115, 128], "low_memori": [114, 115, 126, 128, 132, 133], "skip_rows_after_head": [114, 115, 128], "row_count_nam": [114, 115, 120, 122, 126, 128, 131, 132, 133], "row_count_offset": [114, 115, 120, 122, 126, 128, 131, 132, 133], "sample_s": [114, 115], "eol_char": [114, 115, 128], "raise_if_empti": [114, 115, 119, 125, 128], "truncate_ragged_lin": [114, 128], "fsspec": [114, 115, 120, 122, 126, 129, 130, 131, 133, 136], "remot": [114, 115, 120, 122, 126], "autogener": [114, 115, 128], "column_x": [114, 115, 128], "enumer": [114, 115, 128, 201, 294], "shorter": [114, 115, 128, 496], "comment": [114, 115, 128], "instanc": [114, 115, 128, 133, 144, 146, 150, 156, 169, 175, 294, 333, 516, 562, 563, 564, 565, 566, 568, 569, 570, 676, 680, 694, 737, 741, 759, 792, 829, 849, 882, 977, 1213], "escap": [114, 115, 128], "doesn": [114, 128, 183, 294, 410, 741, 778, 849, 969, 1203, 1213], "complet": [114, 116, 128, 1194, 1213], "wherea": [114, 116, 128, 230, 294, 391, 405, 532, 533, 559, 741, 783, 790, 805, 849, 949, 963, 1073, 1074, 1213], "would": [114, 115, 128, 318, 474, 507, 515, 550, 668, 741, 868, 1035, 1084, 1194, 1213], "prefer": [114, 115, 118, 128, 147, 169, 200, 206, 231, 232, 280, 294, 416, 507, 741, 849, 977, 1064, 1213, 1221], "treat": [114, 115, 128, 344, 458, 478, 590, 592, 612, 613, 731, 741, 1018, 1039, 1129, 1131, 1151, 1152, 1213], "10000": [114, 201, 294], "might": [114, 115, 128, 148, 155, 255, 259, 294, 308, 507, 653, 741, 757, 815, 820, 849, 1195, 1213], "issu": [114, 115, 119, 128, 348, 349, 643, 741, 902, 903, 1183, 1213], "iso8601": [114, 115, 128], "succe": [114, 115, 128], "cpu": [114, 115], "system": [114, 115], "wrongli": 114, "done": [114, 115, 128, 134, 150, 154, 156, 203, 294, 307, 309, 333, 539, 664, 741, 756, 759, 787, 849, 882, 1213], "buffer": [114, 115, 116, 167, 200, 294, 971, 1213], "modifi": [114, 115, 128, 148, 150, 169, 191, 199, 200, 267, 294, 319, 390, 408, 590, 597, 598, 612, 741, 858, 948, 966, 977, 1129, 1136, 1137, 1151, 1172, 1174, 1175, 1213], "upper": [114, 115, 116, 167, 183, 186, 294, 338, 339, 439, 496, 654, 665, 685, 686, 688, 689, 700, 701, 728, 729, 741, 778, 781, 849, 893, 894, 971, 994, 1062, 1200, 1213], "bound": [114, 115, 167, 183, 186, 294, 338, 339, 340, 439, 473, 474, 494, 496, 501, 654, 665, 685, 686, 688, 689, 700, 701, 728, 729, 741, 778, 781, 849, 893, 894, 895, 971, 994, 1034, 1035, 1055, 1062, 1179, 1200, 1213], "lossi": [114, 115, 128], "decod": [114, 115, 600], "expens": [114, 115, 126, 128, 132, 133, 145, 147, 183, 184, 186, 187, 200, 206, 230, 231, 232, 233, 260, 261, 294, 308, 507, 559, 741, 778, 779, 781, 782, 805, 821, 849, 977, 1064, 1213, 1221], "aggreg": [114, 115, 126, 175, 182, 183, 185, 186, 207, 209, 211, 214, 217, 221, 222, 223, 230, 245, 246, 263, 266, 273, 274, 277, 279, 294, 302, 422, 436, 503, 505, 507, 539, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 659, 660, 661, 662, 676, 677, 678, 679, 680, 681, 682, 683, 694, 699, 707, 708, 711, 712, 716, 724, 725, 741, 778, 779, 781, 782, 792, 793, 794, 795, 798, 799, 802, 805, 816, 817, 824, 830, 831, 834, 836, 849, 991, 1093, 1094, 1095, 1096, 1098, 1101, 1102, 1103, 1213], "parser": 114, "regard": [114, 673], "sens": [114, 120, 122, 126, 131, 213, 265, 294, 539, 741, 797, 849], "particular": [114, 120, 122, 126, 131, 167, 294, 971, 1213], "usernam": [114, 117, 120, 122, 126, 131], "password": [114, 117, 120, 122, 126, 131], "skip": [114, 115, 119, 126, 128, 133, 263, 294, 859, 1064, 1213], "offset": [114, 115, 119, 120, 122, 126, 128, 131, 132, 133, 183, 184, 186, 187, 230, 243, 265, 271, 294, 362, 370, 383, 384, 387, 391, 405, 490, 559, 584, 617, 741, 778, 779, 781, 782, 805, 814, 829, 849, 916, 924, 941, 942, 945, 949, 963, 1051, 1123, 1156, 1169, 1213], "row_count": [114, 115, 120, 122, 126, 128, 131, 132, 133], "sampl": [114, 115, 280, 294, 583, 741, 837, 1122, 1213], "estim": [114, 115, 154, 167, 294, 309, 414, 415, 455, 664, 741, 756, 849, 971, 973, 974, 1017, 1213], "alloc": [114, 115, 167, 224, 294, 741, 971, 1213], "encount": [114, 115, 128, 183, 186, 294, 532, 533, 600, 602, 673, 676, 694, 741, 778, 781, 849, 1073, 1074, 1139, 1141, 1213], "window": [114, 115, 128, 183, 184, 186, 187, 230, 294, 355, 391, 405, 413, 414, 415, 505, 507, 539, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 671, 718, 719, 741, 778, 779, 781, 782, 805, 849, 908, 949, 963, 972, 973, 974, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1213], "rn": [114, 115, 128], "go": [114, 115, 128, 595, 1134], "nodataerror": [114, 115, 119, 125, 128, 753], "lazili": [114, 115, 128, 129, 130, 131, 132, 133, 554, 741, 763, 849, 1088, 1213], "glob": [114, 115, 128, 131, 132, 133], "continu": [114, 126, 356, 547, 583, 741, 909, 1082, 1122, 1213], "benchmark": [114, 126], "50000": 115, "batchedcsvread": [115, 753], "upon": 115, "creation": 115, "gather": [115, 177, 249, 294, 430, 494, 645, 646, 741, 776, 819, 849, 985, 1055, 1185, 1186, 1213], "next_batch": 115, "big": 115, "interest": 115, "seen_group": 115, "big_fil": 115, "df_current_batch": 115, "partition_df": 115, "partition_bi": [115, 201, 294], "as_dict": [115, 219, 294], "fh": 115, "write_csv": [115, 128, 294], "els": [115, 731], "connectionorcursor": 116, "iter_batch": 116, "cursor": 116, "client": 116, "odbc": 116, "packag": [116, 119], "establish": 116, "resultset": 116, "manner": 116, "veri": [116, 200, 260, 294, 507, 741, 837], "poor": 116, "trip": 116, "still": [116, 117], "intern": [116, 135, 200, 294], "exact": [116, 142, 144, 146, 242, 294, 626, 627, 628, 629, 630, 651, 741, 1167, 1168, 1169], "incom": 116, "execute_opt": 116, "read_arrow_batches_from_odbc": 116, "read_database_uri": 116, "wide": [116, 181, 212, 263, 294, 796, 849], "snowflak": [116, 117], "variou": [116, 294, 741, 849, 852, 1213], "facil": 116, "initialis": [116, 150, 849, 1220], "flight": 116, "flightsql": 116, "flight_sql": 116, "about": [116, 583, 590, 597, 598, 612, 741, 1122, 1129, 1136, 1137, 1151, 1213, 1221], "notabl": 116, "dremio": 116, "influxdb": 116, "notic": [116, 294, 849, 1213], "dbapi2": 116, "connectorx": [116, 117, 136], "optimis": [116, 206, 233, 280, 294, 849, 1064, 1110, 1213, 1221], "translat": 116, "conn": 116, "url": [116, 133, 597, 599, 1136, 1138], "test_data": 116, "user_conn": 116, "normalised_scor": 116, "uint8": [116, 141, 143, 156, 254, 255, 263, 294, 348, 349, 554, 643, 658, 741, 759, 849, 852, 902, 903, 1088, 1183, 1213, 1221], "parameteris": 116, "metric": 116, "alchemy_conn": 116, "qmark": 116, "variad": 116, "1000": [116, 119, 167, 254, 294, 376, 400, 958, 1192, 1213, 1221], "localhost": 116, "5432": 116, "uid": 116, "usr": 116, "pwd": 116, "max_text_s": 116, "max_binary_s": 116, "do_someth": 116, "partition_on": 117, "partition_rang": 117, "partition_num": 117, "dbreadengin": 117, "raw": 117, "warehous": 117, "role": 117, "transfer": 117, "document": [117, 119, 394, 397, 602, 628, 629, 630, 634, 737, 887, 952, 955, 1141, 1167, 1168, 1169, 1173], "redshift": 117, "mysql": 117, "mariadb": 117, "clickhous": 117, "oracl": 117, "bigqueri": 117, "pleas": [117, 183, 294, 685, 690, 778, 849], "github": 117, "sfu": 117, "connector": 117, "destin": 117, "develop": [117, 144, 146], "read_databas": 117, "explicitli": [117, 142, 144, 150, 723, 752], "test_tabl": 117, "compani": 117, "testdb": 117, "public": [117, 294, 741, 753, 849, 1213], "myrol": 117, "delta_table_opt": [118, 129], "root": [118, 129, 336, 454, 504, 517, 526, 527, 528, 529, 530, 531, 545, 587, 642, 740, 741, 889, 1125, 1213], "absolut": [118, 129, 130, 137, 138, 139, 140, 300, 413, 414, 415, 741, 854, 972, 973, 974, 1213], "avoid": [118, 232, 294, 303, 741], "year": [118, 129, 183, 203, 230, 265, 294, 374, 375, 387, 388, 391, 405, 406, 559, 562, 563, 564, 565, 566, 568, 569, 570, 684, 685, 686, 687, 688, 689, 728, 729, 741, 778, 787, 805, 849, 928, 929, 945, 946, 949, 963, 964], "2021": [118, 129, 156, 161, 181, 183, 265, 294, 628, 703, 759, 778, 849, 852, 920, 921, 929, 953, 1013, 1167, 1213], "aw": [118, 129, 133], "googl": [118, 129, 130], "service_account": [118, 129], "service_account_json_absolute_path": [118, 129], "az": [118, 129, 130], "adl": [118, 129, 130], "abf": [118, 129, 130], "azure_storage_account_nam": [118, 129, 130], "azure_storage_account_kei": [118, 129, 130], "without_fil": [118, 129, 130], "track": [118, 129, 130, 206, 294, 496, 1220], "sheet_id": [119, 125], "sheet_nam": [119, 125], "xlsx2csv": [119, 136], "openpyxl": [119, 136], "pyxlsb": [119, 136], "xlsx2csv_option": 119, "read_csv_opt": 119, "noreturn": [119, 125], "spreadsheet": [119, 125, 221, 294, 753], "xlsb": 119, "sheetnam": [119, 125], "nor": [119, 125, 234, 294], "fastest": 119, "read_csv": [119, 128], "refin": 119, "significantli": [119, 206, 280, 294, 1064, 1213, 1221], "potenti": [119, 128, 131, 132, 200, 231, 233, 294, 526], "unabl": 119, "julian": 119, "skip_empty_lin": 119, "influenc": [119, 771, 792, 849], "pipelin": 119, "correct": [119, 125, 414, 415, 455, 563, 564, 565, 566, 567, 568, 570, 583, 741, 791, 792, 849, 973, 974, 1017, 1100, 1122, 1213], "known": [119, 144, 496, 562, 563, 564, 565, 566, 568, 569, 570, 741, 832, 837, 1057], "better": [119, 206, 255, 280, 294, 507, 604, 741, 837, 1107, 1110, 1143, 1213], "detect": 119, "memory_map": [120, 126, 131], "greatli": [120, 131], "repeat": [120, 131, 551, 553, 714, 732, 741], "give": [120, 122, 126, 131, 132, 133, 212, 261, 294, 371, 455, 553, 651, 741, 753, 796, 821, 849, 925, 1017, 1213], "That": [120, 791, 792, 849], "filenam": 120, "my_fil": 120, "write_ipc": [120, 294], "read_ndjson": 123, "openoffic": 125, "od": 125, "parallelstrategi": [126, 133], "use_statist": [126, 133], "stabl": [126, 155, 160, 188, 234, 259, 294, 434, 500, 741, 757, 796, 815, 820, 849, 988, 1213], "row_group": [126, 133], "read_tabl": 126, "scan_parquet": [126, 134], "scan_pyarrow_dataset": [126, 133], "hive": [126, 133], "contribut": [126, 564, 566, 568, 570, 741], "with_column_nam": 128, "push": [128, 131, 132, 133, 134], "down": [128, 131, 132, 133, 134, 425, 741, 983, 1213], "therebi": [128, 131, 132], "realloc": [128, 131, 132, 169, 294, 977, 1213], "headerless": 128, "my_long_fil": 128, "thing": [128, 135], "less": [128, 203, 294, 457, 502, 620, 741, 787, 849, 1159, 1221], "breezah": 128, "languag": [128, 183, 203, 230, 265, 294, 387, 391, 405, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 688, 689, 728, 729, 741, 778, 787, 805, 849, 945, 949, 963], "hard": [128, 791, 792, 849], "mydf": 128, "lambda": [128, 153, 175, 206, 220, 221, 280, 294, 308, 413, 414, 415, 496, 503, 504, 505, 507, 527, 676, 677, 694, 705, 706, 716, 741, 791, 792, 800, 837, 849, 859, 972, 973, 974, 1057, 1064, 1213], "lower": [128, 183, 186, 223, 286, 294, 338, 340, 439, 501, 504, 527, 548, 552, 566, 665, 685, 686, 688, 689, 700, 701, 715, 728, 729, 741, 778, 781, 802, 843, 849, 893, 895, 994, 1062, 1083, 1086, 1099, 1200, 1213], "simpli": [128, 539, 676, 694, 741], "idx": [128, 183, 201, 294, 496, 778, 849, 1057], "uint16": [128, 348, 349, 643, 741, 852, 902, 903, 1183, 1213], "u16": [128, 144, 1221], "eu": [129, 130], "central": [129, 130, 455, 583, 741, 1017, 1122, 1213], "iceberg": [130, 753], "pyiceberg": [130, 136], "metadata": [130, 183, 184, 186, 187, 230, 294, 559, 741, 778, 779, 781, 782, 805, 849], "secret": [130, 133], "adlf": 130, "my": [130, 134, 635, 1174], "gcp": [130, 133], "oauth": 130, "token": 130, "ya29": 130, "dr": 130, "afm": 130, "py": 130, "impl": 130, "fsspecfileio": 130, "hive_partit": 133, "retri": 133, "prune": [133, 792, 849], "read_parquet": 133, "east": 133, "allow_pyarrow_filt": 134, "comparison": 134, "dset": 134, "folder": 134, "04": [134, 156, 183, 265, 294, 364, 365, 383, 384, 390, 391, 394, 397, 398, 399, 402, 404, 408, 628, 688, 690, 759, 778, 849, 852, 919, 933, 938, 941, 942, 943, 948, 952, 955, 956, 957, 960, 962, 966, 1167], "seed": [135, 188, 234, 294, 434, 484, 550, 573, 579, 741, 988, 1045, 1084, 1106, 1118, 1213], "shuffl": [135, 234, 280, 294, 484, 573, 741, 837, 1045, 1106, 1213], "stdout": [136, 150, 181, 294, 518], "platform": 136, "maco": 136, "14": [136, 144, 173, 192, 206, 207, 209, 214, 227, 246, 249, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 294, 350, 351, 352, 353, 354, 362, 438, 494, 550, 611, 645, 646, 682, 683, 728, 741, 833, 834, 836, 838, 839, 840, 841, 842, 843, 844, 852, 904, 905, 906, 907, 916, 949, 995, 1015, 1055, 1111, 1150, 1185, 1186, 1203, 1213], "arm64": 136, "arm": 136, "64bit": [136, 552, 741, 1086, 1213], "main": [136, 763, 849], "oct": 136, "13": [136, 144, 157, 158, 170, 171, 180, 193, 204, 216, 230, 269, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 294, 303, 369, 373, 377, 379, 381, 386, 393, 515, 517, 559, 631, 671, 676, 679, 694, 725, 730, 741, 760, 761, 772, 773, 789, 805, 826, 833, 834, 836, 838, 839, 840, 841, 842, 843, 844, 849, 923, 927, 934, 936, 939, 944, 949, 951, 963, 964, 1001, 1004, 1011, 1013, 1064, 1170, 1213], "54": [136, 417, 741, 1221], "clang": 136, "1500": [136, 145], "adbc_driver_manag": 136, "cloudpickl": 136, "matplotlib": [136, 801, 813, 849], "26": [136, 370, 406, 924], "pydant": 136, "check_row_ord": [137, 138], "check_column_ord": [137, 138], "check_dtyp": [137, 138, 139, 140], "check_exact": [137, 138, 139, 140], "rtol": [137, 138, 139, 140], "atol": [137, 138, 139, 140], "08": [137, 138, 139, 140, 144, 230, 294, 364, 391, 559, 628, 688, 690, 741, 805, 849, 852, 949, 963, 1167], "categorical_as_str": [137, 138, 139, 140], "assert": [137, 138, 139, 140, 142, 144, 146, 230, 294, 753, 852], "assertionerror": [137, 138, 139, 140], "compar": [137, 138, 139, 140, 166, 176, 294, 411, 412, 431, 433, 457, 502, 534, 535, 741, 887, 970, 1109, 1213], "unsort": [137, 138], "exactli": [137, 138, 139, 140, 143, 144, 146, 619, 620, 626, 627, 690, 1117, 1158, 1159, 1165, 1166, 1213], "toler": [137, 138, 139, 140, 203, 294, 787, 849], "inexact": [137, 138, 139, 140], "share": [137, 138, 139, 140, 167, 294, 741, 971, 1213], "assert_series_equ": [137, 140, 970, 1213, 1221], "assert_frame_not_equ": [137, 140], "pytest": [137, 139], "worthwhil": [137, 139], "shorten": [137, 139], "traceback": [137, 138, 139, 140], "tb": [137, 139, 167, 294, 971, 1213], "short": [137, 139], "tend": [137, 139], "unhelpfulli": [137, 139], "assert_frame_equ": [138, 139, 166, 294, 1221], "assert_series_not_equ": [138, 139], "check_nam": [139, 140], "searchstrategi": [141, 143, 144, 146], "null_prob": [141, 144, 146], "percentag": [141, 144, 146, 540, 741, 1078, 1213], "chanc": [141, 144, 146, 1221], "independ": [141, 142, 144, 146], "flag": [141, 294, 575, 590, 597, 598, 612, 741, 769, 791, 792, 849, 1112, 1129, 1136, 1137, 1151, 1213], "hypothesi": [141, 142, 143, 144, 145, 146, 1221], "sampled_from": [141, 1221], "unique_small_int": 141, "ccy": [141, 1221], "gbp": [141, 1221], "eur": [141, 161, 181, 294, 1221], "jpy": [141, 1221], "min_col": [142, 144], "max_col": [142, 144], "standalon": [142, 144, 852], "mincol": 142, "assign": [142, 183, 294, 496, 539, 550, 619, 620, 741, 778, 849, 1057, 1084, 1158, 1159, 1213], "minimum": [142, 143, 144, 146, 175, 214, 215, 294, 413, 414, 415, 521, 533, 542, 550, 711, 712, 741, 798, 849, 937, 972, 973, 974, 1074, 1080, 1084, 1213, 1221], "especi": [142, 558, 741, 771, 849, 1092, 1213], "test_unique_xyz": 142, "assert_someth": 142, "punctuat": 142, "test_special_char_colname_init": 142, "inner_dtyp": [143, 146], "select_from": [143, 146], "min_siz": [143, 144, 146, 1221], "max_siz": [143, 144, 146, 1221], "anoth": [143, 166, 176, 182, 294, 355, 363, 473, 494, 511, 514, 554, 741, 777, 828, 849, 908, 917, 970, 977, 1034, 1088, 1109, 1213], "randomli": 143, "innermost": 143, "2x": 143, "lst": 143, "11330": 143, "24030": 143, "116": 143, "zz": [143, 146], "uint8_pair": [143, 1221], "uint": [143, 1221], "zip": [143, 1221], "131": 143, "176": 143, "149": [143, 1221], "max_data_s": [144, 146], "include_col": 144, "allow_infin": [144, 146], "allowed_dtyp": [144, 146, 1221], "excluded_dtyp": [144, 146], "describ": [144, 181, 294, 1213], "desir": [144, 496, 1057], "n_chunk": [144, 146, 294, 858, 977, 1213], "randomis": 144, "onto": 144, "pct": 144, "preced": [144, 852], "disallow": [144, 146], "inf": [144, 146, 315, 356, 441, 445, 547, 651, 741, 865, 899, 909, 990, 998, 1003, 1062, 1078, 1082, 1200, 1213], "exclud": [144, 146, 183, 294, 346, 349, 439, 741, 778, 849, 994, 1013, 1213], "usag": [144, 146, 242, 294, 852, 1117, 1213], "deploi": [144, 146], "characterist": [144, 146], "concret": [144, 146], "test_repr": 144, "isinst": [144, 146, 294], "0x11f561580": 144, "0565": 144, "34715": 144, "5844": 144, "33": [144, 213, 294, 571, 741, 797, 849, 1099, 1213], "076854": 144, "3382": 144, "17": [144, 273, 561, 571, 696, 728, 741, 830, 897, 899, 949, 1094, 1213, 1221], "48662": 144, "7540": 144, "836271": 144, "4063": 144, "06": [144, 156, 265, 294, 364, 382, 389, 390, 391, 405, 406, 759, 849, 852, 948, 949, 963], "39092": 144, "1889": 144, "41": [144, 569, 741, 1221], "874455": 144, "15836": 144, "1755e": 144, "575050513": 144, "profil": [145, 147, 762, 849], "balanc": [145, 147, 1221], "set_environ": 145, "polars_hypothesis_profil": [145, 147], "constructor": 146, "normal": [146, 183, 294, 410, 455, 583, 741, 778, 849, 969, 1017, 1122, 1213], "test_repr_is_valid_str": 146, "experi": 146, "create_list_strategi": [146, 1221], "polars_max_thread": 148, "behind": 148, "lock": 148, "reason": [148, 496, 505, 741], "temporarili": [148, 150, 183, 184, 186, 187, 230, 294, 559, 741, 778, 779, 781, 782, 805, 849], "pyspark": 148, "udf": [148, 153, 206, 220, 275, 280, 294, 308, 507, 543, 663, 706, 741, 800, 832, 837, 849, 859, 1064, 1213], "recommend": [148, 200, 220, 294, 852], "easi": [150, 1221], "restor": 150, "restore_default": 150, "relat": [150, 852], "set_tbl_row": 150, "initi": [150, 676, 680, 694, 731], "whatev": 150, "were": [150, 207, 209, 214, 246, 294, 737], "enter": 150, "advantag": [150, 220, 294], "set_": 150, "set_verbos": 150, "do_various_th": 150, "cleaner": 150, "breviti": 150, "vein": 150, "durat": [150, 203, 265, 294, 362, 369, 370, 373, 377, 379, 381, 386, 393, 398, 399, 400, 401, 402, 403, 404, 408, 649, 685, 686, 688, 689, 728, 729, 741, 787, 849, 852, 916, 923, 924, 927, 934, 936, 939, 944, 951, 956, 957, 958, 959, 960, 961, 962, 966, 1196, 1213], "set_ascii_t": 150, "write_ascii_frame_to_stdout": 150, "sy": 150, "nan_as_nul": 152, "polarsdatafram": 152, "notimplementederror": 152, "num_row": 152, "get_column": [152, 257, 294], "dtypekind": 152, "inference_s": [153, 206, 294], "256": [153, 206, 294, 1078, 1213], "map_row": [153, 294], "tri": [153, 206, 294], "approxim": [154, 294, 309, 664, 741, 756, 849, 1221], "hyperloglog": [154, 294, 309, 664, 741, 756, 849], "algorithm": [154, 294, 309, 664, 741, 756, 849], "cardin": [154, 294, 309, 664, 741, 756, 849], "k": [155, 233, 259, 294, 332, 335, 455, 650, 741, 757, 820, 849, 881, 886, 1017, 1197, 1213], "intoexpr": [155, 182, 183, 184, 185, 186, 187, 230, 236, 237, 240, 244, 259, 269, 270, 273, 294, 307, 327, 330, 331, 439, 466, 467, 476, 485, 486, 487, 488, 539, 574, 576, 577, 586, 618, 619, 620, 626, 627, 660, 662, 668, 670, 671, 672, 673, 675, 676, 679, 680, 683, 687, 694, 708, 712, 717, 720, 723, 725, 741, 757, 777, 778, 779, 780, 781, 782, 805, 807, 808, 811, 815, 820, 826, 827, 830, 849, 876, 879, 880, 994, 1037, 1114, 1157, 1158, 1159, 1165, 1166, 1213], "nulls_last": [155, 244, 259, 294, 318, 585, 741, 757, 815, 820, 849, 868, 1213], "smallest": [155, 259, 294, 332, 741, 757, 820, 849, 881, 1213], "largest": [155, 259, 294, 650, 741, 757, 820, 849, 1197, 1213], "wors": [155, 259, 294, 757, 815, 820, 849], "search": [155, 203, 259, 294, 496, 757, 787, 815, 820, 849], "top_k": [155, 294, 332, 741, 757, 849, 881, 1213], "columnnameorselector": [156, 162, 164, 212, 219, 221, 233, 253, 261, 262, 263, 294, 759, 766, 767, 796, 821, 822, 849], "strict": [156, 294, 328, 333, 590, 593, 611, 628, 629, 630, 632, 634, 741, 759, 849, 877, 882, 970, 1109, 1129, 1132, 1150, 1167, 1168, 1169, 1171, 1173, 1213], "due": [156, 183, 203, 230, 233, 265, 294, 303, 333, 370, 387, 391, 405, 454, 526, 528, 529, 530, 531, 545, 559, 562, 563, 564, 565, 566, 568, 569, 570, 642, 685, 686, 688, 689, 728, 729, 741, 759, 778, 787, 805, 849, 882, 924, 945, 949, 963, 1213], "overflow": [156, 294, 333, 348, 349, 611, 632, 643, 741, 759, 849, 882, 902, 903, 1150, 1171, 1183, 1213], "2020": [156, 161, 181, 230, 294, 365, 370, 376, 390, 394, 397, 398, 399, 400, 401, 402, 403, 404, 559, 628, 629, 630, 741, 759, 805, 849, 852, 919, 924, 948, 952, 955, 956, 957, 958, 959, 960, 961, 962, 1167, 1168, 1169], "u8": [156, 253, 254, 263, 294, 554, 658, 741, 759, 849, 852, 1088, 1190, 1213, 1221], "to_dict": [156, 294, 759, 849], "as_seri": [156, 251, 294, 759, 849, 909, 1082, 1213], "tempor": [156, 183, 184, 186, 187, 200, 230, 232, 233, 252, 294, 338, 439, 559, 562, 563, 564, 565, 566, 568, 569, 570, 741, 753, 759, 778, 779, 781, 782, 805, 849, 852, 893, 994, 1013, 1213], "greater": [157, 203, 294, 431, 433, 583, 609, 610, 620, 637, 741, 787, 849, 1122, 1148, 1149, 1159, 1176, 1213], "cheap": [157, 158, 237, 270, 294, 760, 761, 808, 827, 849, 892, 896, 1213], "deepcopi": [157, 294, 760, 849, 892, 1213], "appl": [159, 191, 202, 225, 228, 251, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 294, 556, 595, 621, 741, 786, 803, 833, 834, 836, 838, 839, 840, 841, 842, 843, 844, 849, 1134, 1160], "banana": [159, 251, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 294, 556, 595, 621, 741, 833, 834, 836, 838, 839, 840, 841, 842, 843, 844], "orang": [159, 276, 277, 279, 281, 282, 284, 286, 287, 294, 833, 834, 836, 838, 839, 841, 843, 844], "pairwis": [160, 294], "pearson": [160, 294, 455, 583, 673, 741, 1017, 1122, 1213], "correl": [160, 294, 673, 718], "coeffici": [160, 294, 583, 741, 1122, 1213], "corrcoef": [160, 294], "percentil": [161, 294, 910, 1213], "summari": [161, 294, 910, 1213], "glimps": [161, 189, 294], "median": [161, 221, 294, 421, 564, 741, 828, 849, 910, 1097, 1213], "usd": [161, 181, 294, 1221], "null_count": [161, 164, 294, 355, 741, 849, 908, 910, 987, 1213], "266667": [161, 294], "666667": [161, 194, 266, 282, 294, 413, 741, 785, 824, 839, 849, 972, 1213], "std": [161, 294, 568, 741, 849, 910, 1101, 1213], "101514": [161, 294], "707107": [161, 294, 414, 568, 741, 973, 1213], "57735": [161, 294], "more_column": [162, 168, 238, 262, 294, 416, 692, 741, 766, 770, 810, 822, 849], "subset": [164, 217, 261, 294, 767, 821, 849], "preserv": [164, 172, 182, 185, 202, 206, 255, 256, 294, 360, 361, 422, 469, 580, 741, 767, 774, 786, 849, 913, 914, 981, 1030, 1119, 1195, 1213], "behavior": [164, 294, 473, 494, 506, 674, 693, 702, 741, 767, 849, 909, 1034, 1055, 1063, 1082, 1213], "all_horizont": [164, 294, 659, 767, 849], "is_nul": [164, 294, 741, 767, 849, 1213], "null_equ": [166, 176, 294, 970, 1109, 1213], "sizeunit": [167, 294, 971, 1213], "heap": [167, 294, 741, 971, 1213], "its": [167, 294, 364, 391, 405, 586, 731, 741, 887, 918, 949, 963, 971, 1213], "bitmap": [167, 294, 971, 1213], "structarrai": [167, 294, 971, 1213], "constant": [167, 230, 294, 362, 419, 741, 805, 849, 916, 971, 978, 1213], "unchang": [167, 294, 506, 554, 649, 741, 791, 792, 832, 837, 849, 971, 1063, 1088, 1196, 1213], "capac": [167, 242, 294, 971, 1117, 1213], "ffi": [167, 294, 971, 1213], "kb": [167, 294, 971, 1213], "mb": [167, 294, 971, 1213], "gb": [167, 294, 971, 1213], "revers": [167, 294, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 504, 527, 528, 529, 545, 642, 741, 849, 900, 901, 902, 903, 904, 905, 906, 907, 1213], "1_000_000": [167, 294, 971, 1213], "25888898": [167, 294], "689577102661133": [167, 294], "long": [168, 212, 263, 294, 770, 796, 849], "letter": [168, 278, 288, 294, 416, 598, 692, 741, 770, 835, 845, 849, 852, 1137], "onlin": [169, 294, 977, 1213], "rerun": [169, 294, 977, 1213], "conveni": [169, 294, 858, 977, 1213], "Not": [170, 294, 448, 450, 741, 772, 849], "fillnullstrategi": [171, 294, 421, 741, 773, 849, 980, 1213], "matches_supertyp": [171, 294, 773, 849], "forward": [171, 203, 240, 294, 383, 421, 427, 489, 576, 741, 773, 787, 811, 849, 941, 980, 1050, 1114, 1213], "consecut": [171, 294, 326, 421, 427, 589, 741, 773, 849, 980, 1128, 1213], "fill_nan": [171, 294, 741, 849, 1213], "intoexprcolumn": [172, 294, 332, 338, 339, 340, 484, 489, 540, 573, 576, 623, 624, 625, 650, 665, 685, 686, 688, 689, 700, 701, 728, 729, 731, 741, 774, 811, 849, 881, 893, 894, 895, 1045, 1050, 1078, 1162, 1163, 1164, 1197, 1213], "constraint": [172, 294, 454, 526, 528, 529, 530, 531, 545, 642, 731, 741, 774, 849], "is_in": [172, 294, 741, 1213], "get_column_index": [173, 294], "reduct": [175, 294], "supercast": [175, 294], "parent": [175, 294], "rule": [175, 294], "arithmet": [175, 294], "zip_with": [175, 294, 1213], "foo11": [175, 294], "bar22": [175, 294], "nth": [177, 249, 294, 430, 620, 646, 741, 776, 819, 849, 985, 1159, 1186, 1213], "th": [177, 249, 294, 430, 485, 583, 646, 741, 776, 819, 849, 985, 1046, 1122, 1186, 1213], "retriev": [178, 294, 462, 463, 638, 1023, 1024, 1177], "max_items_per_column": [181, 294], "max_colname_length": [181, 294], "return_as_str": [181, 294, 518], "preview": [181, 294], "few": [181, 294], "exce": [181, 294], "ellipsi": [181, 294], "head": [181, 205, 248, 294, 307, 459, 741, 790, 849, 1019, 1184, 1213], "tail": [181, 189, 294, 307, 583, 741, 849, 989, 1122, 1213], "more_bi": [182, 185, 219, 244, 294, 586, 741, 777, 780, 815, 849], "groupbi": [182, 221, 294, 308, 507, 663, 706, 741, 849], "consist": [182, 185, 219, 294, 628, 777, 780, 849, 858, 977, 1167, 1213], "regardless": [182, 185, 294, 602, 731, 1141], "agg": [182, 183, 186, 221, 230, 294, 302, 422, 424, 429, 432, 507, 585, 586, 657, 674, 706, 741, 762, 763, 769, 771, 777, 778, 779, 781, 782, 801, 805, 809, 813, 849, 852], "Or": [182, 183, 203, 230, 244, 265, 273, 294, 539, 559, 586, 685, 686, 688, 689, 728, 729, 731, 741, 777, 778, 787, 805, 815, 830, 849], "index_column": [183, 184, 186, 187, 230, 294, 559, 741, 778, 779, 781, 782, 805, 849], "timedelta": [183, 184, 186, 187, 203, 230, 265, 294, 387, 391, 405, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 688, 689, 728, 729, 741, 778, 779, 781, 782, 787, 805, 849, 852, 930, 932, 937, 945, 949, 963, 1073, 1074, 1213], "period": [183, 184, 186, 187, 230, 294, 391, 405, 413, 414, 415, 540, 559, 685, 686, 688, 689, 728, 729, 741, 778, 779, 781, 782, 805, 849, 949, 963, 972, 973, 974, 1078, 1213], "include_boundari": [183, 186, 294, 778, 781, 849], "closedinterv": [183, 184, 186, 187, 230, 294, 439, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 688, 689, 728, 729, 741, 778, 779, 781, 782, 805, 849, 994, 1213], "label": [183, 294, 356, 547, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 741, 778, 801, 849, 909, 1082, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1213], "start_bi": [183, 186, 294, 778, 781, 849], "startbi": [183, 186, 294, 778, 781, 849], "check_sort": [183, 184, 186, 187, 230, 294, 559, 741, 778, 779, 781, 782, 805, 849], "dynamicgroupbi": [183, 186, 294], "member": [183, 294, 778, 849, 1002, 1213], "descript": [183, 294, 778, 849], "ascend": [183, 184, 186, 187, 230, 294, 559, 563, 564, 565, 566, 568, 570, 741, 778, 779, 781, 782, 805, 849], "dynam": [183, 186, 294, 496, 562, 563, 564, 565, 566, 568, 569, 570, 741, 778, 781, 849, 1057], "matter": [183, 184, 186, 187, 200, 230, 232, 233, 252, 294, 559, 624, 625, 741, 778, 779, 781, 782, 805, 849], "interv": [183, 184, 186, 187, 230, 265, 294, 356, 391, 405, 439, 547, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 688, 689, 728, 729, 741, 778, 779, 781, 782, 805, 849, 909, 922, 925, 926, 933, 935, 938, 940, 943, 946, 947, 949, 954, 963, 964, 994, 1082, 1213], "_lower_boundari": [183, 294, 778, 849], "_upper_boundari": [183, 294, 778, 849], "harder": [183, 186, 294, 778, 781, 849], "inclus": [183, 184, 186, 187, 230, 294, 439, 559, 562, 563, 564, 565, 566, 568, 569, 570, 618, 619, 665, 685, 686, 688, 689, 700, 701, 728, 729, 741, 778, 779, 781, 782, 805, 849, 994, 1157, 1158, 1213], "datapoint": [183, 186, 294, 778, 781, 849], "boundari": [183, 294, 338, 339, 340, 741, 778, 849, 893, 894, 895, 990, 1213], "mondai": [183, 186, 294, 405, 407, 778, 781, 849, 963, 965], "tuesdai": [183, 186, 294, 778, 781, 849], "wednesdai": [183, 186, 294, 778, 781, 849], "thursdai": [183, 186, 294, 778, 781, 849], "fridai": [183, 186, 294, 778, 781, 849], "saturdai": [183, 186, 294, 778, 781, 849], "sundai": [183, 186, 294, 407, 778, 781, 849, 965], "earliest": [183, 186, 294, 390, 391, 405, 628, 630, 687, 778, 781, 849, 948, 949, 963, 1167, 1169], "weekli": [183, 186, 294, 405, 778, 781, 849, 963], "week": [183, 186, 203, 230, 265, 294, 387, 391, 405, 407, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 688, 689, 690, 728, 729, 741, 778, 781, 787, 805, 849, 852, 945, 949, 963, 965], "sorted": [183, 184, 186, 187, 230, 294, 559, 741, 778, 779, 781, 782, 805, 849], "verifi": [183, 184, 186, 187, 230, 294, 559, 741, 778, 779, 781, 782, 805, 849], "incorrectli": [183, 184, 186, 187, 230, 294, 496, 559, 741, 778, 779, 781, 782, 805, 849], "incorrect": [183, 184, 186, 187, 230, 294, 408, 559, 575, 741, 778, 779, 781, 782, 805, 832, 837, 849, 966, 1112, 1213], "roll": [183, 184, 187, 294, 383, 384, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 671, 718, 719, 741, 778, 779, 782, 849, 941, 942, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1213], "re": [183, 199, 255, 294, 383, 384, 778, 849, 941, 942, 1220], "come": [183, 294, 383, 384, 455, 496, 741, 754, 778, 848, 849, 941, 942, 1017, 1213], "1d": [183, 203, 230, 265, 294, 363, 387, 391, 399, 402, 405, 408, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 688, 689, 690, 703, 728, 729, 741, 778, 787, 805, 849, 852, 917, 925, 932, 945, 949, 954, 957, 960, 963], "set_index": [183, 294, 778, 849], "resampl": [183, 294, 778, 849], "reset_index": [183, 294, 778, 849], "though": [183, 294, 737, 778, 849], "unlik": [183, 294, 778, 849], "evenli": [183, 294, 778, 849], "upsampl": [183, 294, 778, 849], "1n": [183, 203, 230, 265, 294, 387, 391, 405, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 688, 689, 728, 729, 741, 778, 787, 805, 849, 945, 949, 963], "1u": [183, 203, 230, 265, 294, 387, 391, 405, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 688, 689, 728, 729, 741, 778, 787, 805, 849, 945, 949, 963], "microsecond": [183, 200, 203, 230, 232, 233, 252, 265, 294, 387, 391, 400, 405, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 687, 688, 689, 690, 727, 728, 729, 741, 778, 787, 801, 805, 849, 852, 945, 949, 958, 963], "1m": [183, 203, 230, 265, 294, 376, 387, 391, 400, 401, 403, 404, 405, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 688, 689, 728, 729, 741, 778, 787, 805, 849, 945, 949, 958, 959, 961, 962, 963], "minut": [183, 203, 230, 265, 294, 387, 391, 402, 405, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 687, 688, 689, 690, 727, 728, 729, 741, 778, 787, 805, 849, 852, 945, 949, 960, 963], "1h": [183, 203, 230, 265, 294, 370, 387, 391, 405, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 688, 689, 728, 729, 741, 778, 787, 805, 849, 924, 926, 945, 949, 963], "hour": [183, 203, 230, 265, 294, 387, 391, 399, 405, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 687, 688, 689, 690, 727, 728, 729, 741, 778, 787, 805, 849, 852, 945, 949, 957, 963], "1w": [183, 203, 230, 265, 294, 387, 391, 405, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 688, 689, 728, 729, 741, 778, 787, 805, 849, 945, 949, 963], "1mo": [183, 203, 230, 265, 294, 365, 383, 384, 387, 390, 391, 398, 405, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 688, 689, 728, 729, 741, 778, 787, 805, 849, 919, 940, 941, 942, 945, 946, 947, 948, 949, 956, 963, 964], "month": [183, 203, 230, 265, 294, 368, 383, 384, 387, 391, 405, 559, 562, 563, 564, 565, 566, 568, 569, 570, 684, 685, 686, 687, 688, 689, 690, 728, 729, 741, 778, 787, 805, 849, 922, 941, 942, 945, 949, 963], "1q": [183, 203, 230, 265, 294, 387, 391, 405, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 688, 689, 728, 729, 741, 778, 787, 805, 849, 945, 949, 963], "quarter": [183, 203, 230, 265, 294, 387, 391, 405, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 688, 689, 728, 729, 741, 778, 787, 805, 849, 945, 949, 963], "1y": [183, 203, 230, 265, 294, 387, 391, 405, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 688, 689, 728, 729, 741, 778, 787, 805, 849, 945, 949, 963], "1i": [183, 203, 230, 265, 294, 387, 559, 562, 563, 564, 565, 566, 568, 569, 570, 741, 778, 787, 805, 849, 945], "3d12h4m25": [183, 203, 230, 265, 294, 391, 405, 559, 685, 686, 688, 689, 728, 729, 741, 778, 787, 805, 849, 949, 963], "correspond": [183, 203, 230, 255, 265, 294, 375, 387, 391, 405, 507, 550, 558, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 688, 689, 728, 729, 741, 762, 778, 787, 805, 849, 929, 945, 949, 963, 1084, 1092, 1213], "daylight": [183, 203, 230, 265, 294, 362, 370, 387, 391, 405, 559, 562, 563, 564, 565, 566, 568, 569, 570, 685, 686, 688, 689, 690, 728, 729, 741, 778, 787, 805, 849, 924, 945, 949, 963], "10i": [183, 230, 294, 559, 741, 778, 805, 849], "datetime_rang": [183, 294, 363, 365, 376, 383, 384, 387, 390, 391, 398, 399, 400, 401, 402, 403, 404, 405, 408, 562, 563, 565, 568, 569, 570, 685, 741, 778, 849, 916, 917, 919, 924, 925, 926, 932, 933, 935, 938, 941, 942, 943, 945, 948, 949, 954, 956, 957, 958, 959, 960, 961, 962, 963], "30m": [183, 294, 391, 405, 778, 849, 949, 963], "lower_bound": [183, 294, 338, 340, 439, 741, 778, 849, 893, 895, 994, 1200, 1213], "upper_bound": [183, 294, 338, 339, 439, 496, 741, 778, 849, 893, 894, 994, 1062, 1213], "bys": [183, 294, 778, 849], "int_rang": [183, 263, 280, 294, 665, 778, 792, 837, 849], "2i": [183, 294, 778, 849], "3i": [183, 294, 778, 849], "a_agg_list": [183, 294, 778, 849], "rollinggroupbi": [184, 187, 230, 294], "group_bi": [185, 217, 221, 293, 294, 302, 422, 424, 429, 432, 505, 507, 585, 586, 657, 674, 706, 741, 762, 763, 769, 771, 780, 801, 813, 848, 849, 852], "group_by_dynam": [186, 230, 294, 781, 805, 849], "_lower_bound": [186, 294, 781, 849], "_upper_bound": [186, 294, 781, 849], "seed_1": [188, 294, 434, 741, 988, 1213], "seed_2": [188, 294, 434, 741, 988, 1213], "seed_3": [188, 294, 434, 741, 988, 1213], "hash": [188, 294, 741, 1213], "Its": [188, 294, 434, 741, 988, 1213], "u64": [188, 294, 434, 552, 741, 801, 849, 988, 1213], "10783150408545073287": [188, 294], "1438741209321515184": [188, 294], "10047419486152048166": [188, 294], "2047317070637311557": [188, 294], "ab": [189, 205, 248, 269, 294, 638, 640, 741, 826, 849, 989, 1019, 1184, 1213], "grown": [191, 294], "insert_column": [192, 294], "intermedi": [194, 294, 785, 849, 1221], "linear": [194, 223, 286, 294, 438, 464, 510, 548, 566, 671, 672, 715, 741, 785, 802, 843, 849, 993, 1025, 1083, 1099, 1213], "333333": [194, 294, 454, 526, 741, 785, 849, 1078, 1103, 1213], "mask": [195, 197, 294, 328, 440, 442, 443, 446, 447, 453, 541, 542, 590, 593, 741, 877, 981, 987, 994, 996, 999, 1000, 1005, 1006, 1014, 1079, 1080, 1110, 1129, 1132, 1204, 1213], "visual": [195, 197, 294], "scalar": [198, 206, 231, 294, 574, 663, 703, 706, 741, 1016, 1108, 1213], "With": [198, 240, 294, 489, 562, 563, 564, 565, 566, 568, 569, 570, 576, 741, 811, 849, 1016, 1050, 1114, 1213], "buffer_s": [200, 294], "fit": [200, 242, 263, 294, 578, 717, 741, 1116, 1117, 1213], "signific": [200, 206, 294, 308, 507, 572, 741, 1064, 1105, 1213], "4x": [200, 294], "materialis": [200, 201, 231, 232, 233, 294], "rows_by_kei": [200, 232, 294], "iter_row": [201, 231, 232, 233, 294], "17_500": [201, 294], "klmnoopqrstuvwxyz": [201, 294], "__name__": [201, 294], "7500": [201, 294], "15_000": [201, 294], "record_batch": [201, 294], "to_arrow": [201, 294, 1213], "to_batch": [201, 294], "date32": [201, 294], "large_str": [201, 250, 256, 294], "15000": [201, 294], "2500": [201, 294], "left_on": [202, 203, 264, 294, 786, 787, 823, 849], "right_on": [202, 203, 264, 294, 786, 787, 823, 849], "suffix": [202, 203, 236, 269, 273, 294, 303, 330, 448, 450, 451, 452, 504, 527, 528, 530, 531, 539, 545, 556, 595, 624, 627, 741, 786, 787, 807, 826, 828, 830, 849, 852, 879, 1134, 1166], "_right": [202, 203, 294, 786, 787, 849], "joinvalid": [202, 294, 786, 849], "join_nul": [202, 294, 786, 849], "semi": [202, 294, 786, 849], "anti": [202, 294, 786, 837, 849, 1107, 1110, 1213], "cross": [202, 294, 786, 849], "many_to_mani": [202, 294, 786, 849], "one_to_on": [202, 294, 786, 849], "one_to_mani": [202, 294, 786, 849], "many_to_on": [202, 294, 786, 849], "join_asof": [202, 294, 786, 849], "other_df": [202, 294], "by_left": [203, 294, 787, 849], "by_right": [203, 294, 787, 849], "asofjoinstrategi": [203, 294, 787, 849], "allow_parallel": [203, 294, 786, 787, 849], "force_parallel": [203, 294, 786, 787, 849], "asof": [203, 294, 787, 849], "rather": [203, 294, 518, 547, 558, 637, 741, 787, 849, 1082, 1092, 1176, 1213], "asof_join": [203, 294], "distanc": [203, 294, 787, 849, 990, 1213], "plan": [203, 204, 294, 758, 762, 765, 769, 786, 787, 809, 813, 849], "forc": [203, 206, 280, 294, 496, 786, 787, 837, 849, 1064, 1213], "gdp": [203, 294, 787, 849], "2016": [203, 294, 787, 849], "2017": [203, 294, 787, 849], "2018": [203, 294, 390, 787, 849, 948], "2019": [203, 294, 787, 849], "jan": [203, 294, 787, 849], "1st": [203, 294, 787, 849], "4164": [203, 294, 787, 849], "4411": [203, 294, 787, 849], "4566": [203, 294, 787, 849], "4696": [203, 294, 787, 849], "set_sort": [203, 230, 265, 294, 559, 741, 787, 805, 849, 1213], "popul": [203, 294, 787, 849], "12th": [203, 294, 787, 849], "82": [203, 294, 787, 849], "66": [203, 264, 294, 569, 658, 741, 787, 823, 849, 1099, 1213], "83": [203, 294, 787, 849], "52": [203, 269, 294, 406, 571, 741, 787, 826, 849], "request": [204, 294], "describe_plan": [204, 294], "unoptim": [204, 294], "describe_optimized_plan": [204, 294], "show_graph": [204, 294, 849], "un": [204, 294], "graphviz": [204, 294, 813, 849], "much": [206, 263, 280, 294, 355, 473, 494, 507, 603, 604, 706, 741, 837, 908, 1034, 1055, 1064, 1142, 1143, 1213], "intens": [206, 280, 294, 539, 741, 1064, 1213], "materi": [206, 280, 294, 762, 801, 837, 849, 852, 1064, 1213], "parallelis": [206, 280, 294, 1064, 1213], "achiev": [206, 280, 294, 507, 604, 741, 909, 1064, 1082, 1143, 1213], "best": [206, 280, 294, 507, 741, 1064, 1213], "black": [206, 294, 327, 329, 330, 331], "arbitrarili": [206, 294], "rearrang": [206, 294], "transform": [206, 294, 505, 633, 635, 636, 741], "lru_cach": [206, 294, 507, 741, 1064, 1213], "column_1": [206, 260, 294], "axi": [207, 209, 212, 214, 246, 294, 666, 667, 796, 849], "max_horizont": [207, 294, 707], "null_strategi": [209, 246, 294], "nullstrategi": [209, 246, 294], "mean_horizont": [209, 294], "propag": [209, 246, 294, 412, 532, 533, 535, 589, 741, 1073, 1074, 1128, 1213], "spam": [209, 294, 598, 1137], "ignore_nul": [210, 247, 294, 304, 306, 413, 414, 415, 589, 659, 661, 741, 856, 857, 972, 973, 974, 1128, 1203, 1213], "id_var": [212, 294, 796, 849], "value_var": [212, 294, 796, 849], "variable_nam": [212, 294, 796, 849], "value_nam": [212, 294, 796, 849], "unpivot": [212, 294, 796, 849], "massag": [212, 294, 796, 849], "measur": [212, 294, 796, 849], "merg": [213, 294, 797, 849], "caller": [213, 294, 496, 792, 797, 832, 837, 849], "respons": [213, 294, 797, 849], "steve": [213, 294, 797, 849], "elis": [213, 294, 797, 849], "bob": [213, 294, 797, 849], "ag": [213, 294, 797, 849], "anna": [213, 294, 797, 849], "megan": [213, 294, 797, 849], "thoma": [213, 294, 797, 849], "21": [213, 246, 294, 562, 563, 565, 568, 569, 570, 696, 741, 797, 849, 852], "min_horizont": [214, 294, 711, 720], "what": [217, 294, 1203, 1213], "pack": [217, 294], "expr_unique_subset": [217, 294], "df_nuniqu": [217, 294], "df_agg_nuniqu": [217, 294], "include_kei": [219, 233, 294], "offer": [220, 294, 543, 741, 800, 849], "fulli": [220, 234, 294], "cast_str_to_int": [220, 294, 800, 849], "col_nam": [220, 294, 800, 849], "tdf": [220, 294, 800, 849], "aggregate_funct": [221, 294], "pivotagg": [221, 294], "sort_column": [221, 294], "section": [221, 294, 590, 597, 598, 612, 685, 686, 688, 689, 728, 729, 1129, 1136, 1137, 1151], "predefin": [221, 294], "predict": [221, 224, 265, 294], "transpos": [221, 294], "discoveri": [221, 294], "col1": [221, 260, 294, 849, 1221], "col2": [221, 260, 294, 849, 1221], "col3": [221, 294, 1221], "tanh": [221, 294, 741, 1213], "998347": [221, 294], "964028": [221, 294], "999954": [221, 294], "unique_column_valu": [221, 294], "interpol": [223, 286, 294, 421, 510, 548, 566, 715, 741, 802, 843, 849, 1083, 1099, 1213], "rollinginterpolationmethod": [223, 286, 294, 548, 566, 715, 741, 802, 843, 849, 1083, 1099, 1213], "midpoint": [223, 286, 294, 548, 566, 715, 741, 802, 843, 849, 1083, 1099, 1213], "replace_column": [227, 294], "t_0": [230, 294, 559, 562, 563, 564, 565, 566, 568, 569, 570, 741, 805, 849], "t_1": [230, 294, 559, 562, 563, 564, 565, 566, 568, 569, 570, 741, 805, 849], "t_n": [230, 294, 559, 562, 563, 564, 565, 566, 568, 569, 570, 741, 805, 849], "43": [230, 294, 349, 559, 569, 741, 805, 849], "strptime": [230, 294, 390, 559, 741, 805, 849, 948], "2d": [230, 255, 294, 387, 559, 703, 741, 805, 849, 916, 922], "sum_a": [230, 294, 559, 741, 805, 849], "min_a": [230, 294, 559, 741, 805, 849], "max_a": [230, 294, 559, 741, 805, 849], "by_pred": [231, 294], "accord": [231, 294, 506, 547, 554, 685, 686, 688, 689, 728, 729, 741, 929, 1082, 1088, 1213], "mutual": [231, 294], "exclus": [231, 294, 658, 665, 700, 701, 741], "clariti": [231, 294], "toomanyrowsreturnederror": [231, 294, 753], "norowsreturnederror": [231, 294, 753], "inherit": [231, 294], "rowserror": [231, 294, 753], "high": [233, 294, 547, 741, 1082, 1213], "cost": [233, 294], "reoconstruct": [233, 294], "defaultdict": [233, 294], "assum": [233, 294, 791, 792, 832, 837, 849], "with_replac": [234, 294, 484, 573, 741, 1045, 1106, 1213], "ordereddict": [235, 294, 723, 806, 849], "named_expr": [236, 237, 269, 270, 294, 720, 723, 807, 808, 826, 827, 849], "threshold": [236, 294, 807, 849], "set_auto_structifi": [236, 269, 294, 807, 826, 849], "auto_structifi": [236, 269, 294, 807, 826, 849], "is_odd": [236, 294, 807, 849], "_is_odd": [236, 294, 807, 849], "sequenti": [237, 270, 294, 808, 827, 849], "fill_valu": [240, 241, 263, 294, 576, 577, 741, 811, 812, 849, 1114, 1115, 1213], "opposit": [240, 294, 489, 576, 741, 811, 849, 1050, 1114, 1213], "lag": [240, 294, 489, 576, 671, 741, 811, 849, 1050, 1114, 1213], "shift": [241, 294, 358, 468, 540, 577, 671, 741, 812, 849, 911, 1029, 1078, 1115, 1213], "shrink": [242, 294, 578, 741, 1116, 1117, 1213], "hold": [242, 294], "ddof": [245, 266, 294, 568, 570, 588, 656, 673, 675, 718, 719, 722, 730, 741, 816, 824, 849, 1101, 1103, 1126, 1202, 1213], "deviat": [245, 294, 414, 568, 588, 722, 741, 816, 849, 973, 1126, 1213], "degre": [245, 266, 294, 549, 568, 570, 588, 656, 667, 673, 675, 718, 719, 722, 730, 741, 816, 824, 849, 1101, 1103, 1126, 1202, 1213], "freedom": [245, 266, 294, 568, 570, 588, 656, 673, 675, 718, 719, 722, 730, 741, 816, 824, 849, 1101, 1103, 1126, 1202, 1213], "divisor": [245, 266, 294, 568, 570, 588, 656, 673, 675, 718, 719, 722, 730, 741, 816, 824, 849, 1101, 1103, 1126, 1202, 1213], "816497": [245, 294], "gather_everi": [249, 294, 646, 741, 819, 849, 1186, 1213], "mostli": [250, 294, 422, 741], "categoricaltyp": [250, 294], "fruit": [251, 294, 556, 595, 621, 741, 1134, 1160], "car": [251, 294, 556, 741], "beetl": [251, 294, 556, 741], "audi": [251, 294, 556, 741], "28": [251, 294, 301, 390, 408, 741, 948, 966, 1221], "300": [251, 294, 1095, 1096, 1098, 1213], "drop_first": [253, 294], "dummi": [253, 294, 1190, 1213], "foo_1": [253, 294], "foo_2": [253, 294], "bar_3": [253, 294], "bar_4": [253, 294], "ham_a": [253, 294], "ham_b": [253, 294], "instantiat": [254, 294, 1192, 1213], "from_repr": [254, 294, 1192, 1213], "df_from_str_repr": [254, 294], "eval": [254, 294, 691, 1192, 1213], "indexord": [255, 294], "fortran": [255, 294], "downstream": [255, 294, 575, 741, 1112, 1213], "applic": [255, 294, 507, 562, 563, 564, 565, 566, 568, 569, 570, 741], "prevent": [255, 294, 303, 348, 349, 454, 526, 643, 741, 849, 902, 903, 1183, 1213], "reshap": [255, 294, 471, 741, 1032, 1213], "ll": [255, 294], "u1": [255, 294], "f4": [255, 294], "view": [255, 294, 507, 741, 1194, 1213], "recarrai": [255, 294], "rec": [255, 294], "use_pyarrow_extension_arrai": [256, 294, 1195, 1213], "extens": [256, 294, 1195, 1213], "trigger": [256, 294, 741, 1195, 1213], "sent": [256, 294, 1194, 1195, 1213], "pandas_df1": [256, 294], "pandas_df2": [256, 294], "pandas_df2_pa": [256, 294], "na": [256, 294, 621, 1195, 1213], "four": [258, 294], "five": [258, 294, 1221], "bottom_k": [259, 294, 650, 741, 820, 849, 1197, 1213], "header_nam": [260, 294], "column_nam": [260, 294], "perhap": [260, 294], "column_2": [260, 294], "name_gener": [260, 294], "base_nam": [260, 294], "my_column_": [260, 294], "my_column_0": [260, 294], "my_column_1": [260, 294], "my_column_2": [260, 294], "new_id": [260, 294], "uniquekeepstrategi": [261, 294, 821, 849], "kept": [261, 294, 821, 849], "decompos": [262, 294, 822, 849], "t_a": [262, 294, 822, 849], "t_b": [262, 294, 822, 849], "t_c": [262, 294, 822, 849], "t_d": [262, 294, 822, 849], "womp": [262, 294, 822, 849], "t_": [262, 294, 822, 849], "t_struct": [262, 294, 822, 849], "step": [263, 294, 665, 700, 701], "unstackdirect": [263, 294], "pivot": [263, 294], "phase": [263, 294], "subject": [263, 294], "ascii_uppercas": [263, 294], "h": [263, 294, 301, 394, 397, 578, 628, 630, 634, 741, 1167, 1169, 1173], "x_0": [263, 294, 413, 414, 415, 741, 972, 973, 974, 1213], "x_1": [263, 294], "y_0": [263, 294, 413, 414, 415, 741, 972, 973, 974, 1213], "y_1": [263, 294], "z_0": [263, 294], "z_1": [263, 294], "include_nul": [264, 294, 823, 849], "syntact": [264, 294, 659, 661, 674, 678, 692, 693, 697, 698, 699, 702, 707, 709, 710, 711, 713, 714, 715, 720, 722, 724, 726, 730, 732, 823, 849, 1125, 1213], "sugar": [264, 294, 659, 661, 674, 678, 692, 693, 697, 698, 699, 702, 707, 709, 710, 711, 713, 714, 715, 720, 722, 724, 726, 730, 732, 823, 849, 1125, 1213], "coalesc": [264, 294, 628, 823, 849, 1167], "400": [264, 294, 823, 849, 1095, 1096, 1098, 1213], "600": [264, 294, 823, 849, 852], "700": [264, 294, 823, 849], "new_df": [264, 294, 823, 849], "time_column": [265, 294], "frequenc": [265, 294], "date_rang": [265, 294, 368, 371, 388, 396, 407, 922, 940, 946, 947, 964, 965], "forward_fil": [265, 294, 346, 349, 741], "varianc": [266, 294, 415, 455, 570, 656, 730, 741, 824, 849, 974, 1017, 1103, 1202, 1213], "grow": [267, 294], "not_": [269, 294, 449, 741, 826, 849, 1213], "not_c": [269, 294, 826, 849], "diff": [269, 294, 398, 399, 400, 401, 402, 403, 404, 485, 741, 826, 849, 956, 957, 958, 959, 960, 961, 962, 1046, 1213], "_diff": [269, 294, 826, 849], "row_nr": [271, 294, 554, 562, 563, 565, 568, 569, 570, 741, 829, 849, 1107, 1213], "named_agg": [273, 830], "_sum": [273, 830], "_mean_squar": [273, 830], "b_sum": [273, 830], "c_mean_squar": [273, 830], "sub": [275, 280, 321, 322, 323, 741, 871, 872, 873], "map_group": [275, 663, 832], "deem": [276, 674, 833], "nr": [278, 288, 835, 845], "triangl": [280, 837], "group_df": [280, 837], "maxim": [281, 316, 741, 838, 866, 1213], "833333": [282, 839], "minim": [284, 317, 463, 578, 586, 741, 841, 867, 1024, 1068, 1116, 1213], "overview": [294, 741, 753, 849, 1213, 1221], "frameinittyp": [294, 849], "entri": [294, 849, 1220], "mydatafram": 294, "df4": 294, "df5": 294, "df6": 294, "approx_n_uniqu": [294, 741, 849], "corr": 294, "drop_in_plac": 294, "drop_nul": [294, 360, 741, 849, 913, 1213], "estimated_s": [294, 1213], "explod": [294, 424, 539, 555, 741, 849, 1089, 1213], "find_idx_by_nam": 294, "fold": [294, 516, 670, 676, 677, 680, 681, 716], "frame_equ": 294, "group_by_rol": [294, 849], "groupby_dynam": [294, 849], "groupby_rol": [294, 849], "hash_row": 294, "hstack": 294, "insert_at_idx": 294, "is_dupl": [294, 741, 1213], "is_empti": [294, 1213], "is_uniqu": [294, 741, 1213], "iter_column": 294, "iter_slic": 294, "melt": [294, 849], "merge_sort": [294, 849], "n_uniqu": [294, 741, 1213], "pipe": [294, 741, 849], "quantil": [294, 547, 566, 741, 849, 1082, 1099, 1213], "replace_at_idx": 294, "select_seq": [294, 849], "shift_and_fil": [294, 741, 849, 1213], "shrink_to_fit": [294, 1213], "take_everi": [294, 741, 849, 1213], "to_dummi": [294, 1213], "to_numpi": [294, 505, 741, 1213], "to_panda": [294, 1213], "to_struct": [294, 598], "unnest": [294, 356, 547, 557, 598, 599, 619, 620, 640, 741, 849, 909, 1057, 1082, 1091, 1158, 1159, 1213], "unstack": 294, "with_columns_seq": [294, 849], "write_avro": 294, "write_databas": 294, "write_delta": 294, "write_excel": 294, "write_ipc_stream": 294, "write_json": 294, "write_parquet": 294, "cum_prod": [301, 353, 741, 906, 1213], "ghi": [301, 598, 741, 852, 1137], "94": [302, 741], "to_uppercas": [303, 530, 599, 741], "confus": [304, 448, 450, 741], "kleen": [304, 306, 659, 661, 741, 856, 857, 1213], "bitwis": [305, 538, 658, 659, 660, 661, 662, 741], "upcast": [307, 741], "skip_nul": [308, 507, 741, 859, 1064, 1213], "pass_nam": [308, 507, 741], "mapelementsstrategi": [308, 507, 741], "thread_loc": [308, 507, 741], "map_el": [308, 505, 658, 741, 859, 1213], "unknown": [308, 507, 597, 703, 741, 1136], "stage": [308, 741], "code": [308, 327, 329, 330, 331, 507, 575, 741, 771, 789, 849, 1112, 1213], "gil": [308, 507, 741], "invers": [310, 311, 312, 313, 314, 315, 741, 860, 861, 862, 863, 864, 865, 1213], "cosin": [310, 311, 341, 342, 505, 741, 860, 861, 897, 898, 1213], "570796": [310, 312, 741, 860, 862, 1213], "hyperbol": [311, 313, 315, 342, 582, 648, 741, 861, 863, 865, 898, 1121, 1188, 1213], "sine": [312, 313, 505, 581, 582, 741, 862, 863, 1120, 1121, 1213], "881374": [313, 741, 863, 1213], "tangent": [314, 315, 647, 648, 741, 864, 865, 1187, 1188, 1213], "785398": [314, 666, 667, 741, 864, 1213], "arg_wher": [319, 741], "i8": [324, 368, 372, 380, 382, 388, 389, 392, 406, 407, 495, 578, 714, 717, 732, 741, 874, 911, 922, 926, 938, 940, 947, 950, 964, 965, 1056, 1090, 1200, 1213], "seen": [326, 427, 741], "substr": [327, 330, 331, 590, 595, 612, 613, 618, 619, 620, 621, 852, 876, 879, 880, 1129, 1134, 1151, 1152, 1157, 1158, 1159, 1160], "ends_with": [327, 331, 590, 621, 852, 1160], "yellow": [327, 329, 330, 331], "x00": [327, 329, 330, 331], "xff": [327, 329, 330, 331], "contains_with_lit": 327, "contains_with_expr": 327, "transferencod": [328, 329, 593, 594, 877, 878, 1132, 1133], "hex": [328, 329, 593, 594, 632, 877, 878, 1132, 1133, 1171], "base64": [328, 329, 593, 594, 877, 878, 1132, 1133], "code_encoded_hex": 329, "000000": 329, "ffff00": 329, "0000ff": 329, "anywher": [330, 331, 628, 629, 630, 1167, 1168, 1169], "ends_with_lit": 330, "ends_with_expr": 330, "starts_with_lit": 331, "starts_with_expr": 331, "complex": [332, 355, 650, 741, 881, 908, 1197, 1213], "frac": [332, 413, 414, 415, 583, 650, 741, 881, 972, 973, 974, 1122, 1197, 1213], "to_fram": [334, 371, 391, 396, 405, 628, 909, 1082, 1107, 1110, 1158, 1159, 1167, 1213], "categoricalord": [335, 886], "lexic": [335, 852, 886, 888], "259921": [336, 741, 889, 1213], "587401": [336, 741], "numericliter": [338, 339, 340, 741, 893, 894, 895, 1213], "temporalliter": [338, 339, 340, 741, 893, 894, 895, 1213], "outsid": [338, 741, 893, 1213], "clip": [339, 340, 741, 894, 895, 1213], "543081": [342, 741, 898, 1213], "cotang": [343, 741, 899, 1213], "cumul": [345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 676, 677, 678, 679, 680, 681, 682, 683, 741, 900, 901, 902, 903, 904, 905, 906, 907, 1213], "cum_count_revers": [345, 741], "cum_max_revers": [346, 741], "cum_max_all_fil": [346, 741], "cum_min_revers": [347, 741], "cum_prod_revers": [348, 741], "cum_sum_revers": [349, 741], "value_cum_sum": [349, 741], "value_cum_sum_all_fil": [349, 741], "cum_count": [350, 741], "cum_max": [351, 741, 904, 1213], "cum_min": [352, 741, 905, 1213], "cum_sum": [354, 437, 641, 679, 682, 741, 784, 849, 907, 1016, 1213], "min_period": [355, 413, 414, 415, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 718, 719, 741, 908, 972, 973, 974, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1213], "slide": [355, 741, 908, 1213], "slot": [355, 358, 468, 741, 908, 911, 1029, 1213], "realli": [355, 741, 908, 1213], "visit": [355, 741, 908, 1213], "left_clos": [356, 547, 741, 909, 1082, 1213], "include_break": [356, 547, 741, 909, 1082, 1213], "bin": [356, 547, 632, 658, 734, 741, 909, 990, 1082, 1171, 1207, 1213], "discret": [356, 358, 410, 468, 485, 547, 741, 909, 911, 969, 990, 1029, 1046, 1082, 1213], "plu": [356, 500, 741, 909, 1061, 1082, 1213], "endpoint": [356, 547, 562, 563, 564, 565, 566, 568, 569, 570, 741, 909, 1082, 1213], "observ": [356, 413, 414, 415, 547, 741, 909, 972, 973, 974, 1082, 1213], "fall": [356, 547, 558, 741, 909, 994, 1082, 1092, 1213], "qcut": [356, 741, 909, 1213], "breakpoint": [356, 547, 741, 909, 1082, 1213], "brk": [356, 547, 741], "foo_bin": [356, 547, 741], "radian": [357, 666, 741], "720": [357, 549, 741], "540": [357, 549, 741], "360": [357, 549, 741], "180": [357, 549, 741], "null_behavior": [358, 468, 741, 911, 1029, 1213], "nullbehavior": [358, 468, 741, 911, 1029, 1213], "drop_nan": [361, 741, 914, 1213], "utc": [362, 365, 370, 390, 628, 630, 852, 916, 919, 924, 948, 1167, 1169], "usual": [362, 916], "vari": [362, 916, 1221], "rare": [362, 916], "countri": [362, 916], "switch": [362, 916], "samoa": [362, 916], "apia": [362, 916], "did": [362, 916], "2011": [362, 916], "dst_offset": [362, 916], "2012": [362, 916], "replace_time_zon": [362, 370, 920, 921, 953], "pacif": [362, 916], "11h": [362, 916], "13h": [362, 916], "lose": [363, 917], "time_unit_m": [363, 917], "time_unit_n": [363, 917], "naiv": [364, 918, 1169], "compon": [364, 392, 628, 630, 690, 918, 950, 1167, 1169], "resolv": 364, "tm": [364, 852], "456000": [364, 918], "101000": 364, "d1": 364, "d2": 364, "d3": 364, "europ": [365, 370, 390, 919, 924, 948], "london": [365, 370, 390, 919, 924, 948], "gmt": [365, 370, 390, 919, 924, 948], "bst": [365, 370, 390, 919, 924, 948], "weekdai": [368, 388], "ordinal_dai": [368, 407], "day_of_month": [368, 388, 407], "day_of_year": [368, 388, 407], "356": [368, 388, 407], "357": [368, 388, 407], "358": [368, 388, 407], "359": [368, 388, 407], "total_dai": [369, 923], "base_utc_offset": [370, 924], "0m": [370, 924], "epochtimeunit": [371, 696, 925], "unix": [371, 696, 925], "epoch_n": [371, 925], "epoch_": [371, 925], "978307200000000": [371, 396, 925, 954], "978307200": [371, 925], "978393600000000": [371, 396, 925, 954], "978393600": [371, 925], "978480000000000": [371, 396, 925, 954], "978480000": [371, 925], "2010": [372, 380, 852], "total_hour": [373, 927], "leap": [374, 387, 928, 945], "2002": [374, 387, 928, 945, 967], "iso": [375, 406, 407, 929, 964, 965], "1977": [375, 409], "1978": [375, 409], "1979": [375, 409], "calendar_year": [375, 409], "1976": [375, 409], "1_001": [376, 400, 401, 403], "002": [376, 400, 401, 403, 690, 958, 959, 961], "003": [376, 400, 401, 403], "3000": 376, "997": [376, 400, 401, 403], "997000": 376, "998": [376, 400, 401, 403], "998000": 376, "999": [376, 400, 401, 403, 852, 1221], "999000": [376, 852], "total_microsecond": [377, 934], "total_millisecond": [379, 936], "total_minut": [381, 939], "think": [383, 384, 941, 942], "vectoris": [383, 384, 941, 942], "tseri": [383, 384, 941, 942], "monthend": [383, 941], "rollforward": [383, 941], "monthbegin": [384, 942], "rollback": [384, 942], "total_nanosecond": [386, 944], "minu": [387, 945], "dictat": [387, 741, 945], "2005": [387, 945], "date_plus_1i": [387, 945], "1y2mo": [387, 945], "date_min": 387, "1998": [387, 945], "1999": [387, 852, 945], "2003": [387, 696, 945], "2004": [387, 945], "2006": [387, 945], "new_dat": 387, "ordin": [388, 550, 741, 946, 1084, 1213], "366": [388, 946], "use_earliest": [390, 405, 628, 630, 687, 948, 963, 1167, 1169], "ambigu": [390, 391, 405, 628, 630, 687, 948, 949, 963, 1167, 1169], "convert_time_zon": [390, 948], "london_timezon": [390, 948], "amsterdam": [390, 948], "london_to_amsterdam": [390, 948], "cet": [390, 948], "cest": [390, 948], "ts_local": [390, 948], "brussel": [390, 948], "half": [391, 413, 414, 415, 741, 949, 972, 973, 974, 1213], "localis": [391, 405, 949, 963], "dst": [391, 405, 949, 963], "cst": [391, 405, 949, 963], "cdt": [391, 405, 949, 963], "225": [391, 405], "10m": [391, 405, 949, 963], "milli": [392, 950], "micro": [392, 950], "456789": [392, 852, 950], "111110": [392, 950], "765431": [392, 950], "11111": [392, 950], "total_second": [393, 951], "to_str": [394, 952], "datetime_str": [394, 397], "timestamp_n": [396, 954], "timestamp_m": 396, "978307200000": 396, "978393600000": 396, "978480000000": 396, "strftime": [397, 955], "days_diff": 398, "hours_diff": 399, "microseconds_diff": 400, "milliseconds_diff": 401, "minutes_diff": 402, "1440": [402, 960], "nanoseconds_diff": 403, "seconds_diff": 404, "safe": [405, 552, 741, 949, 963, 1086, 1169, 1194, 1213], "truncate_str": 405, "truncate_td": 405, "53": [406, 964], "time_unit_u": 408, "32971": [408, 966], "32974": [408, 966], "32976": [408, 966], "iso_year": 409, "pk": [410, 741, 969, 1213], "probabl": [410, 547, 741, 969, 1082, 1213], "459148": [410, 741], "754888": [410, 741], "eq": [412, 741, 1213], "span": [413, 414, 415, 741, 972, 973, 974, 1213], "half_lif": [413, 414, 415, 741, 972, 973, 974, 1213], "adjust": [413, 414, 415, 583, 741, 972, 973, 974, 1122, 1213], "exponenti": [413, 414, 415, 417, 544, 741, 972, 973, 974, 975, 1213], "weight": [413, 414, 415, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 583, 741, 972, 973, 974, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1122, 1213], "decai": [413, 414, 415, 741, 972, 973, 974, 1213], "term": [413, 414, 415, 741, 972, 973, 974, 1213], "mass": [413, 414, 415, 741, 972, 973, 974, 1213], "gamma": [413, 414, 415, 741, 972, 973, 974, 1213], "foral": [413, 414, 415, 741, 972, 973, 974, 1213], "geq": [413, 414, 415, 741, 972, 973, 974, 1213], "theta": [413, 414, 415, 741, 972, 973, 974, 1213], "life": [413, 414, 415, 741, 972, 973, 974, 1213], "exp": [413, 414, 415, 741, 972, 973, 974, 1213], "ln": [413, 414, 415, 741, 972, 973, 974, 1213], "smooth": [413, 414, 415, 741, 972, 973, 974, 1213], "factor": [413, 414, 415, 649, 741, 972, 973, 974, 1196, 1213], "leq": [413, 414, 415, 741, 972, 973, 974, 1213], "imbal": [413, 414, 415, 741, 972, 973, 974, 1213], "ew": [413, 414, 415, 741, 972, 973, 974, 1213], "w_i": [413, 414, 415, 741, 972, 973, 974, 1213], "recurs": [413, 414, 415, 741, 972, 973, 974, 1213], "y_t": [413, 414, 415, 741, 972, 973, 974, 1213], "y_": [413, 414, 415, 741, 972, 973, 974, 1213], "x_t": [413, 414, 415, 741, 972, 973, 974, 1213], "x_2": [413, 414, 415, 741, 972, 973, 974, 1213], "428571": [413, 741, 972, 1213], "bia": [414, 415, 455, 567, 583, 741, 973, 974, 1017, 1100, 1122, 1213], "unbias": [414, 415, 741, 973, 974, 1213], "963624": [414, 741, 973, 1213], "928571": [415, 741, 974, 1213], "wildcard": [416, 676, 677, 680, 681, 694, 716, 741], "regex": [416, 513, 590, 591, 592, 595, 597, 598, 599, 612, 613, 621, 692, 741, 852, 1129, 1130, 1131, 1134, 1136, 1137, 1138, 1151, 1152, 1160], "aa": [416, 590, 692, 741, 1129], "ba": [416, 621, 692, 741, 852], "cc": [416, 692, 741], "718282": [417, 741], "389056": [417, 741], "59815": [417, 741], "expand": [418, 512, 513, 553, 741, 852, 976, 1213], "pythonliter": [419, 741, 978, 1065, 1068, 1213], "extrem": [419, 561, 741, 978, 1094, 1213], "group_col": [422, 657, 741], "g1": [422, 657, 741], "g2": [422, 657, 741], "lt": [422, 657, 741, 1213], "gte": [422, 657, 741], "exprlistnamespac": [424, 741], "divis": [426, 651, 741], "truediv": [426, 741], "9774092659964970114": [434, 741], "13614470193936745724": [434, 741], "1101441246220388612": [434, 741], "11638928888656214026": [434, 741], "13382926553367784577": [434, 741], "interpolationmethod": [438, 741, 993, 1213], "regrid": [438, 741], "grid": [438, 741], "df_original_grid": [438, 741], "grid_point": [438, 741], "df_new_grid": [438, 741], "conflat": [439, 741], "finit": [441, 651, 673, 741, 998, 1213], "occurr": [442, 443, 446, 447, 655, 741, 990, 999, 1000, 1005, 1006, 1201, 1213], "is_first_distinct": [442, 741, 999, 1213], "optional_memb": [444, 741, 1002, 1213], "infinit": [445, 651, 741, 1003, 1213], "is_last_distinct": [446, 741, 1005, 1213], "_isnan": [448, 741], "b_isnan": [448, 741], "negat": [449, 536, 741, 1076, 1213], "_is_not_nan": [450, 741], "b_is_not_nan": [450, 741], "_not_nul": [451, 741], "a_not_nul": [451, 741], "b_not_nul": [451, 741], "_isnul": [452, 741], "a_isnul": [452, 741], "b_isnul": [452, 741], "chain": [454, 526, 528, 529, 530, 531, 545, 642, 731, 741], "undo": [454, 519, 526, 528, 529, 545, 642, 741], "fisher": [455, 583, 741, 1017, 1122, 1213], "fourth": [455, 741, 1017, 1213], "subtract": [455, 641, 741, 1017, 1213], "distribut": [455, 583, 741, 1017, 1122, 1213], "elimin": [455, 741, 1017, 1213], "bias": [455, 583, 741, 1017, 1122, 1213], "scipi": [455, 583, 741, 1017, 1122, 1213], "stat": [455, 583, 741, 1017, 1122, 1213], "153061": [455, 741], "sublist": [462, 463, 465, 468, 472, 473, 474, 475, 476, 477, 485, 490, 493, 494, 496, 1002, 1023, 1024, 1026, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1046, 1051, 1054, 1055, 1057, 1213], "membership": [465, 1026], "number_of_two": 467, "blindli": [470, 1031], "worth": [470, 1031], "enough": [470, 583, 741, 1031, 1122, 1213], "rank": [470, 673, 691, 741, 1031, 1213], "concat_list": [470, 691, 1031], "exprnamespac": 471, "flat": [471, 555, 741, 1032, 1089, 1213], "null_on_oob": [473, 494, 1034, 1055], "cheaper": [473, 494, 1034, 1055], "x_y": 476, "symmetr": [487, 1048], "sdiff": 487, "taken": [490, 617, 1051, 1156], "n_field_strategi": [496, 1057], "tostructstrategi": [496, 1057], "first_non_nul": [496, 1057], "max_width": [496, 1057], "field_0": [496, 1057], "field_1": [496, 1057], "field_n": [496, 1057], "pre": [496, 507, 547, 714, 717, 732, 741, 1082, 1213], "obtain": 496, "ok": 496, "longest": 496, "n0": 496, "n1": 496, "logarithm": [498, 499, 500, 741, 1059, 1060, 1061, 1213], "584963": [498, 741], "30103": [499, 741], "60206": [499, 741], "natur": [500, 741, 1061, 1213], "693147": [500, 741], "098612": [500, 741], "386294": [500, 741], "lowest": [501, 741], "9223372036854775808": [501, 741], "agg_list": [503, 505, 741], "map_batch": [503, 704, 741, 791, 849], "keep_nam": [504, 741], "a_revers": [504, 527, 529, 556, 642, 741], "b_revers": [504, 527, 529, 556, 642, 741], "rstrip": [504, 527, 741], "_revers": [504, 527, 529, 556, 642, 741], "whole": [505, 585, 586, 597, 741, 837, 849, 1136], "elementwis": [505, 560, 561, 562, 563, 565, 569, 741, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1213], "third": [505, 741], "parti": [505, 741], "book": [505, 741], "bug": [505, 507, 741, 791, 792, 832, 837, 849, 1064, 1213], "func": [505, 741], "argmax": [505, 741], "remap": [506, 741, 1063, 1213], "lookup": [506, 554, 737, 741, 1063, 1088, 1213], "discourag": [507, 741], "loop": [507, 741], "a_times_2": [507, 741], "tip": [507, 741], "again": [507, 741], "behav": [507, 624, 625, 741], "exprmetanamespac": [511, 514], "foo_bar2": [511, 514], "raise_if_undetermin": 515, "computeerror": [515, 611, 632, 753, 1150, 1171], "e_filt": [515, 517], "e_sum_ov": [515, 517], "e_sum_slic": [515, 517], "tree": 518, "modulu": [522, 741], "xlog2": [524, 544, 741], "reverse_": [528, 545, 741], "reverse_a": [528, 545, 741], "reverse_b": [528, 545, 741], "lowercas": [530, 633, 1172], "uppercas": [531, 636, 1175], "to_lowercas": 531, "poison": [532, 533, 741, 1073, 1074, 1213], "nanmax": [532, 533, 741, 1073, 1074, 1213], "inequ": [534, 741], "ne": [535, 741, 1213], "more_expr": [539, 668, 670, 671, 672, 741], "mapping_strategi": [539, 741], "windowmappingstrategi": [539, 741], "group_to_row": [539, 741], "outcom": [539, 741], "group_dtyp": [539, 741], "warn": [539, 562, 563, 564, 565, 566, 568, 569, 570, 741], "flatten": [539, 741], "_max": [539, 741], "c_max": [539, 741], "_min": [539, 741], "c_min": [539, 741], "percent": [540, 741, 1078, 1213], "090909": [540, 741], "peak": [541, 542, 741, 1079, 1080, 1213], "extract_numb": [543, 741], "digit": [543, 571, 572, 598, 741, 1104, 1105, 1131, 1137, 1213, 1221], "scale_negative_even": [543, 741], "expon": [544, 741, 1213], "allow_dupl": [547, 741, 1082, 1213], "duplicateerror": [547, 741, 753, 1082, 1213], "happen": [547, 741, 1082, 1213], "cut": [547, 741, 1082, 1213], "566371": [549, 741], "424778": [549, 741], "283185": [549, 741], "141593": [549, 741, 860, 1213], "rankmethod": [550, 741, 1084, 1213], "ti": [550, 741, 1084, 1213], "competit": [550, 741, 1084, 1213], "highest": [550, 654, 673, 741, 849, 1084, 1213], "immedi": [550, 665, 669, 685, 686, 688, 689, 700, 701, 714, 717, 723, 728, 729, 732, 741, 1084, 1213], "_nodefault": [554, 741, 1088, 1213], "no_default": [554, 741, 1088, 1213], "country_cod": [554, 741, 1088, 1213], "fr": [554, 741, 1088, 1213], "de": [554, 741, 1088, 1213], "country_code_map": [554, 741, 1088, 1213], "ca": [554, 741, 1088, 1213], "canada": [554, 741, 1088, 1213], "germani": [554, 741, 1088, 1213], "franc": [554, 741, 1088, 1213], "unspecifi": [554, 741, 1088, 1213], "fruits_revers": [556, 741], "cars_revers": [556, 741], "rle": [558, 741, 1092, 1213], "themselv": [558, 741, 1092, 1213], "a_r": [558, 741], "ab_r": [558, 741], "window_s": [560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 718, 719, 741, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1213], "rolling_map": [560, 741, 1093, 1213], "multipli": [560, 561, 562, 563, 565, 568, 569, 570, 741, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1213], "rolling_sum": [561, 741, 1094, 1213], "nansum": [561, 741, 1094, 1213], "warn_if_unsort": [562, 563, 564, 565, 566, 568, 569, 570, 741], "travers": [562, 563, 565, 569, 741, 1095, 1096, 1098, 1101, 1102, 1103, 1213], "vector": [562, 563, 565, 569, 741, 1095, 1096, 1098, 1101, 1102, 1103, 1213], "5h": [562, 563, 564, 565, 566, 568, 569, 570, 741], "df_tempor": [562, 563, 565, 568, 569, 570, 741], "closur": [562, 563, 568, 569, 570, 741], "rolling_row_max": [562, 741], "2h": [562, 563, 565, 568, 569, 570, 741], "rolling_row_mean": [563, 741], "rolling_row_min": [565, 741], "625": [566, 741], "skew": [567, 741, 1100, 1213], "381802": [567, 741, 1100, 1213], "47033": [567, 741, 1100, 1213], "38180177416060584": [567, 741, 1100, 1213], "47033046033698594": [567, 741, 1100, 1213], "433013": [568, 741, 816, 849], "rolling_row_std": [568, 741], "rolling_row_sum": [569, 741], "39": [569, 696, 741], "63": [569, 741], "69": [569, 741], "1875": [570, 741, 824, 849], "rolling_row_var": [570, 741], "figur": [572, 741, 813, 849, 1105, 1213], "01234": [572, 741, 1105, 1213], "012": [572, 741, 1105, 1213], "1200": [572, 741, 1105, 1213], "searchsortedsid": [574, 741, 1108, 1213], "leftmost": [574, 741, 1108, 1213], "rightmost": [574, 741, 1108, 1213], "six": [574, 741], "extrema": [578, 741, 1116, 1213], "112": [578, 741, 1221], "129": [578, 741], "8589934592": [578, 741], "1073741824": [578, 741], "175201": [582, 741, 1121, 1213], "unimod": [583, 741, 1122, 1213], "skewtest": [583, 741, 1122, 1213], "speak": [583, 741, 1122, 1213], "g_1": [583, 741, 1122, 1213], "m_3": [583, 741, 1122, 1213], "m_2": [583, 741, 1122, 1213], "m_i": [583, 741, 1122, 1213], "sum_": [583, 741, 1122, 1213], "texttt": [583, 741, 1122, 1213], "k_3": [583, 741, 1122, 1213], "k_2": [583, 741, 1122, 1213], "sqrt": [583, 666, 667, 741, 1122, 1213], "343622": [583, 741], "value1": [586, 741], "value2": [586, 741], "attain": [586, 741], "414214": [587, 741, 1125, 1213], "sensit": [590, 598, 612, 1129, 1137, 1151], "ilmsuxu": [590, 597, 598, 612, 1129, 1136, 1137, 1151], "default_match": 590, "insensitive_match": 590, "crab": [590, 1129], "dog": [590, 633, 636, 672, 1129, 1172, 1175], "rab": [590, 614, 1129, 1153], "success": [591, 592, 598, 1130, 1131, 1137], "overlap": [591, 592, 598, 1130, 1131, 1137], "bla": [592, 598, 1131, 1137], "asd": [592, 598, 1131, 1137], "678": [592, 598, 1131, 1137], "910t": [592, 598, 1131, 1137], "count_digit": 592, "dbc": [592, 1131], "3xy": [592, 1131], "1zy3": [592, 1131], "strings_hex": 594, "666f6f": [594, 1133], "626172": [594, 1133], "mango": [595, 621, 1134, 1160], "has_suffix": 595, "le": [595, 741, 1213], "nu": 595, "group_index": [597, 1136], "captur": [597, 599, 1136, 1138], "nthose": [597, 1136], "nodd": [597, 1136], "nthe": [597, 1136], "odd": 597, "vote": [597, 599, 1136, 1138], "ballon_dor": [597, 599, 1136, 1138], "404": [597, 599, 1136, 1138], "ref": [597, 599, 1136, 1138], "candid": [597, 599, 1136, 1138], "messi": [597, 599, 1136, 1138], "ronaldo": [597, 1136], "haystack": [598, 1137], "email": [598, 1137], "real": [598, 1137], "some_account": [598, 1137], "somewher": [598, 1137], "net": [598, 1137], "jkl": [598, 1137], "uvw": [598, 1137], "co": [598, 741, 1137, 1213], "uk": [598, 1137], "address": 598, "xi": [598, 1137], "insensit": [598, 612, 852, 1129, 1137, 1151], "quantifi": [598, 1137], "email_part": [598, 1137], "extracted_nr": 598, "910": [598, 1137], "unnam": [599, 1138], "weghorst": [599, 1138], "candi": 599, "json_path_match": [600, 1139], "jsonpath": [600, 602, 1139, 1141], "json_decod": [601, 1140], "json_path": [602, 1141], "json_val": [602, 1141], "len_char": [603, 608, 1142, 1147], "_o": [603, 604, 1142, 1143], "caf\u00e9": [603, 604, 1142, 1143], "345": [603, 604, 1142, 1143], "\u6771\u4eac": [603, 604, 1142, 1143], "n_byte": [603, 604], "n_char": [603, 604], "fill_char": [606, 609, 610, 615, 1145, 1148, 1149, 1154], "justifi": [606, 615, 1145, 1154], "pad_end": [606, 610, 1145, 1149], "strip_chars_start": [607, 624, 626, 1146], "pad": [609, 610, 637, 1148, 1149, 1176], "reach": [609, 610, 637, 1148, 1149, 1176], "pad_start": [609, 615, 637, 1148, 1154, 1176], "cow": [609, 610, 1148, 1149], "monkei": [609, 610, 1148, 1149], "hippopotamu": [609, 610, 1148, 1149], "zfill": [610, 658, 741, 1149], "radix": [611, 632, 1150, 1171], "parseerror": [611, 632, 1150, 1171], "becom": 611, "to_integ": [611, 1150], "silent": [611, 632, 1150, 1171], "replace_al": [612, 1151], "citi": 612, "philadelphia": 612, "season": 612, "spring": 612, "summer": 612, "autumn": 612, "winter": 612, "weather": [612, 1151], "raini": [612, 1151], "sunni": [612, 1151], "cloudi": 612, "snowi": 612, "foggi": [612, 1151], "123abc": [612, 1151], "abc456": [612, 1151], "abcabc": [613, 1152], "123a123": [613, 1152], "bc": [613, 724, 1152], "man": [614, 1153], "ana": [614, 1153], "oof": [614, 1153], "anan": [614, 1153], "am": [614, 1153], "strip_chars_end": [616, 625, 627, 1155], "subslic": [617, 1156], "pear": [617, 1156], "papaya": [617, 1156], "dragonfruit": [617, 1156], "s_slice": 617, "ear": [617, 1156], "aya": [617, 1156], "uit": [617, 1156], "ya": [617, 1156], "onf": [617, 1156], "foo_bar_baz": 618, "split_inclus": 618, "foo_": [618, 695], "bar_": 618, "a_1": [619, 1158, 1190, 1213], "d_4": [619, 1158], "rename_field": [619, 620, 909, 1082, 1158, 1159, 1213], "first_part": [619, 620, 1158, 1159], "second_part": [619, 620, 1158, 1159], "remaind": [620, 1159], "app": [621, 1160], "has_prefix": 621, "strip_char": [622, 1161], "nworld": 623, "foo_strip": 623, "ow": 623, "hell": [623, 1162], "rld": [623, 625, 1164], "word": [624, 625], "strip_suffix": [624, 626], "foo_strip_end": 624, "oldw": 624, "he": 624, "abcdeff": 624, "fed": 624, "strip_prefix": [625, 627], "tworld": [625, 1162, 1164], "foo_strip_start": 625, "wod": [625, 1164], "aabcdef": 625, "cba": 625, "foobar": [626, 627, 1165, 1166], "foofoobar": [626, 1165], "foobarbar": [627, 1166], "polarstemporaltyp": [628, 1167], "penalti": [628, 629, 630, 1167, 1168, 1169], "clean": [628, 629, 630, 1167, 1168, 1169], "beforehand": [628, 629, 630, 1167, 1168, 1169], "certainli": [628, 629, 630, 1167, 1168, 1169], "3f": [628, 630, 1167, 1169], "00z": [628, 630, 1167, 1169], "sun": [628, 1167], "jul": [628, 1167], "34": [628, 1167], "inference_length": [631, 1170], "3420": [631, 1170], "120134": [631, 1170], "3212": [631, 1170], "90": [631, 1170], "143": [631, 1170, 1221], "numbers_decim": 631, "110": [632, 1171], "fa1e": [632, 1171], "ff00": [632, 1171], "cafe": [632, 1171], "64030": [632, 1171], "65280": [632, 1171], "51966": [632, 1171], "variant": [633, 635, 636, 1004, 1213], "foo_low": 633, "titlecas": [635, 1174], "sing": [635, 1174], "welcom": [635, 1174], "THERE": [635, 1174], "NO": [635, 852, 1174], "foo_titl": 635, "There": [635, 1174], "foo_upp": 636, "999999": [637, 687, 727, 728, 729, 852, 1176], "0123": [637, 1176], "cd": [638, 640], "struct_col": [638, 640], "www": 640, "xxx": 640, "yyi": 640, "zzz": 640, "obvious": 640, "structfieldnotfounderror": [640, 753], "761594": [648, 741, 1188, 1213], "replic": [649, 741, 1196, 1213], "vals_phys": [649, 741], "floordiv": [651, 741], "ieee": [651, 741], "754": [651, 741], "mathemat": [651, 691, 741], "undefin": [651, 741], "On": [651, 741], "operand": [651, 741], "infin": [651, 741], "value_count": [653, 741, 1213], "9223372036854775807": [654, 741], "binary_str": [658, 741], "250": [658, 741, 1096, 1213, 1221], "bin_x": [658, 741], "bin_i": [658, 741], "xor_xi": [658, 741], "bin_xor_xi": [658, 741], "00001010": [658, 741], "00001011": [658, 741], "00001000": [658, 741], "00000010": [658, 741], "11111010": [658, 741], "00000011": [658, 741], "249": [658, 741], "11111001": [658, 741], "01000010": [658, 741], "00000100": [658, 741], "70": [658, 741], "01000110": [658, 741], "AND": [659, 660, 852, 1194, 1213], "OR": [661, 662, 774, 849, 852], "any_horizont": 661, "returns_scalar": [663, 706, 741], "polarsintegertyp": [665, 700, 701], "arctan": [666, 667, 741, 1213], "angl": [666, 667], "plane": [666, 667], "rai": [666, 667], "tworoottwo": [666, 667], "arctan2d": 666, "atan2d": [666, 667], "atan2": [666, 667], "135": [666, 667], "356194": [666, 667], "arctan2": 667, "arg_tru": [669, 741, 1213], "mimic": 671, "a_lag_": 671, "a_rol": 671, "swim": 672, "walk": 672, "full_sent": 672, "correlationmethod": 673, "propagate_nan": 673, "spearman": 673, "544705": 673, "covari": [675, 719, 741], "acc": [676, 677, 680, 681, 694, 716], "include_init": [676, 680], "accumul": [676, 677, 680, 681, 694, 716], "fn": [676, 677, 680, 681, 694, 716], "new_valu": [676, 677, 680, 681, 694, 716], "cum_reduc": 676, "cumsum_horizont": 678, "cum_sum_horizont": 683, "granular": 685, "finer": 685, "permut": 685, "1985": [685, 688], "america": 688, "new_york": 688, "est": 688, "contrast": 690, "offset_bi": 690, "sometim": [690, 740], "tbl_width_char": 690, "120": 690, "add_week": 690, "add_dai": 690, "add_second": 690, "add_milli": 690, "add_hour": 690, "add_calendar_dai": 690, "add_calendar_month": 690, "mo": 690, "add_calendar_year": 690, "2024": [690, 852], "a_b_doubl": 691, "f_string": 695, "placehold": 695, "hello_": 695, "_world": 695, "_bar_": 695, "foo_a_bar_1": 695, "foo_b_bar_2": 695, "foo_c_bar_3": 695, "epoch": 696, "timestep": 696, "1666683077": 696, "1666683099": 696, "12345": [696, 890, 983, 1104, 1213], "12346": 696, "agg_group": [697, 741], "allow_object": 703, "valueexcept": 703, "test_func": 705, "list_of_seri": 706, "my_custom_aggreg": 706, "understood": 706, "power": [721, 1213], "a_a": 721, "a_txt": 721, "605551": 722, "605551275463989": 722, "my_struct": 723, "thens": 731, "elif": 731, "pick": 731, "met": 731, "implicitli": 731, "own": [731, 1221], "isn": 731, "arr": [733, 1194, 1205, 1213], "technic": 737, "further": [737, 1195, 1213], "columnfactori": 737, "more_nam": 737, "__call__": 737, "helper": 737, "__getattr__": 737, "idiomat": [737, 837], "quick": [737, 910, 1213, 1221], "prototyp": 737, "keystrok": 737, "drawback": 737, "readabl": 737, "modul": [740, 852, 1221], "and_": 741, "arcco": [741, 1213], "arccosh": [741, 1213], "arcsin": [741, 1213], "arcsinh": [741, 1213], "arctanh": [741, 1213], "arg_max": [741, 1213], "arg_min": [741, 1213], "arg_sort": [741, 1213], "arg_uniqu": [741, 1213], "backward_fil": 741, "cbrt": [741, 1213], "clip_max": [741, 1213], "clip_min": [741, 1213], "cosh": [741, 1213], "cot": [741, 1213], "cumcount": 741, "cummax": [741, 1213], "cummin": [741, 1213], "cumprod": [741, 1213], "cumsum": [741, 1213], "cumulative_ev": [741, 1213], "entropi": [741, 1213], "eq_miss": [741, 1213], "ewm_mean": [741, 1213], "ewm_std": [741, 1213], "ewm_var": [741, 1213], "extend_const": [741, 1213], "from_json": 741, "ge": [741, 1213], "gt": [741, 1213], "implod": [741, 1213], "inspect": [741, 849], "is_between": [741, 1213], "is_finit": [741, 1213], "is_first": [741, 1213], "is_infinit": [741, 1213], "is_last": [741, 1213], "is_nan": [741, 1213], "is_not": 741, "is_not_nan": [741, 1213], "is_not_nul": [741, 1213], "kurtosi": [741, 1213], "log10": [741, 1213], "log1p": [741, 1213], "map_alia": 741, "map_dict": [741, 1213], "mod": 741, "mul": 741, "nan_max": [741, 1213], "nan_min": [741, 1213], "ne_miss": [741, 1213], "or_": 741, "pct_chang": [741, 1213], "peak_max": [741, 1213], "peak_min": [741, 1213], "pow": [741, 1213], "register_plugin": 741, "lib": [741, 1189, 1213], "is_elementwis": 741, "input_wildcard_expans": 741, "cast_to_supertyp": 741, "pass_name_to_appli": 741, "changes_length": 741, "plugin": 741, "highli": 741, "unsaf": 741, "unstabl": 741, "serializ": 741, "ran": 741, "reinterpret": [741, 1213], "repeat_bi": 741, "rle_id": [741, 1213], "rolling_appli": [741, 1213], "rolling_max": [741, 1213], "rolling_mean": [741, 1213], "rolling_median": [741, 1213], "rolling_min": [741, 1213], "rolling_quantil": [741, 1213], "rolling_skew": [741, 1213], "rolling_std": [741, 1213], "rolling_var": [741, 1213], "round_sig_fig": [741, 1213], "search_sort": [741, 1213], "shrink_dtyp": [741, 1213], "sin": [741, 1213], "sinh": [741, 1213], "sort_bi": 741, "tan": [741, 1213], "to_phys": [741, 887, 1213], "unique_count": [741, 1213], "xor": 741, "expos": 753, "miscellan": 753, "arrowerror": 753, "columnnotfounderror": 753, "invalidoperationerror": 753, "polarspanicerror": 753, "schemaerror": 753, "schemafieldnotfounderror": 753, "shapeerror": 753, "parametr": 753, "build_info": 753, "get_index_typ": 753, "show_vers": 753, "threadpool_s": 753, "sqlcontext": [753, 1220], "hit": [758, 849], "node": [758, 762, 784, 791, 792, 796, 801, 803, 849], "_eager": [762, 849], "explain": [762, 849], "purpos": [762, 771, 849], "set_streaming_chunk_s": [762, 849], "collect_all_async": [763, 849], "async": [763, 849], "stringio": [765, 809, 849], "snippet": [767, 849], "Be": [771, 849], "fewer": [771, 849], "suscept": [771, 849], "lazygroupbi": [777, 778, 779, 780, 781, 782, 805, 849], "other_lf": [786, 849], "validate_output_schema": [791, 792, 849], "streamabl": [791, 792, 796, 849], "past": [791, 792, 849], "paramount": [791, 792, 849], "elig": [791, 792, 849], "invari": [792, 849], "upheld": [792, 849], "100_000": [792, 849], "200000": [792, 849], "199998": [792, 849], "199996": [792, 849], "199994": [792, 849], "199992": [792, 849], "show_plot": [801, 849], "truncate_nod": [801, 849], "figsiz": [801, 813, 849], "gantt": [801, 849], "plot": [801, 813, 849], "group_by_partit": [801, 849], "470": [801, 849], "475": [801, 849], "1964": [801, 849], "swap": [803, 849], "dynamic_group_bi": [805, 849], "deseri": [809, 849], "dataframescan": [809, 849], "output_schema": [809, 849], "run_parallel": [809, 849], "duplicate_check": [809, 849], "later": [809, 849], "output_path": [813, 849], "raw_output": [813, 849], "290994": [816, 849], "118034": [816, 849], "implicit": [823, 849], "new_lf": [823, 849], "extern": [828, 849], "lf_other": [828, 849], "afoo": [828, 849], "cfoo": [828, 849], "train_lf": [828, 849], "feature_0": [828, 849], "feature_1": [828, 849], "test_lf": [828, 849], "_train": [828, 849], "feature_0_train": [828, 849], "opaqu": 837, "my_column": 837, "lf5": 849, "lf6": 849, "sink_csv": 849, "sink_ipc": 849, "sink_ndjson": 849, "sink_json": 849, "sink_parquet": 849, "with_context": 849, "intuit": 852, "broadcast": 852, "emploi": 852, "complement": 852, "plenti": 852, "cde": 852, "fgg": 852, "jjk": 852, "lmn": 852, "opp": 852, "qqr": 852, "by_dtyp": 852, "as_expr": 852, "dispatch": 852, "1_234_500": 852, "5_000_555": 852, "1234500": 852, "5000555": 852, "by_nam": 852, "4_500_000": 852, "4500000": 852, "3265500": 852, "zap": 852, "2031": 852, "tstamp_tokyo": 852, "123465": 852, "tstamp_utc": 852, "2025": 852, "666000": 852, "tstamp": 852, "600000": 852, "123000": 852, "666": 852, "td1": 852, "987000": 852, "td2": 852, "td3": 852, "2m": [852, 938], "456m": 852, "7d": 852, "456789\u00b5": 852, "18d": 852, "999999\u00b5": 852, "23h": 852, "987m": 852, "14d": 852, "16h": 852, "39m": 852, "21d": 852, "456001\u00b5": 852, "expand_selector": 852, "colz": [852, 1221], "everyth": 852, "signed_integ": 852, "unsigned_integ": 852, "is_selector": 852, "obj": 852, "_selector_proxy_": 852, "include_categor": 852, "set_ord": [852, 888], "2345": 852, "3456": 852, "292432": [861, 1213], "549306": [865, 1213], "catnamespac": 883, "56789": [890, 983, 1104, 1213], "901234": [890, 983, 1104, 1213], "1232e": [897, 899, 1213], "1656e15": [899, 1213], "break_point_label": [909, 1082, 1213], "break_point": [909, 990, 1082, 1213], "category_label": [909, 1082, 1213], "series_num": [910, 1213], "581139": [910, 1213], "series_str": [910, 1213], "arraylik": [912, 1213], "datetimenamespac": 915, "ser": [920, 921, 953], "kathmandu": [920, 921, 953], "0545": [920, 921, 953], "500m": [933, 935, 943], "500000": 933, "500000000": 943, "date_minus_1y_2mon": 945, "165": [949, 963], "round_str": 949, "round_td": 949, "timestamp_u": 954, "978307200000000000": 954, "978393600000000000": 954, "978480000000000000": 954, "005": [969, 1213], "06293300616044681": [969, 1213], "65": [969, 1213], "8568409950394724": [969, 1213], "4000000": [971, 1213], "814697265625": [971, 1213], "bitmask": [987, 1213], "absenc": [987, 1213], "presenc": [987, 1194, 1213], "confirm": [987, 1213], "10734580197236529959": [988, 1213], "3022416320763508302": [988, 1213], "13756996518000038261": [988, 1213], "bin_count": [990, 1213], "a_count": [990, 1213], "is_signed_integ": [1004, 1213], "is_unsigned_integ": [1004, 1213], "listnamespac": 1020, "field_2": 1057, "n00": 1057, "n01": 1057, "n02": 1057, "2147483648": [1062, 1213], "166667": [1078, 1213], "142857": [1078, 1213], "200": [1095, 1096, 1098, 1213], "150": [1096, 1213], "350": [1096, 1213], "450": [1096, 1213], "dev": [1101, 1213], "527525": [1101, 1213], "57": [1104, 1213, 1221], "frequent": [1107, 1110, 1213], "scatter": [1111, 1213], "2246e": [1120, 1187, 1213], "stringnamespac": 1127, "orld": 1163, "tur": 1174, "structnamespac": 1179, "6331e16": [1187, 1213], "int64arrai": [1189, 1213], "a_2": [1190, 1213], "a_3": [1190, 1213], "s_from_str_repr": [1192, 1213], "zero_copy_onli": [1194, 1213], "writabl": [1194, 1213], "immut": [1194, 1213], "127": [1200, 1213], "seriesview": [1203, 1213], "dtype_if_empti": 1213, "position": 1213, "scenario": 1213, "chunk_length": 1213, "get_chunk": 1213, "has_valid": 1213, "hist": 1213, "is_boolean": 1213, "is_float": 1213, "is_integ": 1213, "is_numer": [1213, 1221], "is_sort": 1213, "is_tempor": 1213, "is_utf8": 1213, "new_from_index": 1213, "series_equ": 1213, "set_at_idx": 1213, "two_a": 1220, "__enter__": 1220, "__exit__": 1220, "exc_typ": 1220, "baseexcept": 1220, "exc_val": 1220, "exc_tb": 1220, "tracebacktyp": 1220, "primari": 1221, "guid": 1221, "machin": 1221, "xdist": 1221, "hardwar": 1221, "setup": 1221, "sec": 1221, "numeric_dtyp": 1221, "null_probabililti": 1221, "test_numer": 1221, "col0": 1221, "col4": 1221, "29096": 1221, "485": 1221, "2147483647": 1221, "8257e14": 1221, "7508": 1221, "37338": 1221, "7264": 1221, "16996": 1221, "121": 1221, "361": 1221, "63204": 1221, "1443e235": 1221, "conform": 1221, "ascii_lett": 1221, "id_char": 1221, "alphabet": 1221, "price": 1221, "min_valu": 1221, "max_valu": 1221, "test_price_calcul": 1221, "a101": 1221, "8nin": 1221, "qhoo": 1221, "714": 1221, "544": 1221, "i0e0": 1221, "0000": 1221, "test_miscellan": 1221, "235": 1221, "87": 1221, "186": 1221, "174": 1221, "179": 1221, "213": 1221, "221": 1221, "86": 1221, "255": 1221}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [46, 0, 1, "", "DataType"], [47, 0, 1, "", "Date"], [48, 0, 1, "", "Datetime"], [49, 0, 1, "", "Decimal"], [50, 0, 1, "", "Duration"], [51, 0, 1, "", "Float32"], [52, 0, 1, "", "Float64"], [53, 0, 1, "", "Int16"], [54, 0, 1, "", "Int32"], [55, 0, 1, "", "Int64"], [56, 0, 1, "", "Int8"], [60, 0, 1, "", "List"], [61, 0, 1, "", "Null"], [62, 0, 1, "", "Object"], [1220, 0, 1, "", "SQLContext"], [69, 0, 1, "", "StringCache"], [70, 0, 1, "", "Struct"], [71, 0, 1, "", "Time"], [72, 0, 1, "", "UInt16"], [73, 0, 1, "", "UInt32"], [74, 0, 1, "", "UInt64"], [75, 0, 1, "", "UInt8"], [76, 0, 1, "", "Unknown"], [77, 0, 1, "", "Utf8"], [78, 4, 1, "", "align_frames"], [659, 4, 1, "", "all"], [660, 4, 1, "", "all_horizontal"], [661, 4, 1, "", "any"], [662, 4, 1, "", "any_horizontal"], [663, 4, 1, "", "apply"], [664, 4, 1, "", "approx_n_unique"], [665, 4, 1, "", "arange"], [666, 4, 1, "", "arctan2"], [667, 4, 1, "", "arctan2d"], [668, 4, 1, "", "arg_sort_by"], [669, 4, 1, "", "arg_where"], [83, 4, 1, "", "build_info"], [670, 4, 1, "", "coalesce"], [84, 4, 1, "", "collect_all"], [85, 4, 1, "", "collect_all_async"], [86, 4, 1, "", "concat"], [671, 4, 1, "", "concat_list"], [672, 4, 1, "", "concat_str"], [673, 4, 1, "", "corr"], [674, 4, 1, "", "count"], [675, 4, 1, "", "cov"], [676, 4, 1, "", "cum_fold"], [677, 4, 1, "", "cum_reduce"], [678, 4, 1, "", "cum_sum"], [679, 4, 1, "", "cum_sum_horizontal"], [680, 4, 1, "", "cumfold"], [681, 4, 1, "", "cumreduce"], [682, 4, 1, "", "cumsum"], [683, 4, 1, "", "cumsum_horizontal"], [684, 4, 1, "", "date"], [685, 4, 1, "", "date_range"], [686, 4, 1, "", "date_ranges"], [687, 4, 1, "", "datetime"], [688, 4, 1, "", "datetime_range"], [689, 4, 1, "", "datetime_ranges"], [87, 4, 1, "", "disable_string_cache"], [690, 4, 1, "", "duration"], [691, 4, 1, "", "element"], [88, 4, 1, "", "enable_string_cache"], [692, 4, 1, "", "exclude"], [693, 4, 1, "", "first"], [694, 4, 1, "", "fold"], [695, 4, 1, "", "format"], [103, 4, 1, "", "from_arrow"], [104, 4, 1, "", "from_dataframe"], [105, 4, 1, "", "from_dict"], [106, 4, 1, "", "from_dicts"], [696, 4, 1, "", "from_epoch"], [107, 4, 1, "", "from_numpy"], [108, 4, 1, "", "from_pandas"], [109, 4, 1, "", "from_records"], [110, 4, 1, "", "from_repr"], [111, 4, 1, "", "get_index_type"], [697, 4, 1, "", "groups"], [698, 4, 1, "", "head"], [699, 4, 1, "", "implode"], [700, 4, 1, "", "int_range"], [701, 4, 1, "", "int_ranges"], [702, 4, 1, "", "last"], [703, 4, 1, "", "lit"], [704, 4, 1, "", "map"], [705, 4, 1, "", "map_batches"], [706, 4, 1, "", "map_groups"], [707, 4, 1, "", "max"], [708, 4, 1, "", "max_horizontal"], [709, 4, 1, "", "mean"], [710, 4, 1, "", "median"], [711, 4, 1, "", "min"], [712, 4, 1, "", "min_horizontal"], [713, 4, 1, "", "n_unique"], [714, 4, 1, "", "ones"], [715, 4, 1, "", "quantile"], [113, 4, 1, "", "read_avro"], [114, 4, 1, "", "read_csv"], [115, 4, 1, "", "read_csv_batched"], [116, 4, 1, "", "read_database"], [117, 4, 1, "", "read_database_uri"], [118, 4, 1, "", "read_delta"], [119, 4, 1, "", "read_excel"], [120, 4, 1, "", "read_ipc"], [121, 4, 1, "", "read_ipc_schema"], [122, 4, 1, "", "read_ipc_stream"], [123, 4, 1, "", "read_json"], [124, 4, 1, "", "read_ndjson"], [125, 4, 1, "", "read_ods"], [126, 4, 1, "", "read_parquet"], [127, 4, 1, "", "read_parquet_schema"], [716, 4, 1, "", "reduce"], [717, 4, 1, "", "repeat"], [718, 4, 1, "", "rolling_corr"], [719, 4, 1, "", "rolling_cov"], [128, 4, 1, "", "scan_csv"], [129, 4, 1, "", "scan_delta"], [130, 4, 1, "", "scan_iceberg"], [131, 4, 1, "", "scan_ipc"], [132, 4, 1, "", "scan_ndjson"], [133, 4, 1, "", "scan_parquet"], [134, 4, 1, "", "scan_pyarrow_dataset"], [720, 4, 1, "", "select"], [852, 6, 0, "-", "selectors"], [135, 4, 1, "", "set_random_seed"], [136, 4, 1, "", "show_versions"], [721, 4, 1, "", "sql_expr"], [722, 4, 1, "", "std"], [723, 4, 1, "", "struct"], [724, 4, 1, "", "sum"], [725, 4, 1, "", "sum_horizontal"], [726, 4, 1, "", "tail"], [148, 4, 1, "", "threadpool_size"], [727, 4, 1, "", "time"], [728, 4, 1, "", "time_range"], [729, 4, 1, "", "time_ranges"], [149, 4, 1, "", "using_string_cache"], [730, 4, 1, "", "var"], [731, 4, 1, "", "when"], [732, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "load_from_file"], [9, 1, 1, "", "restore_defaults"], [10, 1, 1, "", "save"], [11, 1, 1, "", "save_to_file"], [12, 1, 1, "", "set_ascii_tables"], [13, 1, 1, "", "set_auto_structify"], [14, 1, 1, "", "set_decimal_separator"], [15, 1, 1, "", "set_float_precision"], [16, 1, 1, "", "set_fmt_float"], [17, 1, 1, "", "set_fmt_str_lengths"], [18, 1, 1, "", "set_fmt_table_cell_list_len"], [19, 1, 1, "", "set_streaming_chunk_size"], [20, 1, 1, "", "set_tbl_cell_alignment"], [21, 1, 1, "", "set_tbl_cell_numeric_alignment"], [22, 1, 1, "", "set_tbl_cols"], [23, 1, 1, "", "set_tbl_column_data_type_inline"], [24, 1, 1, "", "set_tbl_dataframe_shape_below"], [25, 1, 1, "", "set_tbl_formatting"], [26, 1, 1, "", "set_tbl_hide_column_data_types"], [27, 1, 1, "", "set_tbl_hide_column_names"], [28, 1, 1, "", "set_tbl_hide_dataframe_shape"], [29, 1, 1, "", "set_tbl_hide_dtype_separator"], [30, 1, 1, "", "set_tbl_rows"], [31, 1, 1, "", "set_tbl_width_chars"], [32, 1, 1, "", "set_thousands_separator"], [33, 1, 1, "", "set_trim_decimal_zeros"], [34, 1, 1, "", "set_verbose"], [35, 1, 1, "", "state"]], "polars.DataFrame": [[152, 1, 1, "", "__dataframe__"], [153, 1, 1, "", "apply"], [154, 1, 1, "", "approx_n_unique"], [155, 1, 1, "", "bottom_k"], [156, 1, 1, "", "cast"], [157, 1, 1, "", "clear"], [158, 1, 1, "", "clone"], [159, 2, 1, "", "columns"], [160, 1, 1, "", "corr"], [161, 1, 1, "", "describe"], [162, 1, 1, "", "drop"], [163, 1, 1, "", "drop_in_place"], [164, 1, 1, "", "drop_nulls"], [165, 2, 1, "", "dtypes"], [166, 1, 1, "", "equals"], [167, 1, 1, "", "estimated_size"], [168, 1, 1, "", "explode"], [169, 1, 1, "", "extend"], [170, 1, 1, "", "fill_nan"], [171, 1, 1, "", "fill_null"], [172, 1, 1, "", "filter"], [173, 1, 1, "", "find_idx_by_name"], [174, 2, 1, "", "flags"], [175, 1, 1, "", "fold"], [176, 1, 1, "", "frame_equal"], [177, 1, 1, "", "gather_every"], [178, 1, 1, "", "get_column"], [179, 1, 1, "", "get_column_index"], [180, 1, 1, "", "get_columns"], [181, 1, 1, "", "glimpse"], [182, 1, 1, "", "group_by"], [183, 1, 1, "", "group_by_dynamic"], [184, 1, 1, "", "group_by_rolling"], [185, 1, 1, "", "groupby"], [186, 1, 1, "", "groupby_dynamic"], [187, 1, 1, "", "groupby_rolling"], [188, 1, 1, "", "hash_rows"], [189, 1, 1, "", "head"], [190, 2, 1, "", "height"], [191, 1, 1, "", "hstack"], [192, 1, 1, "", "insert_at_idx"], [193, 1, 1, "", "insert_column"], [194, 1, 1, "", "interpolate"], [195, 1, 1, "", "is_duplicated"], [196, 1, 1, "", "is_empty"], [197, 1, 1, "", "is_unique"], [198, 1, 1, "", "item"], [199, 1, 1, "", "iter_columns"], [200, 1, 1, "", "iter_rows"], [201, 1, 1, "", "iter_slices"], [202, 1, 1, "", "join"], [203, 1, 1, "", "join_asof"], [204, 1, 1, "", "lazy"], [205, 1, 1, "", "limit"], [206, 1, 1, "", "map_rows"], [207, 1, 1, "", "max"], [208, 1, 1, "", "max_horizontal"], [209, 1, 1, "", "mean"], [210, 1, 1, "", "mean_horizontal"], [211, 1, 1, "", "median"], [212, 1, 1, "", "melt"], [213, 1, 1, "", "merge_sorted"], [214, 1, 1, "", "min"], [215, 1, 1, "", "min_horizontal"], [216, 1, 1, "", "n_chunks"], [217, 1, 1, "", "n_unique"], [218, 1, 1, "", "null_count"], [219, 1, 1, "", "partition_by"], [220, 1, 1, "", "pipe"], [221, 1, 1, "", "pivot"], [222, 1, 1, "", "product"], [223, 1, 1, "", "quantile"], [224, 1, 1, "", "rechunk"], [225, 1, 1, "", "rename"], [226, 1, 1, "", "replace"], [227, 1, 1, "", "replace_at_idx"], [228, 1, 1, "", "replace_column"], [229, 1, 1, "", "reverse"], [230, 1, 1, "", "rolling"], [231, 1, 1, "", "row"], [232, 1, 1, "", "rows"], [233, 1, 1, "", "rows_by_key"], [234, 1, 1, "", "sample"], [235, 2, 1, "", "schema"], [236, 1, 1, "", "select"], [237, 1, 1, "", "select_seq"], [238, 1, 1, "", "set_sorted"], [239, 2, 1, "", "shape"], [240, 1, 1, "", "shift"], [241, 1, 1, "", "shift_and_fill"], [242, 1, 1, "", "shrink_to_fit"], [243, 1, 1, "", "slice"], [244, 1, 1, "", "sort"], [245, 1, 1, "", "std"], [246, 1, 1, "", "sum"], [247, 1, 1, "", "sum_horizontal"], [248, 1, 1, "", "tail"], [249, 1, 1, "", "take_every"], [250, 1, 1, "", "to_arrow"], [251, 1, 1, "", "to_dict"], [252, 1, 1, "", "to_dicts"], [253, 1, 1, "", "to_dummies"], [254, 1, 1, "", "to_init_repr"], [255, 1, 1, "", "to_numpy"], [256, 1, 1, "", "to_pandas"], [257, 1, 1, "", "to_series"], [258, 1, 1, "", "to_struct"], [259, 1, 1, "", "top_k"], [260, 1, 1, "", "transpose"], [261, 1, 1, "", "unique"], [262, 1, 1, "", "unnest"], [263, 1, 1, "", "unstack"], [264, 1, 1, "", "update"], [265, 1, 1, "", "upsample"], [266, 1, 1, "", "var"], [267, 1, 1, "", "vstack"], [268, 2, 1, "", "width"], [269, 1, 1, "", "with_columns"], [270, 1, 1, "", "with_columns_seq"], [271, 1, 1, "", "with_row_count"], [36, 1, 1, "", "write_avro"], [37, 1, 1, "", "write_csv"], [38, 1, 1, "", "write_database"], [39, 1, 1, "", "write_delta"], [40, 1, 1, "", "write_excel"], [41, 1, 1, "", "write_ipc"], [42, 1, 1, "", "write_ipc_stream"], [43, 1, 1, "", "write_json"], [44, 1, 1, "", "write_ndjson"], [45, 1, 1, "", "write_parquet"]], "polars.DataType": [[46, 1, 1, "", "__init__"]], "polars.Date": [[47, 1, 1, "", "__init__"]], "polars.Datetime": [[48, 1, 1, "", "__init__"]], "polars.Decimal": [[49, 1, 1, "", "__init__"]], "polars.Duration": [[50, 1, 1, "", "__init__"]], "polars.Expr": [[300, 1, 1, "", "abs"], [301, 1, 1, "", "add"], [302, 1, 1, "", "agg_groups"], [303, 1, 1, "", "alias"], [304, 1, 1, "", "all"], [305, 1, 1, "", "and_"], [306, 1, 1, "", "any"], [307, 1, 1, "", "append"], [308, 1, 1, "", "apply"], [309, 1, 1, "", "approx_n_unique"], [310, 1, 1, "", "arccos"], [311, 1, 1, "", "arccosh"], [312, 1, 1, "", "arcsin"], [313, 1, 1, "", "arcsinh"], [314, 1, 1, "", "arctan"], [315, 1, 1, "", "arctanh"], [316, 1, 1, "", "arg_max"], [317, 1, 1, "", "arg_min"], [318, 1, 1, "", "arg_sort"], [319, 1, 1, "", "arg_true"], [320, 1, 1, "", "arg_unique"], [326, 1, 1, "", "backward_fill"], [332, 1, 1, "", "bottom_k"], [333, 1, 1, "", "cast"], [336, 1, 1, "", "cbrt"], [337, 1, 1, "", "ceil"], [338, 1, 1, "", "clip"], [339, 1, 1, "", "clip_max"], [340, 1, 1, "", "clip_min"], [341, 1, 1, "", "cos"], [342, 1, 1, "", "cosh"], [343, 1, 1, "", "cot"], [344, 1, 1, "", "count"], [345, 1, 1, "", "cum_count"], [346, 1, 1, "", "cum_max"], [347, 1, 1, "", "cum_min"], [348, 1, 1, "", "cum_prod"], [349, 1, 1, "", "cum_sum"], [350, 1, 1, "", "cumcount"], [351, 1, 1, "", "cummax"], [352, 1, 1, "", "cummin"], [353, 1, 1, "", "cumprod"], [354, 1, 1, "", "cumsum"], [355, 1, 1, "", "cumulative_eval"], [356, 1, 1, "", "cut"], [357, 1, 1, "", "degrees"], [358, 1, 1, "", "diff"], [359, 1, 1, "", "dot"], [360, 1, 1, "", "drop_nans"], [361, 1, 1, "", "drop_nulls"], [410, 1, 1, "", "entropy"], [411, 1, 1, "", "eq"], [412, 1, 1, "", "eq_missing"], [413, 1, 1, "", "ewm_mean"], [414, 1, 1, "", "ewm_std"], [415, 1, 1, "", "ewm_var"], [416, 1, 1, "", "exclude"], [417, 1, 1, "", "exp"], [418, 1, 1, "", "explode"], [419, 1, 1, "", "extend_constant"], [420, 1, 1, "", "fill_nan"], [421, 1, 1, "", "fill_null"], [422, 1, 1, "", "filter"], [423, 1, 1, "", "first"], [424, 1, 1, "", "flatten"], [425, 1, 1, "", "floor"], [426, 1, 1, "", "floordiv"], [427, 1, 1, "", "forward_fill"], [428, 1, 1, "", "from_json"], [429, 1, 1, "", "gather"], [430, 1, 1, "", "gather_every"], [431, 1, 1, "", "ge"], [432, 1, 1, "", "get"], [433, 1, 1, "", "gt"], [434, 1, 1, "", "hash"], [435, 1, 1, "", "head"], [436, 1, 1, "", "implode"], [437, 1, 1, "", "inspect"], [438, 1, 1, "", "interpolate"], [439, 1, 1, "", "is_between"], [440, 1, 1, "", "is_duplicated"], [441, 1, 1, "", "is_finite"], [442, 1, 1, "", "is_first"], [443, 1, 1, "", "is_first_distinct"], [444, 1, 1, "", "is_in"], [445, 1, 1, "", "is_infinite"], [446, 1, 1, "", "is_last"], [447, 1, 1, "", "is_last_distinct"], [448, 1, 1, "", "is_nan"], [449, 1, 1, "", "is_not"], [450, 1, 1, "", "is_not_nan"], [451, 1, 1, "", "is_not_null"], [452, 1, 1, "", "is_null"], [453, 1, 1, "", "is_unique"], [454, 1, 1, "", "keep_name"], [455, 1, 1, "", "kurtosis"], [456, 1, 1, "", "last"], [457, 1, 1, "", "le"], [458, 1, 1, "", "len"], [459, 1, 1, "", "limit"], [498, 1, 1, "", "log"], [499, 1, 1, "", "log10"], [500, 1, 1, "", "log1p"], [501, 1, 1, "", "lower_bound"], [502, 1, 1, "", "lt"], [503, 1, 1, "", "map"], [504, 1, 1, "", "map_alias"], [505, 1, 1, "", "map_batches"], [506, 1, 1, "", "map_dict"], [507, 1, 1, "", "map_elements"], [508, 1, 1, "", "max"], [509, 1, 1, "", "mean"], [510, 1, 1, "", "median"], [521, 1, 1, "", "min"], [522, 1, 1, "", "mod"], [523, 1, 1, "", "mode"], [524, 1, 1, "", "mul"], [525, 1, 1, "", "n_unique"], [532, 1, 1, "", "nan_max"], [533, 1, 1, "", "nan_min"], [534, 1, 1, "", "ne"], [535, 1, 1, "", "ne_missing"], [536, 1, 1, "", "not_"], [537, 1, 1, "", "null_count"], [538, 1, 1, "", "or_"], [539, 1, 1, "", "over"], [540, 1, 1, "", "pct_change"], [541, 1, 1, "", "peak_max"], [542, 1, 1, "", "peak_min"], [543, 1, 1, "", "pipe"], [544, 1, 1, "", "pow"], [545, 1, 1, "", "prefix"], [546, 1, 1, "", "product"], [547, 1, 1, "", "qcut"], [548, 1, 1, "", "quantile"], [549, 1, 1, "", "radians"], [550, 1, 1, "", "rank"], [551, 1, 1, "", "rechunk"], [552, 1, 1, "", "reinterpret"], [553, 1, 1, "", "repeat_by"], [554, 1, 1, "", "replace"], [555, 1, 1, "", "reshape"], [556, 1, 1, "", "reverse"], [557, 1, 1, "", "rle"], [558, 1, 1, "", "rle_id"], [559, 1, 1, "", "rolling"], [560, 1, 1, "", "rolling_apply"], [561, 1, 1, "", "rolling_map"], [562, 1, 1, "", "rolling_max"], [563, 1, 1, "", "rolling_mean"], [564, 1, 1, "", "rolling_median"], [565, 1, 1, "", "rolling_min"], [566, 1, 1, "", "rolling_quantile"], [567, 1, 1, "", "rolling_skew"], [568, 1, 1, "", "rolling_std"], [569, 1, 1, "", "rolling_sum"], [570, 1, 1, "", "rolling_var"], [571, 1, 1, "", "round"], [572, 1, 1, "", "round_sig_figs"], [573, 1, 1, "", "sample"], [574, 1, 1, "", "search_sorted"], [575, 1, 1, "", "set_sorted"], [576, 1, 1, "", "shift"], [577, 1, 1, "", "shift_and_fill"], [578, 1, 1, "", "shrink_dtype"], [579, 1, 1, "", "shuffle"], [580, 1, 1, "", "sign"], [581, 1, 1, "", "sin"], [582, 1, 1, "", "sinh"], [583, 1, 1, "", "skew"], [584, 1, 1, "", "slice"], [585, 1, 1, "", "sort"], [586, 1, 1, "", "sort_by"], [587, 1, 1, "", "sqrt"], [588, 1, 1, "", "std"], [641, 1, 1, "", "sub"], [642, 1, 1, "", "suffix"], [643, 1, 1, "", "sum"], [644, 1, 1, "", "tail"], [645, 1, 1, "", "take"], [646, 1, 1, "", "take_every"], [647, 1, 1, "", "tan"], [648, 1, 1, "", "tanh"], [649, 1, 1, "", "to_physical"], [650, 1, 1, "", "top_k"], [651, 1, 1, "", "truediv"], [652, 1, 1, "", "unique"], [653, 1, 1, "", "unique_counts"], [654, 1, 1, "", "upper_bound"], [655, 1, 1, "", "value_counts"], [656, 1, 1, "", "var"], [657, 1, 1, "", "where"], [658, 1, 1, "", "xor"]], "polars.Expr.arr": [[321, 1, 1, "", "max"], [322, 1, 1, "", "min"], [323, 1, 1, "", "sum"], [324, 1, 1, "", "to_list"], [325, 1, 1, "", "unique"]], "polars.Expr.bin": [[327, 1, 1, "", "contains"], [328, 1, 1, "", "decode"], [329, 1, 1, "", "encode"], [330, 1, 1, "", "ends_with"], [331, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[334, 1, 1, "", "get_categories"], [335, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[362, 1, 1, "", "base_utc_offset"], [363, 1, 1, "", "cast_time_unit"], [364, 1, 1, "", "combine"], [365, 1, 1, "", "convert_time_zone"], [366, 1, 1, "", "date"], [367, 1, 1, "", "datetime"], [368, 1, 1, "", "day"], [369, 1, 1, "", "days"], [370, 1, 1, "", "dst_offset"], [371, 1, 1, "", "epoch"], [372, 1, 1, "", "hour"], [373, 1, 1, "", "hours"], [374, 1, 1, "", "is_leap_year"], [375, 1, 1, "", "iso_year"], [376, 1, 1, "", "microsecond"], [377, 1, 1, "", "microseconds"], [378, 1, 1, "", "millisecond"], [379, 1, 1, "", "milliseconds"], [380, 1, 1, "", "minute"], [381, 1, 1, "", "minutes"], [382, 1, 1, "", "month"], [383, 1, 1, "", "month_end"], [384, 1, 1, "", "month_start"], [385, 1, 1, "", "nanosecond"], [386, 1, 1, "", "nanoseconds"], [387, 1, 1, "", "offset_by"], [388, 1, 1, "", "ordinal_day"], [389, 1, 1, "", "quarter"], [390, 1, 1, "", "replace_time_zone"], [391, 1, 1, "", "round"], [392, 1, 1, "", "second"], [393, 1, 1, "", "seconds"], [394, 1, 1, "", "strftime"], [395, 1, 1, "", "time"], [396, 1, 1, "", "timestamp"], [397, 1, 1, "", "to_string"], [398, 1, 1, "", "total_days"], [399, 1, 1, "", "total_hours"], [400, 1, 1, "", "total_microseconds"], [401, 1, 1, "", "total_milliseconds"], [402, 1, 1, "", "total_minutes"], [403, 1, 1, "", "total_nanoseconds"], [404, 1, 1, "", "total_seconds"], [405, 1, 1, "", "truncate"], [406, 1, 1, "", "week"], [407, 1, 1, "", "weekday"], [408, 1, 1, "", "with_time_unit"], [409, 1, 1, "", "year"]], "polars.Expr.list": [[460, 1, 1, "", "all"], [461, 1, 1, "", "any"], [462, 1, 1, "", "arg_max"], [463, 1, 1, "", "arg_min"], [464, 1, 1, "", "concat"], [465, 1, 1, "", "contains"], [466, 1, 1, "", "count_match"], [467, 1, 1, "", "count_matches"], [468, 1, 1, "", "diff"], [469, 1, 1, "", "drop_nulls"], [470, 1, 1, "", "eval"], [471, 1, 1, "", "explode"], [472, 1, 1, "", "first"], [473, 1, 1, "", "gather"], [474, 1, 1, "", "get"], [475, 1, 1, "", "head"], [476, 1, 1, "", "join"], [477, 1, 1, "", "last"], [478, 1, 1, "", "len"], [479, 1, 1, "", "lengths"], [480, 1, 1, "", "max"], [481, 1, 1, "", "mean"], [482, 1, 1, "", "min"], [483, 1, 1, "", "reverse"], [484, 1, 1, "", "sample"], [485, 1, 1, "", "set_difference"], [486, 1, 1, "", "set_intersection"], [487, 1, 1, "", "set_symmetric_difference"], [488, 1, 1, "", "set_union"], [489, 1, 1, "", "shift"], [490, 1, 1, "", "slice"], [491, 1, 1, "", "sort"], [492, 1, 1, "", "sum"], [493, 1, 1, "", "tail"], [494, 1, 1, "", "take"], [495, 1, 1, "", "to_array"], [496, 1, 1, "", "to_struct"], [497, 1, 1, "", "unique"]], "polars.Expr.meta": [[511, 1, 1, "", "eq"], [512, 1, 1, "", "has_multiple_outputs"], [513, 1, 1, "", "is_regex_projection"], [514, 1, 1, "", "ne"], [515, 1, 1, "", "output_name"], [516, 1, 1, "", "pop"], [517, 1, 1, "", "root_names"], [518, 1, 1, "", "tree_format"], [519, 1, 1, "", "undo_aliases"], [520, 1, 1, "", "write_json"]], "polars.Expr.name": [[526, 1, 1, "", "keep"], [527, 1, 1, "", "map"], [528, 1, 1, "", "prefix"], [529, 1, 1, "", "suffix"], [530, 1, 1, "", "to_lowercase"], [531, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[589, 1, 1, "", "concat"], [590, 1, 1, "", "contains"], [591, 1, 1, "", "count_match"], [592, 1, 1, "", "count_matches"], [593, 1, 1, "", "decode"], [594, 1, 1, "", "encode"], [595, 1, 1, "", "ends_with"], [596, 1, 1, "", "explode"], [597, 1, 1, "", "extract"], [598, 1, 1, "", "extract_all"], [599, 1, 1, "", "extract_groups"], [600, 1, 1, "", "json_decode"], [601, 1, 1, "", "json_extract"], [602, 1, 1, "", "json_path_match"], [603, 1, 1, "", "len_bytes"], [604, 1, 1, "", "len_chars"], [605, 1, 1, "", "lengths"], [606, 1, 1, "", "ljust"], [607, 1, 1, "", "lstrip"], [608, 1, 1, "", "n_chars"], [609, 1, 1, "", "pad_end"], [610, 1, 1, "", "pad_start"], [611, 1, 1, "", "parse_int"], [612, 1, 1, "", "replace"], [613, 1, 1, "", "replace_all"], [614, 1, 1, "", "reverse"], [615, 1, 1, "", "rjust"], [616, 1, 1, "", "rstrip"], [617, 1, 1, "", "slice"], [618, 1, 1, "", "split"], [619, 1, 1, "", "split_exact"], [620, 1, 1, "", "splitn"], [621, 1, 1, "", "starts_with"], [622, 1, 1, "", "strip"], [623, 1, 1, "", "strip_chars"], [624, 1, 1, "", "strip_chars_end"], [625, 1, 1, "", "strip_chars_start"], [626, 1, 1, "", "strip_prefix"], [627, 1, 1, "", "strip_suffix"], [628, 1, 1, "", "strptime"], [629, 1, 1, "", "to_date"], [630, 1, 1, "", "to_datetime"], [631, 1, 1, "", "to_decimal"], [632, 1, 1, "", "to_integer"], [633, 1, 1, "", "to_lowercase"], [634, 1, 1, "", "to_time"], [635, 1, 1, "", "to_titlecase"], [636, 1, 1, "", "to_uppercase"], [637, 1, 1, "", "zfill"]], "polars.Expr.struct": [[638, 1, 1, "", "field"], [639, 1, 1, "", "json_encode"], [640, 1, 1, "", "rename_fields"]], "polars.Float32": [[51, 1, 1, "", "__init__"]], "polars.Float64": [[52, 1, 1, "", "__init__"]], "polars.Int16": [[53, 1, 1, "", "__init__"]], "polars.Int32": [[54, 1, 1, "", "__init__"]], "polars.Int64": [[55, 1, 1, "", "__init__"]], "polars.Int8": [[56, 1, 1, "", "__init__"]], "polars.LazyFrame": [[756, 1, 1, "", "approx_n_unique"], [757, 1, 1, "", "bottom_k"], [758, 1, 1, "", "cache"], [759, 1, 1, "", "cast"], [760, 1, 1, "", "clear"], [761, 1, 1, "", "clone"], [762, 1, 1, "", "collect"], [763, 1, 1, "", "collect_async"], [764, 2, 1, "", "columns"], [765, 1, 1, "", "deserialize"], [766, 1, 1, "", "drop"], [767, 1, 1, "", "drop_nulls"], [768, 2, 1, "", "dtypes"], [769, 1, 1, "", "explain"], [770, 1, 1, "", "explode"], [771, 1, 1, "", "fetch"], [772, 1, 1, "", "fill_nan"], [773, 1, 1, "", "fill_null"], [774, 1, 1, "", "filter"], [775, 1, 1, "", "first"], [776, 1, 1, "", "gather_every"], [777, 1, 1, "", "group_by"], [778, 1, 1, "", "group_by_dynamic"], [779, 1, 1, "", "group_by_rolling"], [780, 1, 1, "", "groupby"], [781, 1, 1, "", "groupby_dynamic"], [782, 1, 1, "", "groupby_rolling"], [783, 1, 1, "", "head"], [784, 1, 1, "", "inspect"], [785, 1, 1, "", "interpolate"], [786, 1, 1, "", "join"], [787, 1, 1, "", "join_asof"], [788, 1, 1, "", "last"], [789, 1, 1, "", "lazy"], [790, 1, 1, "", "limit"], [791, 1, 1, "", "map"], [792, 1, 1, "", "map_batches"], [793, 1, 1, "", "max"], [794, 1, 1, "", "mean"], [795, 1, 1, "", "median"], [796, 1, 1, "", "melt"], [797, 1, 1, "", "merge_sorted"], [798, 1, 1, "", "min"], [799, 1, 1, "", "null_count"], [800, 1, 1, "", "pipe"], [801, 1, 1, "", "profile"], [802, 1, 1, "", "quantile"], [803, 1, 1, "", "rename"], [804, 1, 1, "", "reverse"], [805, 1, 1, "", "rolling"], [806, 2, 1, "", "schema"], [807, 1, 1, "", "select"], [808, 1, 1, "", "select_seq"], [809, 1, 1, "", "serialize"], [810, 1, 1, "", "set_sorted"], [811, 1, 1, "", "shift"], [812, 1, 1, "", "shift_and_fill"], [813, 1, 1, "", "show_graph"], [57, 1, 1, "", "sink_csv"], [58, 1, 1, "", "sink_ipc"], [59, 1, 1, "", "sink_parquet"], [814, 1, 1, "", "slice"], [815, 1, 1, "", "sort"], [816, 1, 1, "", "std"], [817, 1, 1, "", "sum"], [818, 1, 1, "", "tail"], [819, 1, 1, "", "take_every"], [820, 1, 1, "", "top_k"], [821, 1, 1, "", "unique"], [822, 1, 1, "", "unnest"], [823, 1, 1, "", "update"], [824, 1, 1, "", "var"], [825, 2, 1, "", "width"], [826, 1, 1, "", "with_columns"], [827, 1, 1, "", "with_columns_seq"], [828, 1, 1, "", "with_context"], [829, 1, 1, "", "with_row_count"]], "polars.List": [[60, 1, 1, "", "__init__"]], "polars.Null": [[61, 1, 1, "", "__init__"]], "polars.Object": [[62, 1, 1, "", "__init__"]], "polars.SQLContext": [[1220, 1, 1, "", "__enter__"], [1220, 1, 1, "", "__exit__"], [1220, 1, 1, "", "__init__"], [63, 1, 1, "", "execute"], [64, 1, 1, "", "register"], [65, 1, 1, "", "register_globals"], [66, 1, 1, "", "register_many"], [67, 1, 1, "", "tables"], [68, 1, 1, "", "unregister"]], "polars.Series": [[854, 1, 1, "", "abs"], [855, 1, 1, "", "alias"], [856, 1, 1, "", "all"], [857, 1, 1, "", "any"], [858, 1, 1, "", "append"], [859, 1, 1, "", "apply"], [860, 1, 1, "", "arccos"], [861, 1, 1, "", "arccosh"], [862, 1, 1, "", "arcsin"], [863, 1, 1, "", "arcsinh"], [864, 1, 1, "", "arctan"], [865, 1, 1, "", "arctanh"], [866, 1, 1, "", "arg_max"], [867, 1, 1, "", "arg_min"], [868, 1, 1, "", "arg_sort"], [869, 1, 1, "", "arg_true"], [870, 1, 1, "", "arg_unique"], [881, 1, 1, "", "bottom_k"], [882, 1, 1, "", "cast"], [883, 3, 1, "", "cat"], [889, 1, 1, "", "cbrt"], [890, 1, 1, "", "ceil"], [891, 1, 1, "", "chunk_lengths"], [892, 1, 1, "", "clear"], [893, 1, 1, "", "clip"], [894, 1, 1, "", "clip_max"], [895, 1, 1, "", "clip_min"], [896, 1, 1, "", "clone"], [897, 1, 1, "", "cos"], [898, 1, 1, "", "cosh"], [899, 1, 1, "", "cot"], [900, 1, 1, "", "cum_max"], [901, 1, 1, "", "cum_min"], [902, 1, 1, "", "cum_prod"], [903, 1, 1, "", "cum_sum"], [904, 1, 1, "", "cummax"], [905, 1, 1, "", "cummin"], [906, 1, 1, "", "cumprod"], [907, 1, 1, "", "cumsum"], [908, 1, 1, "", "cumulative_eval"], [909, 1, 1, "", "cut"], [910, 1, 1, "", "describe"], [911, 1, 1, "", "diff"], [912, 1, 1, "", "dot"], [913, 1, 1, "", "drop_nans"], [914, 1, 1, "", "drop_nulls"], [915, 3, 1, "", "dt"], [968, 3, 1, "", "dtype"], [969, 1, 1, "", "entropy"], [970, 1, 1, "", "equals"], [971, 1, 1, "", "estimated_size"], [972, 1, 1, "", "ewm_mean"], [973, 1, 1, "", "ewm_std"], [974, 1, 1, "", "ewm_var"], [975, 1, 1, "", "exp"], [976, 1, 1, "", "explode"], [977, 1, 1, "", "extend"], [978, 1, 1, "", "extend_constant"], [979, 1, 1, "", "fill_nan"], [980, 1, 1, "", "fill_null"], [981, 1, 1, "", "filter"], [982, 3, 1, "", "flags"], [983, 1, 1, "", "floor"], [984, 1, 1, "", "gather"], [985, 1, 1, "", "gather_every"], [986, 1, 1, "", "get_chunks"], [987, 1, 1, "", "has_validity"], [988, 1, 1, "", "hash"], [989, 1, 1, "", "head"], [990, 1, 1, "", "hist"], [991, 1, 1, "", "implode"], [992, 3, 1, "", "inner_dtype"], [993, 1, 1, "", "interpolate"], [994, 1, 1, "", "is_between"], [995, 1, 1, "", "is_boolean"], [996, 1, 1, "", "is_duplicated"], [997, 1, 1, "", "is_empty"], [998, 1, 1, "", "is_finite"], [999, 1, 1, "", "is_first"], [1000, 1, 1, "", "is_first_distinct"], [1001, 1, 1, "", "is_float"], [1002, 1, 1, "", "is_in"], [1003, 1, 1, "", "is_infinite"], [1004, 1, 1, "", "is_integer"], [1005, 1, 1, "", "is_last"], [1006, 1, 1, "", "is_last_distinct"], [1007, 1, 1, "", "is_nan"], [1008, 1, 1, "", "is_not_nan"], [1009, 1, 1, "", "is_not_null"], [1010, 1, 1, "", "is_null"], [1011, 1, 1, "", "is_numeric"], [1012, 1, 1, "", "is_sorted"], [1013, 1, 1, "", "is_temporal"], [1014, 1, 1, "", "is_unique"], [1015, 1, 1, "", "is_utf8"], [1016, 1, 1, "", "item"], [1017, 1, 1, "", "kurtosis"], [1018, 1, 1, "", "len"], [1019, 1, 1, "", "limit"], [1020, 3, 1, "", "list"], [1059, 1, 1, "", "log"], [1060, 1, 1, "", "log10"], [1061, 1, 1, "", "log1p"], [1062, 1, 1, "", "lower_bound"], [1063, 1, 1, "", "map_dict"], [1064, 1, 1, "", "map_elements"], [1065, 1, 1, "", "max"], [1066, 1, 1, "", "mean"], [1067, 1, 1, "", "median"], [1068, 1, 1, "", "min"], [1069, 1, 1, "", "mode"], [1070, 1, 1, "", "n_chunks"], [1071, 1, 1, "", "n_unique"], [1072, 3, 1, "", "name"], [1073, 1, 1, "", "nan_max"], [1074, 1, 1, "", "nan_min"], [1075, 1, 1, "", "new_from_index"], [1076, 1, 1, "", "not_"], [1077, 1, 1, "", "null_count"], [1078, 1, 1, "", "pct_change"], [1079, 1, 1, "", "peak_max"], [1080, 1, 1, "", "peak_min"], [1081, 1, 1, "", "product"], [1082, 1, 1, "", "qcut"], [1083, 1, 1, "", "quantile"], [1084, 1, 1, "", "rank"], [1085, 1, 1, "", "rechunk"], [1086, 1, 1, "", "reinterpret"], [1087, 1, 1, "", "rename"], [1088, 1, 1, "", "replace"], [1089, 1, 1, "", "reshape"], [1090, 1, 1, "", "reverse"], [1091, 1, 1, "", "rle"], [1092, 1, 1, "", "rle_id"], [1093, 1, 1, "", "rolling_apply"], [1094, 1, 1, "", "rolling_map"], [1095, 1, 1, "", "rolling_max"], [1096, 1, 1, "", "rolling_mean"], [1097, 1, 1, "", "rolling_median"], [1098, 1, 1, "", "rolling_min"], [1099, 1, 1, "", "rolling_quantile"], [1100, 1, 1, "", "rolling_skew"], [1101, 1, 1, "", "rolling_std"], [1102, 1, 1, "", "rolling_sum"], [1103, 1, 1, "", "rolling_var"], [1104, 1, 1, "", "round"], [1105, 1, 1, "", "round_sig_figs"], [1106, 1, 1, "", "sample"], [1107, 1, 1, "", "scatter"], [1108, 1, 1, "", "search_sorted"], [1109, 1, 1, "", "series_equal"], [1110, 1, 1, "", "set"], [1111, 1, 1, "", "set_at_idx"], [1112, 1, 1, "", "set_sorted"], [1113, 3, 1, "", "shape"], [1114, 1, 1, "", "shift"], [1115, 1, 1, "", "shift_and_fill"], [1116, 1, 1, "", "shrink_dtype"], [1117, 1, 1, "", "shrink_to_fit"], [1118, 1, 1, "", "shuffle"], [1119, 1, 1, "", "sign"], [1120, 1, 1, "", "sin"], [1121, 1, 1, "", "sinh"], [1122, 1, 1, "", "skew"], [1123, 1, 1, "", "slice"], [1124, 1, 1, "", "sort"], [1125, 1, 1, "", "sqrt"], [1126, 1, 1, "", "std"], [1127, 3, 1, "", "str"], [1183, 1, 1, "", "sum"], [1184, 1, 1, "", "tail"], [1185, 1, 1, "", "take"], [1186, 1, 1, "", "take_every"], [1187, 1, 1, "", "tan"], [1188, 1, 1, "", "tanh"], [1189, 1, 1, "", "to_arrow"], [1190, 1, 1, "", "to_dummies"], [1191, 1, 1, "", "to_frame"], [1192, 1, 1, "", "to_init_repr"], [1193, 1, 1, "", "to_list"], [1194, 1, 1, "", "to_numpy"], [1195, 1, 1, "", "to_pandas"], [1196, 1, 1, "", "to_physical"], [1197, 1, 1, "", "top_k"], [1198, 1, 1, "", "unique"], [1199, 1, 1, "", "unique_counts"], [1200, 1, 1, "", "upper_bound"], [1201, 1, 1, "", "value_counts"], [1202, 1, 1, "", "var"], [1203, 1, 1, "", "view"], [1204, 1, 1, "", "zip_with"]], "polars.Series.arr": [[871, 1, 1, "", "max"], [872, 1, 1, "", "min"], [873, 1, 1, "", "sum"], [874, 1, 1, "", "to_list"], [875, 1, 1, "", "unique"]], "polars.Series.bin": [[876, 1, 1, "", "contains"], [877, 1, 1, "", "decode"], [878, 1, 1, "", "encode"], [879, 1, 1, "", "ends_with"], [880, 1, 1, "", "starts_with"]], "polars.Series.cat": [[884, 1, 1, "", "get_categories"], [885, 1, 1, "", "is_local"], [886, 1, 1, "", "set_ordering"], [887, 1, 1, "", "to_local"], [888, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[916, 1, 1, "", "base_utc_offset"], [917, 1, 1, "", "cast_time_unit"], [918, 1, 1, "", "combine"], [919, 1, 1, "", "convert_time_zone"], [920, 1, 1, "", "date"], [921, 1, 1, "", "datetime"], [922, 1, 1, "", "day"], [923, 1, 1, "", "days"], [924, 1, 1, "", "dst_offset"], [925, 1, 1, "", "epoch"], [926, 1, 1, "", "hour"], [927, 1, 1, "", "hours"], [928, 1, 1, "", "is_leap_year"], [929, 1, 1, "", "iso_year"], [930, 1, 1, "", "max"], [931, 1, 1, "", "mean"], [932, 1, 1, "", "median"], [933, 1, 1, "", "microsecond"], [934, 1, 1, "", "microseconds"], [935, 1, 1, "", "millisecond"], [936, 1, 1, "", "milliseconds"], [937, 1, 1, "", "min"], [938, 1, 1, "", "minute"], [939, 1, 1, "", "minutes"], [940, 1, 1, "", "month"], [941, 1, 1, "", "month_end"], [942, 1, 1, "", "month_start"], [943, 1, 1, "", "nanosecond"], [944, 1, 1, "", "nanoseconds"], [945, 1, 1, "", "offset_by"], [946, 1, 1, "", "ordinal_day"], [947, 1, 1, "", "quarter"], [948, 1, 1, "", "replace_time_zone"], [949, 1, 1, "", "round"], [950, 1, 1, "", "second"], [951, 1, 1, "", "seconds"], [952, 1, 1, "", "strftime"], [953, 1, 1, "", "time"], [954, 1, 1, "", "timestamp"], [955, 1, 1, "", "to_string"], [956, 1, 1, "", "total_days"], [957, 1, 1, "", "total_hours"], [958, 1, 1, "", "total_microseconds"], [959, 1, 1, "", "total_milliseconds"], [960, 1, 1, "", "total_minutes"], [961, 1, 1, "", "total_nanoseconds"], [962, 1, 1, "", "total_seconds"], [963, 1, 1, "", "truncate"], [964, 1, 1, "", "week"], [965, 1, 1, "", "weekday"], [966, 1, 1, "", "with_time_unit"], [967, 1, 1, "", "year"]], "polars.Series.list": [[1021, 1, 1, "", "all"], [1022, 1, 1, "", "any"], [1023, 1, 1, "", "arg_max"], [1024, 1, 1, "", "arg_min"], [1025, 1, 1, "", "concat"], [1026, 1, 1, "", "contains"], [1027, 1, 1, "", "count_match"], [1028, 1, 1, "", "count_matches"], [1029, 1, 1, "", "diff"], [1030, 1, 1, "", "drop_nulls"], [1031, 1, 1, "", "eval"], [1032, 1, 1, "", "explode"], [1033, 1, 1, "", "first"], [1034, 1, 1, "", "gather"], [1035, 1, 1, "", "get"], [1036, 1, 1, "", "head"], [1037, 1, 1, "", "join"], [1038, 1, 1, "", "last"], [1039, 1, 1, "", "len"], [1040, 1, 1, "", "lengths"], [1041, 1, 1, "", "max"], [1042, 1, 1, "", "mean"], [1043, 1, 1, "", "min"], [1044, 1, 1, "", "reverse"], [1045, 1, 1, "", "sample"], [1046, 1, 1, "", "set_difference"], [1047, 1, 1, "", "set_intersection"], [1048, 1, 1, "", "set_symmetric_difference"], [1049, 1, 1, "", "set_union"], [1050, 1, 1, "", "shift"], [1051, 1, 1, "", "slice"], [1052, 1, 1, "", "sort"], [1053, 1, 1, "", "sum"], [1054, 1, 1, "", "tail"], [1055, 1, 1, "", "take"], [1056, 1, 1, "", "to_array"], [1057, 1, 1, "", "to_struct"], [1058, 1, 1, "", "unique"]], "polars.Series.str": [[1128, 1, 1, "", "concat"], [1129, 1, 1, "", "contains"], [1130, 1, 1, "", "count_match"], [1131, 1, 1, "", "count_matches"], [1132, 1, 1, "", "decode"], [1133, 1, 1, "", "encode"], [1134, 1, 1, "", "ends_with"], [1135, 1, 1, "", "explode"], [1136, 1, 1, "", "extract"], [1137, 1, 1, "", "extract_all"], [1138, 1, 1, "", "extract_groups"], [1139, 1, 1, "", "json_decode"], [1140, 1, 1, "", "json_extract"], [1141, 1, 1, "", "json_path_match"], [1142, 1, 1, "", "len_bytes"], [1143, 1, 1, "", "len_chars"], [1144, 1, 1, "", "lengths"], [1145, 1, 1, "", "ljust"], [1146, 1, 1, "", "lstrip"], [1147, 1, 1, "", "n_chars"], [1148, 1, 1, "", "pad_end"], [1149, 1, 1, "", "pad_start"], [1150, 1, 1, "", "parse_int"], [1151, 1, 1, "", "replace"], [1152, 1, 1, "", "replace_all"], [1153, 1, 1, "", "reverse"], [1154, 1, 1, "", "rjust"], [1155, 1, 1, "", "rstrip"], [1156, 1, 1, "", "slice"], [1157, 1, 1, "", "split"], [1158, 1, 1, "", "split_exact"], [1159, 1, 1, "", "splitn"], [1160, 1, 1, "", "starts_with"], [1161, 1, 1, "", "strip"], [1162, 1, 1, "", "strip_chars"], [1163, 1, 1, "", "strip_chars_end"], [1164, 1, 1, "", "strip_chars_start"], [1165, 1, 1, "", "strip_prefix"], [1166, 1, 1, "", "strip_suffix"], [1167, 1, 1, "", "strptime"], [1168, 1, 1, "", "to_date"], [1169, 1, 1, "", "to_datetime"], [1170, 1, 1, "", "to_decimal"], [1171, 1, 1, "", "to_integer"], [1172, 1, 1, "", "to_lowercase"], [1173, 1, 1, "", "to_time"], [1174, 1, 1, "", "to_titlecase"], [1175, 1, 1, "", "to_uppercase"], [1176, 1, 1, "", "zfill"]], "polars.Series.struct": [[1177, 1, 1, "", "field"], [1178, 3, 1, "", "fields"], [1179, 3, 1, "", "json_encode"], [1180, 1, 1, "", "rename_fields"], [1181, 3, 1, "", "schema"], [1182, 1, 1, "", "unnest"]], "polars.StringCache": [[69, 1, 1, "", "__init__"]], "polars.Struct": [[70, 1, 1, "", "__init__"]], "polars.Time": [[71, 1, 1, "", "__init__"]], "polars.UInt16": [[72, 1, 1, "", "__init__"]], "polars.UInt32": [[73, 1, 1, "", "__init__"]], "polars.UInt64": [[74, 1, 1, "", "__init__"]], "polars.UInt8": [[75, 1, 1, "", "__init__"]], "polars.Unknown": [[76, 1, 1, "", "__init__"]], "polars.Utf8": [[77, 1, 1, "", "__init__"]], "polars.api": [[79, 4, 1, "", "register_dataframe_namespace"], [80, 4, 1, "", "register_expr_namespace"], [81, 4, 1, "", "register_lazyframe_namespace"], [82, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[272, 1, 1, "", "__iter__"], [273, 1, 1, "", "agg"], [274, 1, 1, "", "all"], [275, 1, 1, "", "apply"], [276, 1, 1, "", "count"], [277, 1, 1, "", "first"], [278, 1, 1, "", "head"], [279, 1, 1, "", "last"], [280, 1, 1, "", "map_groups"], [281, 1, 1, "", "max"], [282, 1, 1, "", "mean"], [283, 1, 1, "", "median"], [284, 1, 1, "", "min"], [285, 1, 1, "", "n_unique"], [286, 1, 1, "", "quantile"], [287, 1, 1, "", "sum"], [288, 1, 1, "", "tail"]], "polars.exceptions": [[89, 5, 1, "", "ArrowError"], [90, 5, 1, "", "ColumnNotFoundError"], [91, 5, 1, "", "ComputeError"], [92, 5, 1, "", "DuplicateError"], [93, 5, 1, "", "InvalidOperationError"], [94, 5, 1, "", "NoDataError"], [95, 5, 1, "", "NoRowsReturnedError"], [96, 5, 1, "", "PolarsPanicError"], [97, 5, 1, "", "RowsError"], [98, 5, 1, "", "SchemaError"], [99, 5, 1, "", "SchemaFieldNotFoundError"], [100, 5, 1, "", "ShapeError"], [101, 5, 1, "", "StructFieldNotFoundError"], [102, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[112, 1, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[830, 1, 1, "", "agg"], [831, 1, 1, "", "all"], [832, 1, 1, "", "apply"], [833, 1, 1, "", "count"], [834, 1, 1, "", "first"], [835, 1, 1, "", "head"], [836, 1, 1, "", "last"], [837, 1, 1, "", "map_groups"], [838, 1, 1, "", "max"], [839, 1, 1, "", "mean"], [840, 1, 1, "", "median"], [841, 1, 1, "", "min"], [842, 1, 1, "", "n_unique"], [843, 1, 1, "", "quantile"], [844, 1, 1, "", "sum"], [845, 1, 1, "", "tail"]], "polars.selectors": [[852, 4, 1, "", "all"], [852, 4, 1, "", "by_dtype"], [852, 4, 1, "", "by_name"], [852, 4, 1, "", "categorical"], [852, 4, 1, "", "contains"], [852, 4, 1, "", "date"], [852, 4, 1, "", "datetime"], [852, 4, 1, "", "duration"], [852, 4, 1, "", "ends_with"], [852, 4, 1, "", "expand_selector"], [852, 4, 1, "", "first"], [852, 4, 1, "", "float"], [852, 4, 1, "", "integer"], [852, 4, 1, "", "is_selector"], [852, 4, 1, "", "last"], [852, 4, 1, "", "matches"], [852, 4, 1, "", "numeric"], [852, 4, 1, "", "starts_with"], [852, 4, 1, "", "string"], [852, 4, 1, "", "temporal"], [852, 4, 1, "", "time"]], "polars.testing": [[137, 4, 1, "", "assert_frame_equal"], [138, 4, 1, "", "assert_frame_not_equal"], [139, 4, 1, "", "assert_series_equal"], [140, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[141, 0, 1, "", "column"], [142, 4, 1, "", "columns"], [143, 4, 1, "", "create_list_strategy"], [144, 4, 1, "", "dataframes"], [145, 4, 1, "", "load_profile"], [146, 4, 1, "", "series"], [147, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[141, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 169, 977], "api": [1, 79, 80, 81, 82, 753], "provid": 1, "new": 1, "function": [1, 150, 740, 752, 852], "avail": 1, "registr": 1, "exampl": [1, 852, 1221], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 737, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1221], "arrai": [2, 733, 1205], "binari": [3, 734, 747, 1207], "boolean": [4, 735, 1208], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 150], "activate_decim": 6, "load": [7, 150], "load_from_fil": 8, "restore_default": 9, "save": [10, 150], "save_to_fil": 11, "set_ascii_t": 12, "set_auto_structifi": 13, "set_decimal_separ": 14, "set_float_precis": 15, "set_fmt_float": 16, "set_fmt_str_length": 17, "set_fmt_table_cell_list_len": 18, "set_streaming_chunk_s": 19, "set_tbl_cell_align": 20, "set_tbl_cell_numeric_align": 21, "set_tbl_col": 22, "set_tbl_column_data_type_inlin": 23, "set_tbl_dataframe_shape_below": 24, "set_tbl_format": 25, "set_tbl_hide_column_data_typ": 26, "set_tbl_hide_column_nam": 27, "set_tbl_hide_dataframe_shap": 28, "set_tbl_hide_dtype_separ": 29, "set_tbl_row": 30, "set_tbl_width_char": 31, "set_thousands_separ": 32, "set_trim_decimal_zero": 33, "set_verbos": 34, "state": [35, 150], "datafram": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 144, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 294], "write_avro": 36, "write_csv": 37, "write_databas": 38, "write_delta": 39, "write_excel": 40, "write_ipc": 41, "write_ipc_stream": 42, "write_json": [43, 520], "write_ndjson": 44, "write_parquet": 45, "datatyp": 46, "date": [47, 366, 684, 920], "datetim": [48, 367, 687, 921], "decim": 49, "durat": [50, 690], "float32": 51, "float64": 52, "int16": 53, "int32": 54, "int64": 55, "int8": 56, "lazyfram": [57, 58, 59, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849], "sink_csv": 57, "sink_ipc": 58, "sink_parquet": 59, "list": [60, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 742, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1214], "null": 61, "object": 62, "sqlcontext": [63, 64, 65, 66, 67, 68], "execut": 63, "regist": 64, "register_glob": 65, "register_mani": 66, "tabl": 67, "unregist": 68, "stringcach": [69, 752], "struct": [70, 638, 639, 640, 723, 749, 1177, 1178, 1179, 1180, 1181, 1182, 1218], "time": [71, 395, 727, 953], "uint16": 72, "uint32": 73, "uint64": 74, "uint8": 75, "unknown": 76, "utf8": 77, "align_fram": 78, "register_dataframe_namespac": 79, "register_expr_namespac": 80, "register_lazyframe_namespac": 81, "register_series_namespac": 82, "build_info": 83, "collect_al": 84, "collect_all_async": 85, "concat": [86, 464, 589, 1025, 1128], "disable_string_cach": 87, "enable_string_cach": 88, "except": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 298], "arrowerror": 89, "columnnotfounderror": 90, "computeerror": 91, "duplicateerror": 92, "invalidoperationerror": 93, "nodataerror": 94, "norowsreturnederror": 95, "polarspanicerror": 96, "rowserror": 97, "schemaerror": 98, "schemafieldnotfounderror": 99, "shapeerror": 100, "structfieldnotfounderror": 101, "toomanyrowsreturnederror": 102, "from_arrow": 103, "from_datafram": 104, "from_dict": [105, 106], "from_numpi": 107, "from_panda": 108, "from_record": 109, "from_repr": 110, "get_index_typ": 111, "io": 112, "csv": [112, 754], "batched_read": 112, "batchedcsvread": [112, 754], "next_batch": 112, "read_avro": 113, "read_csv": 114, "read_csv_batch": 115, "read_databas": 116, "read_database_uri": 117, "read_delta": 118, "read_excel": 119, "read_ipc": 120, "read_ipc_schema": 121, "read_ipc_stream": 122, "read_json": 123, "read_ndjson": 124, "read_od": 125, "read_parquet": 126, "read_parquet_schema": 127, "scan_csv": 128, "scan_delta": 129, "scan_iceberg": 130, "scan_ipc": 131, "scan_ndjson": 132, "scan_parquet": 133, "scan_pyarrow_dataset": 134, "set_random_se": 135, "show_vers": 136, "test": [137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 1221], "assert_frame_equ": 137, "assert_frame_not_equ": 138, "assert_series_equ": 139, "assert_series_not_equ": 140, "parametr": [141, 142, 143, 144, 145, 146, 147, 1221], "column": [141, 142, 159, 738, 764], "create_list_strategi": 143, "load_profil": 145, "seri": [146, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1213], "set_profil": 147, "threadpool_s": 148, "using_string_cach": 149, "option": 150, "current": 150, "us": 150, "context": 150, "manag": 150, "decor": 150, "aggreg": [151, 299, 755, 853], "__dataframe__": 152, "appli": [153, 275, 308, 663, 832, 859], "approx_n_uniqu": [154, 309, 664, 756], "bottom_k": [155, 332, 757, 881], "cast": [156, 333, 759, 882], "clear": [157, 760, 892], "clone": [158, 761, 896], "corr": [160, 673], "describ": [161, 910], "drop": [162, 766], "drop_in_plac": 163, "drop_nul": [164, 361, 469, 767, 914, 1030], "dtype": [165, 768, 968], "equal": [166, 970], "estimated_s": [167, 971], "explod": [168, 418, 471, 596, 770, 976, 1032, 1135], "fill_nan": [170, 420, 772, 979], "fill_nul": [171, 421, 773, 980], "filter": [172, 422, 774, 981], "find_idx_by_nam": 173, "flag": [174, 982], "fold": [175, 694], "frame_equ": 176, "gather_everi": [177, 430, 776, 985], "get_column": [178, 180], "get_column_index": 179, "glimps": 181, "group_bi": [182, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 777, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845], "group_by_dynam": [183, 778], "group_by_rol": [184, 779], "groupbi": [185, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 293, 780, 848], "groupby_dynam": [186, 781], "groupby_rol": [187, 782], "hash_row": 188, "head": [189, 278, 435, 475, 698, 783, 835, 989, 1036], "height": 190, "hstack": 191, "insert_at_idx": 192, "insert_column": 193, "interpol": [194, 438, 785, 993], "is_dupl": [195, 440, 996], "is_empti": [196, 997], "is_uniqu": [197, 453, 1014], "item": [198, 1016], "iter_column": 199, "iter_row": 200, "iter_slic": 201, "join": [202, 476, 786, 1037], "join_asof": [203, 787], "lazi": [204, 789], "limit": [205, 459, 790, 1019], "map_row": 206, "max": [207, 281, 321, 480, 508, 707, 793, 838, 871, 930, 1041, 1065], "max_horizont": [208, 708], "mean": [209, 282, 481, 509, 709, 794, 839, 931, 1042, 1066], "mean_horizont": 210, "median": [211, 283, 510, 710, 795, 840, 932, 1067], "melt": [212, 796], "merge_sort": [213, 797], "min": [214, 284, 322, 482, 521, 711, 798, 841, 872, 937, 1043, 1068], "min_horizont": [215, 712], "n_chunk": [216, 1070], "n_uniqu": [217, 285, 525, 713, 842, 1071], "null_count": [218, 537, 799, 1077], "partition_bi": 219, "pipe": [220, 543, 800], "pivot": 221, "product": [222, 546, 1081], "quantil": [223, 286, 548, 715, 802, 843, 1083], "rechunk": [224, 551, 1085], "renam": [225, 803, 1087], "replac": [226, 554, 612, 1088, 1151], "replace_at_idx": 227, "replace_column": 228, "revers": [229, 483, 556, 614, 804, 1044, 1090, 1153], "roll": [230, 559, 805], "row": [231, 232], "rows_by_kei": 233, "sampl": [234, 484, 573, 1045, 1106], "schema": [235, 806, 1181], "select": [236, 296, 720, 745, 807, 851, 1216], "select_seq": [237, 808], "set_sort": [238, 575, 810, 1112], "shape": [239, 1113], "shift": [240, 489, 576, 811, 1050, 1114], "shift_and_fil": [241, 577, 812, 1115], "shrink_to_fit": [242, 1117], "slice": [243, 490, 584, 617, 814, 1051, 1123, 1156], "sort": [244, 491, 585, 815, 1052, 1124], "std": [245, 588, 722, 816, 1126], "sum": [246, 287, 323, 492, 643, 724, 817, 844, 873, 1053, 1183], "sum_horizont": [247, 725], "tail": [248, 288, 493, 644, 726, 818, 845, 1054, 1184], "take_everi": [249, 646, 819, 1186], "to_arrow": [250, 1189], "to_dict": [251, 252], "to_dummi": [253, 1190], "to_init_repr": [254, 1192], "to_numpi": [255, 1194], "to_panda": [256, 1195], "to_seri": 257, "to_struct": [258, 496, 1057], "top_k": [259, 650, 820, 1197], "transpos": 260, "uniqu": [261, 325, 497, 652, 821, 875, 1058, 1198], "unnest": [262, 822, 1182], "unstack": 263, "updat": [264, 823], "upsampl": 265, "var": [266, 656, 730, 824, 1202], "vstack": 267, "width": [268, 825], "with_column": [269, 826], "with_columns_seq": [270, 827], "with_row_count": [271, 829], "__iter__": 272, "agg": [273, 830], "all": [274, 304, 460, 659, 831, 856, 1021], "count": [276, 344, 674, 833], "first": [277, 423, 472, 693, 775, 834, 1033], "last": [279, 456, 477, 702, 788, 836, 1038], "map_group": [280, 706, 837], "attribut": [289, 846, 1206], "comput": [290, 739, 1210], "descript": [291, 847, 1211], "export": [292, 1212], "miscellan": [295, 744, 752, 850, 1215], "manipul": [296, 745, 851, 1216], "data": 297, "type": 297, "numer": [297, 747], "tempor": [297, 750, 1219], "nest": 297, "other": 297, "expr": [300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658], "ab": [300, 854], "add": 301, "agg_group": 302, "alia": [303, 855], "and_": 305, "ani": [306, 461, 661, 857, 1022], "append": [307, 858], "arcco": [310, 860], "arccosh": [311, 861], "arcsin": [312, 862], "arcsinh": [313, 863], "arctan": [314, 864], "arctanh": [315, 865], "arg_max": [316, 462, 866, 1023], "arg_min": [317, 463, 867, 1024], "arg_sort": [318, 868], "arg_tru": [319, 869], "arg_uniqu": [320, 870], "arr": [321, 322, 323, 324, 325, 871, 872, 873, 874, 875], "to_list": [324, 874, 1193], "backward_fil": 326, "bin": [327, 328, 329, 330, 331, 876, 877, 878, 879, 880], "contain": [327, 465, 590, 876, 1026, 1129], "decod": [328, 593, 877, 1132], "encod": [329, 594, 878, 1133], "ends_with": [330, 595, 879, 1134], "starts_with": [331, 621, 880, 1160], "cat": [334, 335, 883, 884, 885, 886, 887, 888], "get_categori": [334, 884], "set_ord": [335, 886], "cbrt": [336, 889], "ceil": [337, 890], "clip": [338, 893], "clip_max": [339, 894], "clip_min": [340, 895], "co": [341, 897], "cosh": [342, 898], "cot": [343, 899], "cum_count": 345, "cum_max": [346, 900], "cum_min": [347, 901], "cum_prod": [348, 902], "cum_sum": [349, 678, 903], "cumcount": 350, "cummax": [351, 904], "cummin": [352, 905], "cumprod": [353, 906], "cumsum": [354, 682, 907], "cumulative_ev": [355, 908], "cut": [356, 909], "degre": 357, "diff": [358, 468, 911, 1029], "dot": [359, 912], "drop_nan": [360, 913], "dt": [362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967], "base_utc_offset": [362, 916], "cast_time_unit": [363, 917], "combin": [364, 918], "convert_time_zon": [365, 919], "dai": [368, 369, 922, 923], "dst_offset": [370, 924], "epoch": [371, 925], "hour": [372, 373, 926, 927], "is_leap_year": [374, 928], "iso_year": [375, 929], "microsecond": [376, 377, 933, 934], "millisecond": [378, 379, 935, 936], "minut": [380, 381, 938, 939], "month": [382, 940], "month_end": [383, 941], "month_start": [384, 942], "nanosecond": [385, 386, 943, 944], "offset_bi": [387, 945], "ordinal_dai": [388, 946], "quarter": [389, 947], "replace_time_zon": [390, 948], "round": [391, 571, 949, 1104], "second": [392, 393, 950, 951], "strftime": [394, 952], "timestamp": [396, 954], "to_str": [397, 955], "total_dai": [398, 956], "total_hour": [399, 957], "total_microsecond": [400, 958], "total_millisecond": [401, 959], "total_minut": [402, 960], "total_nanosecond": [403, 961], "total_second": [404, 962], "truncat": [405, 963], "week": [406, 964], "weekdai": [407, 965], "with_time_unit": [408, 966], "year": [409, 967], "entropi": [410, 969], "eq": [411, 511], "eq_miss": 412, "ewm_mean": [413, 972], "ewm_std": [414, 973], "ewm_var": [415, 974], "exclud": [416, 692], "exp": [417, 975], "extend_const": [419, 978], "flatten": 424, "floor": [425, 983], "floordiv": 426, "forward_fil": 427, "from_json": 428, "gather": [429, 473, 984, 1034], "ge": 431, "get": [432, 474, 1035], "gt": 433, "hash": [434, 988], "implod": [436, 699, 991], "inspect": [437, 784], "is_between": [439, 994], "is_finit": [441, 998], "is_first": [442, 999], "is_first_distinct": [443, 1000], "is_in": [444, 1002], "is_infinit": [445, 1003], "is_last": [446, 1005], "is_last_distinct": [447, 1006], "is_nan": [448, 1007], "is_not": 449, "is_not_nan": [450, 1008], "is_not_nul": [451, 1009], "is_nul": [452, 1010], "keep_nam": 454, "kurtosi": [455, 1017], "le": 457, "len": [458, 478, 1018, 1039], "count_match": [466, 467, 591, 592, 1027, 1028, 1130, 1131], "eval": [470, 1031], "length": [479, 605, 1040, 1144], "set_differ": [485, 1046], "set_intersect": [486, 1047], "set_symmetric_differ": [487, 1048], "set_union": [488, 1049], "take": [494, 645, 1055, 1185], "to_arrai": [495, 1056], "log": [498, 1059], "log10": [499, 1060], "log1p": [500, 1061], "lower_bound": [501, 1062], "lt": 502, "map": [503, 527, 704, 791], "map_alia": 504, "map_batch": [505, 705, 792], "map_dict": [506, 1063], "map_el": [507, 1064], "meta": [511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 743], "has_multiple_output": 512, "is_regex_project": 513, "ne": [514, 534], "output_nam": 515, "pop": 516, "root_nam": 517, "tree_format": 518, "undo_alias": 519, "mod": 522, "mode": [523, 1069], "mul": 524, "name": [526, 527, 528, 529, 530, 531, 738, 746, 1072], "keep": 526, "prefix": [528, 545], "suffix": [529, 642], "to_lowercas": [530, 633, 1172], "to_uppercas": [531, 636, 1175], "nan_max": [532, 1073], "nan_min": [533, 1074], "ne_miss": 535, "not_": [536, 1076], "or_": 538, "over": 539, "pct_chang": [540, 1078], "peak_max": [541, 1079], "peak_min": [542, 1080], "pow": 544, "qcut": [547, 1082], "radian": 549, "rank": [550, 1084], "reinterpret": [552, 1086], "repeat_bi": 553, "reshap": [555, 1089], "rle": [557, 1091], "rle_id": [558, 1092], "rolling_appli": [560, 1093], "rolling_map": [561, 1094], "rolling_max": [562, 1095], "rolling_mean": [563, 1096], "rolling_median": [564, 1097], "rolling_min": [565, 1098], "rolling_quantil": [566, 1099], "rolling_skew": [567, 1100], "rolling_std": [568, 1101], "rolling_sum": [569, 1102], "rolling_var": [570, 1103], "round_sig_fig": [572, 1105], "search_sort": [574, 1108], "shrink_dtyp": [578, 1116], "shuffl": [579, 1118], "sign": [580, 1119], "sin": [581, 1120], "sinh": [582, 1121], "skew": [583, 1122], "sort_bi": 586, "sqrt": [587, 1125], "str": [589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176], "extract": [597, 1136], "extract_al": [598, 1137], "extract_group": [599, 1138], "json_decod": [600, 1139], "json_extract": [601, 1140], "json_path_match": [602, 1141], "len_byt": [603, 1142], "len_char": [604, 1143], "ljust": [606, 1145], "lstrip": [607, 1146], "n_char": [608, 1147], "pad_end": [609, 1148], "pad_start": [610, 1149], "parse_int": [611, 1150], "replace_al": [613, 1152], "rjust": [615, 1154], "rstrip": [616, 1155], "split": [618, 1157], "split_exact": [619, 1158], "splitn": [620, 1159], "strip": [622, 1161], "strip_char": [623, 1162], "strip_chars_end": [624, 1163], "strip_chars_start": [625, 1164], "strip_prefix": [626, 1165], "strip_suffix": [627, 1166], "strptime": [628, 1167], "to_dat": [629, 1168], "to_datetim": [630, 1169], "to_decim": [631, 1170], "to_integ": [632, 1171], "to_tim": [634, 1173], "to_titlecas": [635, 1174], "zfill": [637, 1176], "field": [638, 1177, 1178], "json_encod": [639, 1179], "rename_field": [640, 1180], "sub": 641, "tan": [647, 1187], "tanh": [648, 1188], "to_phys": [649, 1196], "truediv": 651, "unique_count": [653, 1199], "upper_bound": [654, 1200], "value_count": [655, 1201], "where": 657, "xor": 658, "all_horizont": 660, "any_horizont": 662, "arang": 665, "arctan2": 666, "arctan2d": 667, "arg_sort_bi": 668, "arg_wher": 669, "coalesc": 670, "concat_list": 671, "concat_str": 672, "cov": 675, "cum_fold": 676, "cum_reduc": 677, "cum_sum_horizont": 679, "cumfold": 680, "cumreduc": 681, "cumsum_horizont": 683, "date_rang": [685, 686], "datetime_rang": [688, 689], "element": 691, "format": 695, "from_epoch": 696, "group": 697, "int_rang": [700, 701], "lit": 703, "ones": 714, "reduc": 716, "repeat": 717, "rolling_corr": 718, "rolling_cov": 719, "sql_expr": 721, "time_rang": [728, 729], "when": 731, "zero": 732, "categori": [736, 1209], "col": 737, "express": 741, "oper": [747, 852], "conjunct": 747, "comparison": 747, "string": [748, 1217], "window": 751, "convers": 752, "parallel": 752, "random": 752, "refer": 753, "input": 754, "output": 754, "feather": 754, "ipc": 754, "parquet": 754, "databas": 754, "json": 754, "avro": 754, "spreadsheet": 754, "apach": 754, "iceberg": 754, "delta": 754, "lake": 754, "dataset": 754, "cach": 758, "collect": 762, "collect_async": 763, "deseri": 765, "explain": 769, "fetch": 771, "profil": [801, 1221], "serial": 809, "show_graph": 813, "with_context": 828, "lazygroupbi": [830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845], "read": 850, "write": 850, "logic": 850, "plan": 850, "selector": 852, "import": 852, "set": [852, 1110], "is_loc": 885, "to_loc": 887, "uses_lexical_ord": 888, "chunk_length": 891, "get_chunk": 986, "has_valid": 987, "hist": 990, "inner_dtyp": 992, "is_boolean": 995, "is_float": 1001, "is_integ": 1004, "is_numer": 1011, "is_sort": 1012, "is_tempor": 1013, "is_utf8": 1015, "new_from_index": 1075, "scatter": 1107, "series_equ": 1109, "set_at_idx": 1111, "to_fram": 1191, "view": 1203, "zip_with": 1204, "sql": 1220, "method": 1220, "assert": 1221, "primit": 1221, "strategi": 1221, "helper": 1221, "util": 1222}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.DataFrame.fold": [[175, "polars-dataframe-fold"]], "polars.DataFrame.lazy": [[204, "polars-dataframe-lazy"]], "polars.DataFrame.iter_columns": [[199, "polars-dataframe-iter-columns"]], "polars.DataFrame.min_horizontal": [[215, "polars-dataframe-min-horizontal"]], "polars.DataFrame.get_column": [[178, "polars-dataframe-get-column"]], "polars.DataFrame.n_chunks": [[216, "polars-dataframe-n-chunks"]], "polars.DataFrame.max": [[207, "polars-dataframe-max"]], "polars.DataFrame.insert_column": [[193, "polars-dataframe-insert-column"]], "polars.DataFrame.insert_at_idx": [[192, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.iter_slices": [[201, "polars-dataframe-iter-slices"]], "polars.DataFrame.mean_horizontal": [[210, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.join_asof": [[203, "polars-dataframe-join-asof"]], "polars.DataFrame.item": [[198, "polars-dataframe-item"]], "polars.DataFrame.n_unique": [[217, "polars-dataframe-n-unique"]], "polars.DataFrame.interpolate": [[194, "polars-dataframe-interpolate"]], "polars.DataFrame.fill_null": [[171, "polars-dataframe-fill-null"]], "polars.DataFrame.hash_rows": [[188, "polars-dataframe-hash-rows"]], "polars.DataFrame.equals": [[166, "polars-dataframe-equals"]], "polars.DataFrame.head": [[189, "polars-dataframe-head"]], "polars.DataFrame.groupby_rolling": [[187, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.groupby_dynamic": [[186, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.is_duplicated": [[195, "polars-dataframe-is-duplicated"]], "polars.DataFrame.median": [[211, "polars-dataframe-median"]], "polars.DataFrame.explode": [[168, "polars-dataframe-explode"]], "polars.DataFrame.dtypes": [[165, "polars-dataframe-dtypes"]], "polars.DataFrame.height": [[190, "polars-dataframe-height"]], "polars.DataFrame.iter_rows": [[200, "polars-dataframe-iter-rows"]], "polars.DataFrame.merge_sorted": [[213, "polars-dataframe-merge-sorted"]], "polars.DataFrame.max_horizontal": [[208, "polars-dataframe-max-horizontal"]], "polars.DataFrame.null_count": [[218, "polars-dataframe-null-count"]], "polars.DataFrame.estimated_size": [[167, "polars-dataframe-estimated-size"]], "polars.DataFrame.flags": [[174, "polars-dataframe-flags"]], "polars.DataFrame.min": [[214, "polars-dataframe-min"]], "polars.DataFrame.extend": [[169, "polars-dataframe-extend"]], "polars.DataFrame.find_idx_by_name": [[173, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.get_column_index": [[179, "polars-dataframe-get-column-index"]], "polars.DataFrame.get_columns": [[180, "polars-dataframe-get-columns"]], "polars.DataFrame.join": [[202, "polars-dataframe-join"]], "polars.DataFrame.melt": [[212, "polars-dataframe-melt"]], "polars.DataFrame.group_by_rolling": [[184, "polars-dataframe-group-by-rolling"]], "polars.DataFrame.fill_nan": [[170, "polars-dataframe-fill-nan"]], "polars.DataFrame.is_unique": [[197, "polars-dataframe-is-unique"]], "polars.DataFrame.gather_every": [[177, "polars-dataframe-gather-every"]], "polars.DataFrame.groupby": [[185, "polars-dataframe-groupby"]], "polars.DataFrame.limit": [[205, "polars-dataframe-limit"]], "polars.DataFrame.partition_by": [[219, "polars-dataframe-partition-by"]], "polars.DataFrame.group_by": [[182, "polars-dataframe-group-by"]], "polars.DataFrame.frame_equal": [[176, "polars-dataframe-frame-equal"]], "polars.DataFrame.filter": [[172, "polars-dataframe-filter"]], "polars.DataFrame.map_rows": [[206, "polars-dataframe-map-rows"]], "polars.DataFrame.is_empty": [[196, "polars-dataframe-is-empty"]], "polars.DataFrame.mean": [[209, "polars-dataframe-mean"]], "polars.DataFrame.glimpse": [[181, "polars-dataframe-glimpse"]], "polars.DataFrame.hstack": [[191, "polars-dataframe-hstack"]], "polars.DataFrame.group_by_dynamic": [[183, "polars-dataframe-group-by-dynamic"]], "polars.read_json": [[123, "polars-read-json"]], "polars.read_ipc": [[120, "polars-read-ipc"]], "polars.DataFrame.approx_n_unique": [[154, "polars-dataframe-approx-n-unique"]], "polars.DataFrame.drop_nulls": [[164, "polars-dataframe-drop-nulls"]], "polars.testing.assert_frame_equal": [[137, "polars-testing-assert-frame-equal"]], "polars.scan_delta": [[129, "polars-scan-delta"]], "polars.get_index_type": [[111, "polars-get-index-type"]], "polars.DataFrame.__dataframe__": [[152, "polars-dataframe-dataframe"]], "polars.DataFrame.clear": [[157, "polars-dataframe-clear"]], "polars.read_ipc_stream": [[122, "polars-read-ipc-stream"]], "polars.scan_ipc": [[131, "polars-scan-ipc"]], "polars.scan_parquet": [[133, "polars-scan-parquet"]], "polars.DataFrame.clone": [[158, "polars-dataframe-clone"]], "polars.read_database_uri": [[117, "polars-read-database-uri"]], "polars.show_versions": [[136, "polars-show-versions"]], "polars.read_parquet_schema": [[127, "polars-read-parquet-schema"]], "polars.DataFrame.drop_in_place": [[163, "polars-dataframe-drop-in-place"]], "polars.testing.assert_series_equal": [[139, "polars-testing-assert-series-equal"]], "Aggregation": [[151, "aggregation"], [853, "aggregation"], [755, "aggregation"], [299, "aggregation"]], "polars.read_csv_batched": [[115, "polars-read-csv-batched"]], "polars.set_random_seed": [[135, "polars-set-random-seed"]], "polars.read_database": [[116, "polars-read-database"]], "polars.DataFrame.apply": [[153, "polars-dataframe-apply"]], "polars.DataFrame.describe": [[161, "polars-dataframe-describe"]], "polars.scan_pyarrow_dataset": [[134, "polars-scan-pyarrow-dataset"]], "polars.testing.assert_frame_not_equal": [[138, "polars-testing-assert-frame-not-equal"]], "polars.from_repr": [[110, "polars-from-repr"]], "polars.testing.parametric.dataframes": [[144, "polars-testing-parametric-dataframes"]], "polars.using_string_cache": [[149, "polars-using-string-cache"]], "polars.testing.parametric.column": [[141, "polars-testing-parametric-column"]], "polars.read_avro": [[113, "polars-read-avro"]], "polars.testing.parametric.series": [[146, "polars-testing-parametric-series"]], "polars.read_ipc_schema": [[121, "polars-read-ipc-schema"]], "polars.testing.parametric.create_list_strategy": [[143, "polars-testing-parametric-create-list-strategy"]], "polars.read_parquet": [[126, "polars-read-parquet"]], "polars.scan_ndjson": [[132, "polars-scan-ndjson"]], "polars.threadpool_size": [[148, "polars-threadpool-size"]], "polars.DataFrame.drop": [[162, "polars-dataframe-drop"]], "polars.DataFrame.columns": [[159, "polars-dataframe-columns"]], "polars.testing.parametric.load_profile": [[145, "polars-testing-parametric-load-profile"]], "polars.testing.parametric.set_profile": [[147, "polars-testing-parametric-set-profile"]], "polars.scan_iceberg": [[130, "polars-scan-iceberg"]], "polars.read_excel": [[119, "polars-read-excel"]], "polars.DataFrame.cast": [[156, "polars-dataframe-cast"]], "polars.testing.parametric.columns": [[142, "polars-testing-parametric-columns"]], "polars.read_ods": [[125, "polars-read-ods"]], "polars.testing.assert_series_not_equal": [[140, "polars-testing-assert-series-not-equal"]], "polars.DataFrame.corr": [[160, "polars-dataframe-corr"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[112, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.scan_csv": [[128, "polars-scan-csv"]], "polars.DataFrame.bottom_k": [[155, "polars-dataframe-bottom-k"]], "polars.read_ndjson": [[124, "polars-read-ndjson"]], "polars.read_delta": [[118, "polars-read-delta"]], "polars.read_csv": [[114, "polars-read-csv"]], "Config": [[150, "config"]], "Config options": [[150, "config-options"]], "Config load, save, and current state": [[150, "config-load-save-and-current-state"]], "Use as a context manager": [[150, "use-as-a-context-manager"]], "Use as a function decorator": [[150, "use-as-a-function-decorator"]], "polars.Config.set_tbl_width_chars": [[31, "polars-config-set-tbl-width-chars"]], "polars.DataFrame.write_delta": [[39, "polars-dataframe-write-delta"]], "polars.Int16": [[53, "polars-int16"]], "polars.Config.set_fmt_str_lengths": [[17, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_trim_decimal_zeros": [[33, "polars-config-set-trim-decimal-zeros"]], "polars.Config.set_tbl_column_data_type_inline": [[23, "polars-config-set-tbl-column-data-type-inline"]], "Index": [[0, "index"]], "polars.DataFrame.write_excel": [[40, "polars-dataframe-write-excel"]], "polars.DataFrame.write_json": [[43, "polars-dataframe-write-json"]], "polars.Config.set_thousands_separator": [[32, "polars-config-set-thousands-separator"]], "polars.Config.set_tbl_hide_dataframe_shape": [[28, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.restore_defaults": [[9, "polars-config-restore-defaults"]], "polars.DataType": [[46, "polars-datatype"]], "polars.Binary": [[3, "polars-binary"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1221, "examples"], [852, "examples"]], "polars.Config.set_streaming_chunk_size": [[19, "polars-config-set-streaming-chunk-size"]], "polars.Array": [[2, "polars-array"]], "polars.Config.set_tbl_cell_numeric_alignment": [[21, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.Config.set_tbl_hide_column_names": [[27, "polars-config-set-tbl-hide-column-names"]], "polars.DataFrame.write_parquet": [[45, "polars-dataframe-write-parquet"]], "polars.Decimal": [[49, "polars-decimal"]], "polars.Config.set_float_precision": [[15, "polars-config-set-float-precision"]], "polars.Config.set_tbl_dataframe_shape_below": [[24, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_verbose": [[34, "polars-config-set-verbose"]], "polars.Date": [[47, "polars-date"]], "polars.Config.set_tbl_formatting": [[25, "polars-config-set-tbl-formatting"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.Config.set_fmt_table_cell_list_len": [[18, "polars-config-set-fmt-table-cell-list-len"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.DataFrame.write_database": [[38, "polars-dataframe-write-database"]], "polars.Config.save_to_file": [[11, "polars-config-save-to-file"]], "polars.Float64": [[52, "polars-float64"]], "polars.Config.set_tbl_cell_alignment": [[20, "polars-config-set-tbl-cell-alignment"]], "polars.DataFrame.write_avro": [[36, "polars-dataframe-write-avro"]], "polars.Duration": [[50, "polars-duration"]], "polars.DataFrame.write_ndjson": [[44, "polars-dataframe-write-ndjson"]], "polars.Config.set_tbl_hide_column_data_types": [[26, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.save": [[10, "polars-config-save"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.Config.set_tbl_hide_dtype_separator": [[29, "polars-config-set-tbl-hide-dtype-separator"]], "polars.DataFrame.write_csv": [[37, "polars-dataframe-write-csv"]], "polars.DataFrame.write_ipc": [[41, "polars-dataframe-write-ipc"]], "polars.Int32": [[54, "polars-int32"]], "polars.Config.set_tbl_rows": [[30, "polars-config-set-tbl-rows"]], "polars.Config.set_ascii_tables": [[12, "polars-config-set-ascii-tables"]], "polars.Config.set_tbl_cols": [[22, "polars-config-set-tbl-cols"]], "polars.Config.set_auto_structify": [[13, "polars-config-set-auto-structify"]], "polars.Config.set_decimal_separator": [[14, "polars-config-set-decimal-separator"]], "polars.Config.state": [[35, "polars-config-state"]], "polars.Config.load_from_file": [[8, "polars-config-load-from-file"]], "polars.DataFrame.write_ipc_stream": [[42, "polars-dataframe-write-ipc-stream"]], "polars.Float32": [[51, "polars-float32"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Config.set_fmt_float": [[16, "polars-config-set-fmt-float"]], "polars.Datetime": [[48, "polars-datetime"]], "polars.Int64": [[55, "polars-int64"]], "polars.exceptions.TooManyRowsReturnedError": [[102, "polars-exceptions-toomanyrowsreturnederror"]], "polars.Int8": [[56, "polars-int8"]], "polars.UInt32": [[73, "polars-uint32"]], "polars.SQLContext.register": [[64, "polars-sqlcontext-register"]], "polars.exceptions.InvalidOperationError": [[93, "polars-exceptions-invalidoperationerror"]], "polars.api.register_series_namespace": [[82, "polars-api-register-series-namespace"]], "polars.Struct": [[70, "polars-struct"]], "polars.SQLContext.execute": [[63, "polars-sqlcontext-execute"]], "polars.from_arrow": [[103, "polars-from-arrow"]], "polars.exceptions.SchemaFieldNotFoundError": [[99, "polars-exceptions-schemafieldnotfounderror"]], "polars.Utf8": [[77, "polars-utf8"]], "polars.exceptions.StructFieldNotFoundError": [[101, "polars-exceptions-structfieldnotfounderror"]], "polars.UInt8": [[75, "polars-uint8"]], "polars.exceptions.SchemaError": [[98, "polars-exceptions-schemaerror"]], "polars.SQLContext.register_many": [[66, "polars-sqlcontext-register-many"]], "polars.exceptions.ComputeError": [[91, "polars-exceptions-computeerror"]], "polars.from_pandas": [[108, "polars-from-pandas"]], "polars.Object": [[62, "polars-object"]], "polars.UInt64": [[74, "polars-uint64"]], "polars.exceptions.PolarsPanicError": [[96, "polars-exceptions-polarspanicerror"]], "polars.exceptions.ArrowError": [[89, "polars-exceptions-arrowerror"]], "polars.exceptions.NoDataError": [[94, "polars-exceptions-nodataerror"]], "polars.api.register_dataframe_namespace": [[79, "polars-api-register-dataframe-namespace"]], "polars.LazyFrame.sink_csv": [[57, "polars-lazyframe-sink-csv"]], "polars.concat": [[86, "polars-concat"]], "polars.from_records": [[109, "polars-from-records"]], "polars.from_dict": [[105, "polars-from-dict"]], "polars.exceptions.NoRowsReturnedError": [[95, "polars-exceptions-norowsreturnederror"]], "polars.from_numpy": [[107, "polars-from-numpy"]], "polars.exceptions.ShapeError": [[100, "polars-exceptions-shapeerror"]], "polars.from_dataframe": [[104, "polars-from-dataframe"]], "polars.exceptions.ColumnNotFoundError": [[90, "polars-exceptions-columnnotfounderror"]], "polars.api.register_expr_namespace": [[80, "polars-api-register-expr-namespace"]], "polars.LazyFrame.sink_ipc": [[58, "polars-lazyframe-sink-ipc"]], "polars.build_info": [[83, "polars-build-info"]], "polars.collect_all": [[84, "polars-collect-all"]], "polars.StringCache": [[69, "polars-stringcache"]], "polars.enable_string_cache": [[88, "polars-enable-string-cache"]], "polars.UInt16": [[72, "polars-uint16"]], "polars.SQLContext.tables": [[67, "polars-sqlcontext-tables"]], "polars.SQLContext.register_globals": [[65, "polars-sqlcontext-register-globals"]], "polars.Time": [[71, "polars-time"]], "polars.exceptions.RowsError": [[97, "polars-exceptions-rowserror"]], "polars.disable_string_cache": [[87, "polars-disable-string-cache"]], "polars.Null": [[61, "polars-null"]], "polars.exceptions.DuplicateError": [[92, "polars-exceptions-duplicateerror"]], "polars.List": [[60, "polars-list"]], "polars.api.register_lazyframe_namespace": [[81, "polars-api-register-lazyframe-namespace"]], "polars.LazyFrame.sink_parquet": [[59, "polars-lazyframe-sink-parquet"]], "polars.collect_all_async": [[85, "polars-collect-all-async"]], "polars.align_frames": [[78, "polars-align-frames"]], "polars.Unknown": [[76, "polars-unknown"]], "polars.SQLContext.unregister": [[68, "polars-sqlcontext-unregister"]], "polars.from_dicts": [[106, "polars-from-dicts"]], "polars.Series.to_init_repr": [[1192, "polars-series-to-init-repr"]], "Attributes": [[1206, "attributes"], [846, "attributes"], [289, "attributes"]], "polars.Series.zip_with": [[1204, "polars-series-zip-with"]], "polars.Series.upper_bound": [[1200, "polars-series-upper-bound"]], "polars.Series.sum": [[1183, "polars-series-sum"]], "polars.Series.str.strip_prefix": [[1165, "polars-series-str-strip-prefix"]], "polars.Series.tail": [[1184, "polars-series-tail"]], "polars.Series.to_pandas": [[1195, "polars-series-to-pandas"]], "polars.Series.struct.schema": [[1181, "polars-series-struct-schema"]], "polars.Series.struct.json_encode": [[1179, "polars-series-struct-json-encode"]], "polars.Series.str.strip_suffix": [[1166, "polars-series-str-strip-suffix"]], "polars.Series.str.to_lowercase": [[1172, "polars-series-str-to-lowercase"]], "polars.Series.struct.unnest": [[1182, "polars-series-struct-unnest"]], "polars.Series.to_frame": [[1191, "polars-series-to-frame"]], "polars.Series.to_physical": [[1196, "polars-series-to-physical"]], "polars.Series.str.starts_with": [[1160, "polars-series-str-starts-with"]], "polars.Series.to_dummies": [[1190, "polars-series-to-dummies"]], "polars.Series.str.to_time": [[1173, "polars-series-str-to-time"]], "polars.Series.struct.rename_fields": [[1180, "polars-series-struct-rename-fields"]], "polars.Series.unique": [[1198, "polars-series-unique"]], "polars.Series.value_counts": [[1201, "polars-series-value-counts"]], "polars.Series.str.strip_chars_start": [[1164, "polars-series-str-strip-chars-start"]], "polars.Series.str.strip": [[1161, "polars-series-str-strip"]], "polars.Series.to_arrow": [[1189, "polars-series-to-arrow"]], "polars.Series.str.to_integer": [[1171, "polars-series-str-to-integer"]], "polars.Series.tan": [[1187, "polars-series-tan"]], "polars.Series.unique_counts": [[1199, "polars-series-unique-counts"]], "polars.Series.take": [[1185, "polars-series-take"]], "polars.Series.top_k": [[1197, "polars-series-top-k"]], "polars.Series.str.rstrip": [[1155, "polars-series-str-rstrip"]], "polars.Series.struct.field": [[1177, "polars-series-struct-field"]], "polars.Series.var": [[1202, "polars-series-var"]], "polars.Series.view": [[1203, "polars-series-view"]], "polars.Series.str.splitn": [[1159, "polars-series-str-splitn"]], "Boolean": [[1208, "boolean"], [735, "boolean"]], "Binary": [[1207, "binary"], [747, "binary"], [734, "binary"]], "polars.Series.str.split": [[1157, "polars-series-str-split"]], "polars.Series.str.to_datetime": [[1169, "polars-series-str-to-datetime"]], "polars.Series.str.slice": [[1156, "polars-series-str-slice"]], "polars.Series.str.to_decimal": [[1170, "polars-series-str-to-decimal"]], "Array": [[1205, "array"], [733, "array"]], "polars.Series.tanh": [[1188, "polars-series-tanh"]], "polars.Series.str.strip_chars_end": [[1163, "polars-series-str-strip-chars-end"]], "Categories": [[1209, "categories"], [736, "categories"]], "polars.Series.str.split_exact": [[1158, "polars-series-str-split-exact"]], "polars.Series.str.strip_chars": [[1162, "polars-series-str-strip-chars"]], "polars.Series.take_every": [[1186, "polars-series-take-every"]], "polars.Series.to_list": [[1193, "polars-series-to-list"]], "polars.Series.str.to_uppercase": [[1175, "polars-series-str-to-uppercase"]], "polars.Series.str.zfill": [[1176, "polars-series-str-zfill"]], "polars.Series.str.strptime": [[1167, "polars-series-str-strptime"]], "polars.Series.str.to_titlecase": [[1174, "polars-series-str-to-titlecase"]], "polars.Series.str.to_date": [[1168, "polars-series-str-to-date"]], "polars.Series.struct.fields": [[1178, "polars-series-struct-fields"]], "polars.Series.to_numpy": [[1194, "polars-series-to-numpy"]], "polars.Series.is_null": [[1010, "polars-series-is-null"]], "polars.Series.list.reverse": [[1044, "polars-series-list-reverse"]], "polars.Series.is_finite": [[998, "polars-series-is-finite"]], "polars.Series.is_unique": [[1014, "polars-series-is-unique"]], "polars.Series.is_not_null": [[1009, "polars-series-is-not-null"]], "polars.Series.is_first_distinct": [[1000, "polars-series-is-first-distinct"]], "polars.Series.list.first": [[1033, "polars-series-list-first"]], "polars.Series.list.join": [[1037, "polars-series-list-join"]], "polars.Series.interpolate": [[993, "polars-series-interpolate"]], "polars.Series.list.last": [[1038, "polars-series-list-last"]], "polars.Series.is_boolean": [[995, "polars-series-is-boolean"]], "polars.Series.list.gather": [[1034, "polars-series-list-gather"]], "polars.Series.len": [[1018, "polars-series-len"]], "polars.Series.is_nan": [[1007, "polars-series-is-nan"]], "polars.Series.is_duplicated": [[996, "polars-series-is-duplicated"]], "polars.Series.list.eval": [[1031, "polars-series-list-eval"]], "polars.Series.implode": [[991, "polars-series-implode"]], "polars.Series.list.max": [[1041, "polars-series-list-max"]], "polars.Series.item": [[1016, "polars-series-item"]], "polars.Series.is_last_distinct": [[1006, "polars-series-is-last-distinct"]], "polars.Series.list.min": [[1043, "polars-series-list-min"]], "polars.Series.is_in": [[1002, "polars-series-is-in"]], "polars.Series.list": [[1020, "polars-series-list"]], "polars.Series.is_float": [[1001, "polars-series-is-float"]], "polars.Series.is_numeric": [[1011, "polars-series-is-numeric"]], "polars.Series.is_not_nan": [[1008, "polars-series-is-not-nan"]], "polars.Series.is_temporal": [[1013, "polars-series-is-temporal"]], "polars.Series.list.all": [[1021, "polars-series-list-all"]], "polars.Series.list.lengths": [[1040, "polars-series-list-lengths"]], "polars.Series.is_infinite": [[1003, "polars-series-is-infinite"]], "polars.Series.limit": [[1019, "polars-series-limit"]], "polars.Series.list.count_matches": [[1028, "polars-series-list-count-matches"]], "polars.Series.list.arg_max": [[1023, "polars-series-list-arg-max"]], "polars.Series.list.head": [[1036, "polars-series-list-head"]], "polars.Series.is_between": [[994, "polars-series-is-between"]], "polars.Series.is_first": [[999, "polars-series-is-first"]], "polars.Series.list.explode": [[1032, "polars-series-list-explode"]], "polars.Series.list.get": [[1035, "polars-series-list-get"]], "polars.Series.is_integer": [[1004, "polars-series-is-integer"]], "polars.Series.hist": [[990, "polars-series-hist"]], "polars.Series.list.concat": [[1025, "polars-series-list-concat"]], "polars.Series.list.drop_nulls": [[1030, "polars-series-list-drop-nulls"]], "polars.Series.list.mean": [[1042, "polars-series-list-mean"]], "polars.Series.list.count_match": [[1027, "polars-series-list-count-match"]], "polars.Series.kurtosis": [[1017, "polars-series-kurtosis"]], "polars.Series.list.contains": [[1026, "polars-series-list-contains"]], "polars.Series.list.len": [[1039, "polars-series-list-len"]], "polars.Series.is_utf8": [[1015, "polars-series-is-utf8"]], "polars.Series.list.any": [[1022, "polars-series-list-any"]], "polars.Series.is_sorted": [[1012, "polars-series-is-sorted"]], "polars.Series.inner_dtype": [[992, "polars-series-inner-dtype"]], "polars.Series.is_last": [[1005, "polars-series-is-last"]], "polars.Series.list.diff": [[1029, "polars-series-list-diff"]], "polars.Series.is_empty": [[997, "polars-series-is-empty"]], "polars.Series.list.arg_min": [[1024, "polars-series-list-arg-min"]], "polars.Series.rolling_sum": [[1102, "polars-series-rolling-sum"]], "polars.Series.slice": [[1123, "polars-series-slice"]], "polars.Series.shrink_dtype": [[1116, "polars-series-shrink-dtype"]], "polars.Series.str.lengths": [[1144, "polars-series-str-lengths"]], "polars.Series.set": [[1110, "polars-series-set"]], "polars.Series.str.json_path_match": [[1141, "polars-series-str-json-path-match"]], "polars.Series.str.parse_int": [[1150, "polars-series-str-parse-int"]], "polars.Series.str.decode": [[1132, "polars-series-str-decode"]], "polars.Series.str.len_chars": [[1143, "polars-series-str-len-chars"]], "polars.Series.str.extract": [[1136, "polars-series-str-extract"]], "polars.Series.sqrt": [[1125, "polars-series-sqrt"]], "polars.Series.round": [[1104, "polars-series-round"]], "polars.Series.shuffle": [[1118, "polars-series-shuffle"]], "polars.Series.str.ljust": [[1145, "polars-series-str-ljust"]], "polars.Series.set_at_idx": [[1111, "polars-series-set-at-idx"]], "polars.Series.rolling_skew": [[1100, "polars-series-rolling-skew"]], "polars.Series.str.concat": [[1128, "polars-series-str-concat"]], "polars.Series.str.count_matches": [[1131, "polars-series-str-count-matches"]], "polars.Series.str.reverse": [[1153, "polars-series-str-reverse"]], "polars.Series.sinh": [[1121, "polars-series-sinh"]], "polars.Series.sample": [[1106, "polars-series-sample"]], "polars.Series.set_sorted": [[1112, "polars-series-set-sorted"]], "polars.Series.scatter": [[1107, "polars-series-scatter"]], "polars.Series.str.count_match": [[1130, "polars-series-str-count-match"]], "polars.Series.std": [[1126, "polars-series-std"]], "polars.Series.search_sorted": [[1108, "polars-series-search-sorted"]], "polars.Series.str.replace": [[1151, "polars-series-str-replace"]], "polars.Series.str": [[1127, "polars-series-str"]], "polars.Series.skew": [[1122, "polars-series-skew"]], "polars.Series.shift": [[1114, "polars-series-shift"]], "polars.Series.shift_and_fill": [[1115, "polars-series-shift-and-fill"]], "polars.Series.str.encode": [[1133, "polars-series-str-encode"]], "polars.Series.rolling_std": [[1101, "polars-series-rolling-std"]], "polars.Series.str.replace_all": [[1152, "polars-series-str-replace-all"]], "polars.Series.str.n_chars": [[1147, "polars-series-str-n-chars"]], "polars.Series.str.len_bytes": [[1142, "polars-series-str-len-bytes"]], "polars.Series.str.extract_groups": [[1138, "polars-series-str-extract-groups"]], "polars.Series.str.lstrip": [[1146, "polars-series-str-lstrip"]], "polars.Series.shrink_to_fit": [[1117, "polars-series-shrink-to-fit"]], "polars.Series.str.pad_end": [[1148, "polars-series-str-pad-end"]], "polars.Series.str.explode": [[1135, "polars-series-str-explode"]], "polars.Series.str.contains": [[1129, "polars-series-str-contains"]], "polars.Series.sin": [[1120, "polars-series-sin"]], "polars.Series.str.rjust": [[1154, "polars-series-str-rjust"]], "polars.Series.str.extract_all": [[1137, "polars-series-str-extract-all"]], "polars.Series.series_equal": [[1109, "polars-series-series-equal"]], "polars.Series.shape": [[1113, "polars-series-shape"]], "polars.Series.sign": [[1119, "polars-series-sign"]], "polars.Series.sort": [[1124, "polars-series-sort"]], "polars.Series.str.ends_with": [[1134, "polars-series-str-ends-with"]], "polars.Series.str.pad_start": [[1149, "polars-series-str-pad-start"]], "polars.Series.str.json_extract": [[1140, "polars-series-str-json-extract"]], "polars.Series.round_sig_figs": [[1105, "polars-series-round-sig-figs"]], "polars.Series.str.json_decode": [[1139, "polars-series-str-json-decode"]], "polars.Series.rolling_var": [[1103, "polars-series-rolling-var"]], "polars.Series.pct_change": [[1078, "polars-series-pct-change"]], "polars.Series.list.to_struct": [[1057, "polars-series-list-to-struct"]], "polars.Series.list.sort": [[1052, "polars-series-list-sort"]], "polars.Series.peak_max": [[1079, "polars-series-peak-max"]], "polars.Series.qcut": [[1082, "polars-series-qcut"]], "polars.Series.rolling_max": [[1095, "polars-series-rolling-max"]], "polars.Series.list.sum": [[1053, "polars-series-list-sum"]], "polars.Series.rolling_mean": [[1096, "polars-series-rolling-mean"]], "polars.Series.list.slice": [[1051, "polars-series-list-slice"]], "polars.Series.peak_min": [[1080, "polars-series-peak-min"]], "polars.Series.rolling_median": [[1097, "polars-series-rolling-median"]], "polars.Series.quantile": [[1083, "polars-series-quantile"]], "polars.Series.list.unique": [[1058, "polars-series-list-unique"]], "polars.Series.list.take": [[1055, "polars-series-list-take"]], "polars.Series.map_dict": [[1063, "polars-series-map-dict"]], "polars.Series.null_count": [[1077, "polars-series-null-count"]], "polars.Series.reshape": [[1089, "polars-series-reshape"]], "polars.Series.median": [[1067, "polars-series-median"]], "polars.Series.mode": [[1069, "polars-series-mode"]], "polars.Series.log10": [[1060, "polars-series-log10"]], "polars.Series.list.set_difference": [[1046, "polars-series-list-set-difference"]], "polars.Series.log": [[1059, "polars-series-log"]], "polars.Series.min": [[1068, "polars-series-min"]], "polars.Series.list.set_union": [[1049, "polars-series-list-set-union"]], "polars.Series.nan_min": [[1074, "polars-series-nan-min"]], "polars.Series.rolling_min": [[1098, "polars-series-rolling-min"]], "polars.Series.list.set_intersection": [[1047, "polars-series-list-set-intersection"]], "polars.Series.n_chunks": [[1070, "polars-series-n-chunks"]], "polars.Series.rechunk": [[1085, "polars-series-rechunk"]], "polars.Series.list.tail": [[1054, "polars-series-list-tail"]], "polars.Series.name": [[1072, "polars-series-name"]], "polars.Series.new_from_index": [[1075, "polars-series-new-from-index"]], "polars.Series.list.set_symmetric_difference": [[1048, "polars-series-list-set-symmetric-difference"]], "polars.Series.rolling_map": [[1094, "polars-series-rolling-map"]], "polars.Series.log1p": [[1061, "polars-series-log1p"]], "polars.Series.n_unique": [[1071, "polars-series-n-unique"]], "polars.Series.max": [[1065, "polars-series-max"]], "polars.Series.not_": [[1076, "polars-series-not"]], "polars.Series.product": [[1081, "polars-series-product"]], "polars.Series.list.sample": [[1045, "polars-series-list-sample"]], "polars.Series.nan_max": [[1073, "polars-series-nan-max"]], "polars.Series.rolling_apply": [[1093, "polars-series-rolling-apply"]], "polars.Series.lower_bound": [[1062, "polars-series-lower-bound"]], "polars.Series.rolling_quantile": [[1099, "polars-series-rolling-quantile"]], "polars.Series.map_elements": [[1064, "polars-series-map-elements"]], "polars.Series.rank": [[1084, "polars-series-rank"]], "polars.Series.mean": [[1066, "polars-series-mean"]], "polars.Series.rename": [[1087, "polars-series-rename"]], "polars.Series.reinterpret": [[1086, "polars-series-reinterpret"]], "polars.Series.rle": [[1091, "polars-series-rle"]], "polars.Series.list.shift": [[1050, "polars-series-list-shift"]], "polars.Series.reverse": [[1090, "polars-series-reverse"]], "polars.Series.rle_id": [[1092, "polars-series-rle-id"]], "polars.Series.replace": [[1088, "polars-series-replace"]], "polars.Series.list.to_array": [[1056, "polars-series-list-to-array"]], "polars.Series.dt.minute": [[938, "polars-series-dt-minute"]], "polars.Series.dt.total_hours": [[957, "polars-series-dt-total-hours"]], "polars.Series.dt.month": [[940, "polars-series-dt-month"]], "polars.Series.fill_null": [[980, "polars-series-fill-null"]], "polars.Series.dtype": [[968, "polars-series-dtype"]], "polars.Series.dt.ordinal_day": [[946, "polars-series-dt-ordinal-day"]], "polars.Series.dt.weekday": [[965, "polars-series-dt-weekday"]], "polars.Series.hash": [[988, "polars-series-hash"]], "polars.Series.dt.quarter": [[947, "polars-series-dt-quarter"]], "polars.Series.dt.total_milliseconds": [[959, "polars-series-dt-total-milliseconds"]], "polars.Series.dt.nanoseconds": [[944, "polars-series-dt-nanoseconds"]], "polars.Series.dt.second": [[950, "polars-series-dt-second"]], "polars.Series.dt.seconds": [[951, "polars-series-dt-seconds"]], "polars.Series.dt.to_string": [[955, "polars-series-dt-to-string"]], "polars.Series.dt.total_microseconds": [[958, "polars-series-dt-total-microseconds"]], "polars.Series.dt.round": [[949, "polars-series-dt-round"]], "polars.Series.extend": [[977, "polars-series-extend"]], "polars.Series.ewm_std": [[973, "polars-series-ewm-std"]], "polars.Series.dt.total_seconds": [[962, "polars-series-dt-total-seconds"]], "polars.Series.exp": [[975, "polars-series-exp"]], "polars.Series.dt.milliseconds": [[936, "polars-series-dt-milliseconds"]], "polars.Series.dt.min": [[937, "polars-series-dt-min"]], "polars.Series.dt.week": [[964, "polars-series-dt-week"]], "polars.Series.dt.total_days": [[956, "polars-series-dt-total-days"]], "polars.Series.gather_every": [[985, "polars-series-gather-every"]], "polars.Series.dt.timestamp": [[954, "polars-series-dt-timestamp"]], "polars.Series.dt.millisecond": [[935, "polars-series-dt-millisecond"]], "polars.Series.dt.total_nanoseconds": [[961, "polars-series-dt-total-nanoseconds"]], "polars.Series.dt.year": [[967, "polars-series-dt-year"]], "polars.Series.dt.minutes": [[939, "polars-series-dt-minutes"]], "polars.Series.dt.total_minutes": [[960, "polars-series-dt-total-minutes"]], "polars.Series.dt.offset_by": [[945, "polars-series-dt-offset-by"]], "polars.Series.get_chunks": [[986, "polars-series-get-chunks"]], "polars.Series.gather": [[984, "polars-series-gather"]], "polars.Series.dt.month_end": [[941, "polars-series-dt-month-end"]], "polars.Series.dt.truncate": [[963, "polars-series-dt-truncate"]], "polars.Series.dt.time": [[953, "polars-series-dt-time"]], "polars.Series.filter": [[981, "polars-series-filter"]], "polars.Series.entropy": [[969, "polars-series-entropy"]], "polars.Series.flags": [[982, "polars-series-flags"]], "polars.Series.dt.strftime": [[952, "polars-series-dt-strftime"]], "polars.Series.fill_nan": [[979, "polars-series-fill-nan"]], "polars.Series.ewm_mean": [[972, "polars-series-ewm-mean"]], "polars.Series.floor": [[983, "polars-series-floor"]], "polars.Series.dt.nanosecond": [[943, "polars-series-dt-nanosecond"]], "polars.Series.dt.month_start": [[942, "polars-series-dt-month-start"]], "polars.Series.extend_constant": [[978, "polars-series-extend-constant"]], "polars.Series.explode": [[976, "polars-series-explode"]], "polars.Series.dt.replace_time_zone": [[948, "polars-series-dt-replace-time-zone"]], "polars.Series.head": [[989, "polars-series-head"]], "polars.Series.equals": [[970, "polars-series-equals"]], "polars.Series.ewm_var": [[974, "polars-series-ewm-var"]], "polars.Series.estimated_size": [[971, "polars-series-estimated-size"]], "polars.Series.dt.with_time_unit": [[966, "polars-series-dt-with-time-unit"]], "polars.Series.has_validity": [[987, "polars-series-has-validity"]], "polars.Series.cat.uses_lexical_ordering": [[888, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.cot": [[899, "polars-series-cot"]], "polars.Series.cbrt": [[889, "polars-series-cbrt"]], "polars.Series.cut": [[909, "polars-series-cut"]], "polars.Series.dt.median": [[932, "polars-series-dt-median"]], "polars.Series.dt.base_utc_offset": [[916, "polars-series-dt-base-utc-offset"]], "polars.Series.cumprod": [[906, "polars-series-cumprod"]], "polars.Series.dt.mean": [[931, "polars-series-dt-mean"]], "polars.Series.cat.to_local": [[887, "polars-series-cat-to-local"]], "polars.Series.cum_min": [[901, "polars-series-cum-min"]], "polars.Series.drop_nulls": [[914, "polars-series-drop-nulls"]], "polars.Series.dt.cast_time_unit": [[917, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.day": [[922, "polars-series-dt-day"]], "polars.Series.cat.get_categories": [[884, "polars-series-cat-get-categories"]], "polars.Series.cum_sum": [[903, "polars-series-cum-sum"]], "polars.Series.dt": [[915, "polars-series-dt"]], "polars.Series.dt.date": [[920, "polars-series-dt-date"]], "polars.Series.dt.microsecond": [[933, "polars-series-dt-microsecond"]], "polars.Series.cast": [[882, "polars-series-cast"]], "polars.Series.cumsum": [[907, "polars-series-cumsum"]], "polars.Series.drop_nans": [[913, "polars-series-drop-nans"]], "polars.Series.dt.is_leap_year": [[928, "polars-series-dt-is-leap-year"]], "polars.Series.dt.epoch": [[925, "polars-series-dt-epoch"]], "polars.Series.dt.dst_offset": [[924, "polars-series-dt-dst-offset"]], "polars.Series.dt.hours": [[927, "polars-series-dt-hours"]], "polars.Series.dt.iso_year": [[929, "polars-series-dt-iso-year"]], "polars.Series.cosh": [[898, "polars-series-cosh"]], "polars.Series.clip": [[893, "polars-series-clip"]], "polars.Series.bottom_k": [[881, "polars-series-bottom-k"]], "polars.Series.bin.starts_with": [[880, "polars-series-bin-starts-with"]], "polars.Series.cum_prod": [[902, "polars-series-cum-prod"]], "polars.Series.ceil": [[890, "polars-series-ceil"]], "polars.Series.cumulative_eval": [[908, "polars-series-cumulative-eval"]], "polars.Series.dt.hour": [[926, "polars-series-dt-hour"]], "polars.Series.describe": [[910, "polars-series-describe"]], "polars.Series.dt.convert_time_zone": [[919, "polars-series-dt-convert-time-zone"]], "polars.Series.cat": [[883, "polars-series-cat"]], "polars.Series.dt.max": [[930, "polars-series-dt-max"]], "polars.Series.cat.is_local": [[885, "polars-series-cat-is-local"]], "polars.Series.dot": [[912, "polars-series-dot"]], "polars.Series.cummin": [[905, "polars-series-cummin"]], "polars.Series.cat.set_ordering": [[886, "polars-series-cat-set-ordering"]], "polars.Series.chunk_lengths": [[891, "polars-series-chunk-lengths"]], "polars.Series.cum_max": [[900, "polars-series-cum-max"]], "polars.Series.clip_max": [[894, "polars-series-clip-max"]], "polars.Series.diff": [[911, "polars-series-diff"]], "polars.Series.dt.combine": [[918, "polars-series-dt-combine"]], "polars.Series.clone": [[896, "polars-series-clone"]], "polars.Series.dt.days": [[923, "polars-series-dt-days"]], "polars.Series.cos": [[897, "polars-series-cos"]], "polars.Series.dt.datetime": [[921, "polars-series-dt-datetime"]], "polars.Series.cummax": [[904, "polars-series-cummax"]], "polars.Series.clip_min": [[895, "polars-series-clip-min"]], "polars.Series.dt.microseconds": [[934, "polars-series-dt-microseconds"]], "polars.Series.clear": [[892, "polars-series-clear"]], "polars.LazyFrame.interpolate": [[785, "polars-lazyframe-interpolate"]], "polars.LazyFrame.show_graph": [[813, "polars-lazyframe-show-graph"]], "polars.LazyFrame.min": [[798, "polars-lazyframe-min"]], "polars.LazyFrame.fill_nan": [[772, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.std": [[816, "polars-lazyframe-std"]], "polars.LazyFrame.select": [[807, "polars-lazyframe-select"]], "polars.LazyFrame.update": [[823, "polars-lazyframe-update"]], "polars.LazyFrame.inspect": [[784, "polars-lazyframe-inspect"]], "polars.LazyFrame.unnest": [[822, "polars-lazyframe-unnest"]], "polars.LazyFrame.schema": [[806, "polars-lazyframe-schema"]], "polars.LazyFrame.tail": [[818, "polars-lazyframe-tail"]], "polars.LazyFrame.filter": [[774, "polars-lazyframe-filter"]], "polars.LazyFrame.set_sorted": [[810, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.merge_sorted": [[797, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.head": [[783, "polars-lazyframe-head"]], "polars.LazyFrame.fill_null": [[773, "polars-lazyframe-fill-null"]], "polars.LazyFrame.fetch": [[771, "polars-lazyframe-fetch"]], "polars.LazyFrame.shift_and_fill": [[812, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.take_every": [[819, "polars-lazyframe-take-every"]], "polars.LazyFrame.group_by": [[777, "polars-lazyframe-group-by"]], "polars.LazyFrame.limit": [[790, "polars-lazyframe-limit"]], "polars.LazyFrame.var": [[824, "polars-lazyframe-var"]], "polars.LazyFrame.melt": [[796, "polars-lazyframe-melt"]], "polars.LazyFrame.gather_every": [[776, "polars-lazyframe-gather-every"]], "polars.LazyFrame.last": [[788, "polars-lazyframe-last"]], "polars.LazyFrame.group_by_dynamic": [[778, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.slice": [[814, "polars-lazyframe-slice"]], "polars.LazyFrame.max": [[793, "polars-lazyframe-max"]], "polars.LazyFrame.quantile": [[802, "polars-lazyframe-quantile"]], "polars.LazyFrame.join": [[786, "polars-lazyframe-join"]], "polars.LazyFrame.shift": [[811, "polars-lazyframe-shift"]], "polars.LazyFrame.map": [[791, "polars-lazyframe-map"]], "polars.LazyFrame.explode": [[770, "polars-lazyframe-explode"]], "polars.LazyFrame.pipe": [[800, "polars-lazyframe-pipe"]], "polars.LazyFrame.serialize": [[809, "polars-lazyframe-serialize"]], "polars.LazyFrame.rename": [[803, "polars-lazyframe-rename"]], "polars.LazyFrame.group_by_rolling": [[779, "polars-lazyframe-group-by-rolling"]], "polars.LazyFrame.reverse": [[804, "polars-lazyframe-reverse"]], "polars.LazyFrame.first": [[775, "polars-lazyframe-first"]], "polars.LazyFrame.null_count": [[799, "polars-lazyframe-null-count"]], "polars.LazyFrame.map_batches": [[792, "polars-lazyframe-map-batches"]], "polars.LazyFrame.rolling": [[805, "polars-lazyframe-rolling"]], "polars.LazyFrame.join_asof": [[787, "polars-lazyframe-join-asof"]], "polars.LazyFrame.median": [[795, "polars-lazyframe-median"]], "polars.LazyFrame.profile": [[801, "polars-lazyframe-profile"]], "polars.LazyFrame.top_k": [[820, "polars-lazyframe-top-k"]], "polars.LazyFrame.sum": [[817, "polars-lazyframe-sum"]], "polars.LazyFrame.select_seq": [[808, "polars-lazyframe-select-seq"]], "polars.LazyFrame.sort": [[815, "polars-lazyframe-sort"]], "polars.LazyFrame.groupby_dynamic": [[781, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.mean": [[794, "polars-lazyframe-mean"]], "polars.LazyFrame.groupby_rolling": [[782, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.lazy": [[789, "polars-lazyframe-lazy"]], "polars.LazyFrame.unique": [[821, "polars-lazyframe-unique"]], "polars.LazyFrame.groupby": [[780, "polars-lazyframe-groupby"]], "polars.duration": [[690, "polars-duration"]], "polars.coalesce": [[670, "polars-coalesce"]], "polars.datetime": [[687, "polars-datetime"]], "polars.apply": [[663, "polars-apply"]], "polars.groups": [[697, "polars-groups"]], "polars.cumsum": [[682, "polars-cumsum"]], "polars.cumsum_horizontal": [[683, "polars-cumsum-horizontal"]], "polars.arange": [[665, "polars-arange"]], "polars.exclude": [[692, "polars-exclude"]], "polars.cumreduce": [[681, "polars-cumreduce"]], "polars.date_range": [[685, "polars-date-range"]], "polars.min_horizontal": [[712, "polars-min-horizontal"]], "polars.fold": [[694, "polars-fold"]], "polars.max_horizontal": [[708, "polars-max-horizontal"]], "polars.any_horizontal": [[662, "polars-any-horizontal"]], "polars.n_unique": [[713, "polars-n-unique"]], "polars.arg_sort_by": [[668, "polars-arg-sort-by"]], "polars.corr": [[673, "polars-corr"]], "polars.from_epoch": [[696, "polars-from-epoch"]], "polars.datetime_range": [[688, "polars-datetime-range"]], "polars.lit": [[703, "polars-lit"]], "polars.max": [[707, "polars-max"]], "polars.cum_sum": [[678, "polars-cum-sum"]], "polars.int_range": [[700, "polars-int-range"]], "polars.element": [[691, "polars-element"]], "polars.arctan2d": [[667, "polars-arctan2d"]], "polars.mean": [[709, "polars-mean"]], "polars.any": [[661, "polars-any"]], "polars.date": [[684, "polars-date"]], "polars.concat_list": [[671, "polars-concat-list"]], "polars.format": [[695, "polars-format"]], "polars.map_groups": [[706, "polars-map-groups"]], "polars.implode": [[699, "polars-implode"]], "polars.last": [[702, "polars-last"]], "polars.min": [[711, "polars-min"]], "polars.approx_n_unique": [[664, "polars-approx-n-unique"]], "polars.cumfold": [[680, "polars-cumfold"]], "polars.ones": [[714, "polars-ones"]], "polars.arg_where": [[669, "polars-arg-where"]], "polars.all_horizontal": [[660, "polars-all-horizontal"]], "polars.cum_fold": [[676, "polars-cum-fold"]], "polars.first": [[693, "polars-first"]], "polars.map": [[704, "polars-map"]], "polars.median": [[710, "polars-median"]], "polars.datetime_ranges": [[689, "polars-datetime-ranges"]], "polars.cum_sum_horizontal": [[679, "polars-cum-sum-horizontal"]], "polars.date_ranges": [[686, "polars-date-ranges"]], "polars.cov": [[675, "polars-cov"]], "polars.arctan2": [[666, "polars-arctan2"]], "polars.cum_reduce": [[677, "polars-cum-reduce"]], "polars.map_batches": [[705, "polars-map-batches"]], "polars.count": [[674, "polars-count"]], "polars.head": [[698, "polars-head"]], "polars.int_ranges": [[701, "polars-int-ranges"]], "polars.concat_str": [[672, "polars-concat-str"]], "List": [[1214, "list"], [742, "list"]], "String": [[1217, "string"], [748, "string"]], "Miscellaneous": [[1215, "miscellaneous"], [850, "miscellaneous"], [752, "miscellaneous"], [744, "miscellaneous"], [295, "miscellaneous"]], "SQL": [[1220, "sql"]], "Methods": [[1220, "methods"]], "Testing": [[1221, "testing"]], "Asserts": [[1221, "asserts"]], "Parametric testing": [[1221, "parametric-testing"]], "Polars primitives": [[1221, "polars-primitives"]], "Strategy helpers": [[1221, "strategy-helpers"]], "Profiles": [[1221, "profiles"]], "Computation": [[1210, "computation"], [739, "computation"], [290, "computation"]], "Struct": [[1218, "struct"], [749, "struct"]], "Utils": [[1222, "utils"]], "Export": [[1212, "export"], [292, "export"]], "Descriptive": [[1211, "descriptive"], [847, "descriptive"], [291, "descriptive"]], "Manipulation/selection": [[1216, "manipulation-selection"], [851, "manipulation-selection"], [745, "manipulation-selection"], [296, "manipulation-selection"]], "Temporal": [[1219, "temporal"], [750, "temporal"], [297, "temporal"]], "Series": [[1213, "series"]], "GroupBy": [[848, "groupby"], [293, "groupby"]], "polars.Series.alias": [[855, "polars-series-alias"]], "polars.Series.arccos": [[860, "polars-series-arccos"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[835, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[840, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[833, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[834, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.Series.bin.contains": [[876, "polars-series-bin-contains"]], "polars.Series.arr.to_list": [[874, "polars-series-arr-to-list"]], "polars.Series.arg_true": [[869, "polars-series-arg-true"]], "Read/write logical plan": [[850, "read-write-logical-plan"]], "polars.Series.arr.min": [[872, "polars-series-arr-min"]], "polars.Series.bin.decode": [[877, "polars-series-bin-decode"]], "polars.LazyFrame.with_row_count": [[829, "polars-lazyframe-with-row-count"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[836, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[837, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[841, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[831, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.Series.arctan": [[864, "polars-series-arctan"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[845, "polars-lazyframe-group-by-lazygroupby-tail"]], "Selectors": [[852, "selectors"]], "Importing": [[852, "importing"]], "Set operations": [[852, "set-operations"]], "Functions": [[852, "functions"], [752, "functions"], [740, "functions"]], "polars.Series.apply": [[859, "polars-series-apply"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[830, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[838, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.Series.bin.encode": [[878, "polars-series-bin-encode"]], "polars.Series.bin.ends_with": [[879, "polars-series-bin-ends-with"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[839, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.Series.arccosh": [[861, "polars-series-arccosh"]], "polars.Series.arg_sort": [[868, "polars-series-arg-sort"]], "polars.lazyframe.group_by.LazyGroupBy.apply": [[832, "polars-lazyframe-group-by-lazygroupby-apply"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[844, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.Series.arg_unique": [[870, "polars-series-arg-unique"]], "polars.Series.abs": [[854, "polars-series-abs"]], "polars.Series.arcsin": [[862, "polars-series-arcsin"]], "polars.Series.arr.sum": [[873, "polars-series-arr-sum"]], "polars.Series.append": [[858, "polars-series-append"]], "polars.Series.arr.max": [[871, "polars-series-arr-max"]], "polars.LazyFrame.with_columns": [[826, "polars-lazyframe-with-columns"]], "polars.Series.any": [[857, "polars-series-any"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[843, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.Series.arcsinh": [[863, "polars-series-arcsinh"]], "polars.Series.arr.unique": [[875, "polars-series-arr-unique"]], "polars.Series.arctanh": [[865, "polars-series-arctanh"]], "polars.Series.all": [[856, "polars-series-all"]], "LazyFrame": [[849, "lazyframe"]], "polars.Series.arg_max": [[866, "polars-series-arg-max"]], "polars.Series.arg_min": [[867, "polars-series-arg-min"]], "polars.LazyFrame.width": [[825, "polars-lazyframe-width"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[842, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.LazyFrame.with_context": [[828, "polars-lazyframe-with-context"]], "polars.LazyFrame.with_columns_seq": [[827, "polars-lazyframe-with-columns-seq"]], "polars.Expr.str.strip_prefix": [[626, "polars-expr-str-strip-prefix"]], "polars.Expr.str.pad_start": [[610, "polars-expr-str-pad-start"]], "polars.Expr.suffix": [[642, "polars-expr-suffix"]], "polars.Expr.str.lengths": [[605, "polars-expr-str-lengths"]], "polars.Expr.str.reverse": [[614, "polars-expr-str-reverse"]], "polars.Expr.str.split_exact": [[619, "polars-expr-str-split-exact"]], "polars.Expr.str.strip": [[622, "polars-expr-str-strip"]], "polars.Expr.str.strptime": [[628, "polars-expr-str-strptime"]], "polars.Expr.str.slice": [[617, "polars-expr-str-slice"]], "polars.Expr.str.strip_chars_end": [[624, "polars-expr-str-strip-chars-end"]], "polars.Expr.str.to_integer": [[632, "polars-expr-str-to-integer"]], "polars.Expr.str.to_lowercase": [[633, "polars-expr-str-to-lowercase"]], "polars.Expr.str.ljust": [[606, "polars-expr-str-ljust"]], "polars.Expr.str.to_uppercase": [[636, "polars-expr-str-to-uppercase"]], "polars.Expr.xor": [[658, "polars-expr-xor"]], "polars.Expr.str.n_chars": [[608, "polars-expr-str-n-chars"]], "polars.Expr.value_counts": [[655, "polars-expr-value-counts"]], "polars.Expr.tail": [[644, "polars-expr-tail"]], "polars.Expr.take": [[645, "polars-expr-take"]], "polars.Expr.str.strip_chars_start": [[625, "polars-expr-str-strip-chars-start"]], "polars.Expr.struct.rename_fields": [[640, "polars-expr-struct-rename-fields"]], "polars.all": [[659, "polars-all"]], "polars.Expr.str.zfill": [[637, "polars-expr-str-zfill"]], "polars.Expr.str.replace": [[612, "polars-expr-str-replace"]], "polars.Expr.str.parse_int": [[611, "polars-expr-str-parse-int"]], "polars.Expr.str.rstrip": [[616, "polars-expr-str-rstrip"]], "polars.Expr.struct.json_encode": [[639, "polars-expr-struct-json-encode"]], "polars.Expr.str.to_datetime": [[630, "polars-expr-str-to-datetime"]], "polars.Expr.unique_counts": [[653, "polars-expr-unique-counts"]], "polars.Expr.unique": [[652, "polars-expr-unique"]], "polars.Expr.str.to_titlecase": [[635, "polars-expr-str-to-titlecase"]], "polars.Expr.struct.field": [[638, "polars-expr-struct-field"]], "polars.Expr.sum": [[643, "polars-expr-sum"]], "polars.Expr.str.to_date": [[629, "polars-expr-str-to-date"]], "polars.Expr.upper_bound": [[654, "polars-expr-upper-bound"]], "polars.Expr.str.splitn": [[620, "polars-expr-str-splitn"]], "polars.Expr.var": [[656, "polars-expr-var"]], "polars.Expr.str.split": [[618, "polars-expr-str-split"]], "polars.Expr.str.replace_all": [[613, "polars-expr-str-replace-all"]], "polars.Expr.str.pad_end": [[609, "polars-expr-str-pad-end"]], "polars.Expr.take_every": [[646, "polars-expr-take-every"]], "polars.Expr.str.to_decimal": [[631, "polars-expr-str-to-decimal"]], "polars.Expr.tanh": [[648, "polars-expr-tanh"]], "polars.Expr.str.strip_suffix": [[627, "polars-expr-str-strip-suffix"]], "polars.Expr.top_k": [[650, "polars-expr-top-k"]], "polars.Expr.str.lstrip": [[607, "polars-expr-str-lstrip"]], "polars.Expr.str.strip_chars": [[623, "polars-expr-str-strip-chars"]], "polars.Expr.sub": [[641, "polars-expr-sub"]], "polars.Expr.str.rjust": [[615, "polars-expr-str-rjust"]], "polars.Expr.truediv": [[651, "polars-expr-truediv"]], "polars.Expr.to_physical": [[649, "polars-expr-to-physical"]], "polars.Expr.str.to_time": [[634, "polars-expr-str-to-time"]], "polars.Expr.where": [[657, "polars-expr-where"]], "polars.Expr.tan": [[647, "polars-expr-tan"]], "polars.Expr.str.starts_with": [[621, "polars-expr-str-starts-with"]], "polars.Expr.log1p": [[500, "polars-expr-log1p"]], "polars.Expr.median": [[510, "polars-expr-median"]], "polars.Expr.name.prefix": [[528, "polars-expr-name-prefix"]], "polars.Expr.meta.ne": [[514, "polars-expr-meta-ne"]], "polars.Expr.pipe": [[543, "polars-expr-pipe"]], "polars.Expr.meta.undo_aliases": [[519, "polars-expr-meta-undo-aliases"]], "polars.Expr.qcut": [[547, "polars-expr-qcut"]], "polars.Expr.quantile": [[548, "polars-expr-quantile"]], "polars.Expr.lower_bound": [[501, "polars-expr-lower-bound"]], "polars.Expr.mode": [[523, "polars-expr-mode"]], "polars.Expr.meta.has_multiple_outputs": [[512, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.list.unique": [[497, "polars-expr-list-unique"]], "polars.Expr.list.to_struct": [[496, "polars-expr-list-to-struct"]], "polars.Expr.meta.pop": [[516, "polars-expr-meta-pop"]], "polars.Expr.meta.root_names": [[517, "polars-expr-meta-root-names"]], "polars.Expr.map_batches": [[505, "polars-expr-map-batches"]], "polars.Expr.meta.tree_format": [[518, "polars-expr-meta-tree-format"]], "polars.Expr.ne": [[534, "polars-expr-ne"]], "polars.Expr.prefix": [[545, "polars-expr-prefix"]], "polars.Expr.map_elements": [[507, "polars-expr-map-elements"]], "polars.Expr.ne_missing": [[535, "polars-expr-ne-missing"]], "polars.Expr.pct_change": [[540, "polars-expr-pct-change"]], "polars.Expr.list.to_array": [[495, "polars-expr-list-to-array"]], "polars.Expr.map": [[503, "polars-expr-map"]], "polars.Expr.null_count": [[537, "polars-expr-null-count"]], "polars.Expr.log": [[498, "polars-expr-log"]], "polars.Expr.max": [[508, "polars-expr-max"]], "polars.Expr.radians": [[549, "polars-expr-radians"]], "polars.Expr.min": [[521, "polars-expr-min"]], "polars.Expr.lt": [[502, "polars-expr-lt"]], "polars.Expr.product": [[546, "polars-expr-product"]], "polars.Expr.mod": [[522, "polars-expr-mod"]], "polars.Expr.name.keep": [[526, "polars-expr-name-keep"]], "polars.Expr.or_": [[538, "polars-expr-or"]], "polars.Expr.over": [[539, "polars-expr-over"]], "polars.Expr.meta.eq": [[511, "polars-expr-meta-eq"]], "polars.Expr.not_": [[536, "polars-expr-not"]], "polars.Expr.mul": [[524, "polars-expr-mul"]], "polars.Expr.name.to_lowercase": [[530, "polars-expr-name-to-lowercase"]], "polars.Expr.nan_min": [[533, "polars-expr-nan-min"]], "polars.Expr.map_alias": [[504, "polars-expr-map-alias"]], "polars.Expr.pow": [[544, "polars-expr-pow"]], "polars.Expr.meta.write_json": [[520, "polars-expr-meta-write-json"]], "polars.Expr.peak_max": [[541, "polars-expr-peak-max"]], "polars.Expr.nan_max": [[532, "polars-expr-nan-max"]], "polars.Expr.meta.is_regex_projection": [[513, "polars-expr-meta-is-regex-projection"]], "polars.Expr.name.map": [[527, "polars-expr-name-map"]], "polars.Expr.map_dict": [[506, "polars-expr-map-dict"]], "polars.Expr.mean": [[509, "polars-expr-mean"]], "polars.Expr.name.suffix": [[529, "polars-expr-name-suffix"]], "polars.Expr.name.to_uppercase": [[531, "polars-expr-name-to-uppercase"]], "polars.Expr.peak_min": [[542, "polars-expr-peak-min"]], "polars.Expr.n_unique": [[525, "polars-expr-n-unique"]], "polars.Expr.meta.output_name": [[515, "polars-expr-meta-output-name"]], "polars.Expr.log10": [[499, "polars-expr-log10"]], "polars.Expr.str.decode": [[593, "polars-expr-str-decode"]], "polars.Expr.sample": [[573, "polars-expr-sample"]], "polars.Expr.skew": [[583, "polars-expr-skew"]], "polars.Expr.round": [[571, "polars-expr-round"]], "polars.Expr.sign": [[580, "polars-expr-sign"]], "polars.Expr.rank": [[550, "polars-expr-rank"]], "polars.Expr.shrink_dtype": [[578, "polars-expr-shrink-dtype"]], "polars.Expr.rle_id": [[558, "polars-expr-rle-id"]], "polars.Expr.str.extract": [[597, "polars-expr-str-extract"]], "polars.Expr.str.ends_with": [[595, "polars-expr-str-ends-with"]], "polars.Expr.round_sig_figs": [[572, "polars-expr-round-sig-figs"]], "polars.Expr.sinh": [[582, "polars-expr-sinh"]], "polars.Expr.sort": [[585, "polars-expr-sort"]], "polars.Expr.slice": [[584, "polars-expr-slice"]], "polars.Expr.str.extract_all": [[598, "polars-expr-str-extract-all"]], "polars.Expr.str.json_path_match": [[602, "polars-expr-str-json-path-match"]], "polars.Expr.rolling_median": [[564, "polars-expr-rolling-median"]], "polars.Expr.reinterpret": [[552, "polars-expr-reinterpret"]], "polars.Expr.rolling_apply": [[560, "polars-expr-rolling-apply"]], "polars.Expr.rolling_skew": [[567, "polars-expr-rolling-skew"]], "polars.Expr.rolling_min": [[565, "polars-expr-rolling-min"]], "polars.Expr.str.extract_groups": [[599, "polars-expr-str-extract-groups"]], "polars.Expr.rle": [[557, "polars-expr-rle"]], "polars.Expr.rolling_sum": [[569, "polars-expr-rolling-sum"]], "polars.Expr.search_sorted": [[574, "polars-expr-search-sorted"]], "polars.Expr.str.count_matches": [[592, "polars-expr-str-count-matches"]], "polars.Expr.str.concat": [[589, "polars-expr-str-concat"]], "polars.Expr.str.len_chars": [[604, "polars-expr-str-len-chars"]], "polars.Expr.replace": [[554, "polars-expr-replace"]], "polars.Expr.std": [[588, "polars-expr-std"]], "polars.Expr.rolling_quantile": [[566, "polars-expr-rolling-quantile"]], "polars.Expr.str.json_extract": [[601, "polars-expr-str-json-extract"]], "polars.Expr.str.count_match": [[591, "polars-expr-str-count-match"]], "polars.Expr.repeat_by": [[553, "polars-expr-repeat-by"]], "polars.Expr.str.len_bytes": [[603, "polars-expr-str-len-bytes"]], "polars.Expr.reshape": [[555, "polars-expr-reshape"]], "polars.Expr.str.contains": [[590, "polars-expr-str-contains"]], "polars.Expr.sort_by": [[586, "polars-expr-sort-by"]], "polars.Expr.rolling_var": [[570, "polars-expr-rolling-var"]], "polars.Expr.rolling_max": [[562, "polars-expr-rolling-max"]], "polars.Expr.str.encode": [[594, "polars-expr-str-encode"]], "polars.Expr.rolling_mean": [[563, "polars-expr-rolling-mean"]], "polars.Expr.reverse": [[556, "polars-expr-reverse"]], "polars.Expr.set_sorted": [[575, "polars-expr-set-sorted"]], "polars.Expr.shift_and_fill": [[577, "polars-expr-shift-and-fill"]], "polars.Expr.str.explode": [[596, "polars-expr-str-explode"]], "polars.Expr.sin": [[581, "polars-expr-sin"]], "polars.Expr.shuffle": [[579, "polars-expr-shuffle"]], "polars.Expr.sqrt": [[587, "polars-expr-sqrt"]], "polars.Expr.rolling_std": [[568, "polars-expr-rolling-std"]], "polars.Expr.rolling_map": [[561, "polars-expr-rolling-map"]], "polars.Expr.str.json_decode": [[600, "polars-expr-str-json-decode"]], "polars.Expr.rechunk": [[551, "polars-expr-rechunk"]], "polars.Expr.rolling": [[559, "polars-expr-rolling"]], "polars.Expr.shift": [[576, "polars-expr-shift"]], "polars.Expr.list.count_match": [[466, "polars-expr-list-count-match"]], "polars.Expr.is_finite": [[441, "polars-expr-is-finite"]], "polars.Expr.list.any": [[461, "polars-expr-list-any"]], "polars.Expr.list.join": [[476, "polars-expr-list-join"]], "polars.Expr.is_not_null": [[451, "polars-expr-is-not-null"]], "polars.Expr.list.sort": [[491, "polars-expr-list-sort"]], "polars.Expr.limit": [[459, "polars-expr-limit"]], "polars.Expr.keep_name": [[454, "polars-expr-keep-name"]], "polars.Expr.list.set_intersection": [[486, "polars-expr-list-set-intersection"]], "polars.Expr.is_in": [[444, "polars-expr-is-in"]], "polars.Expr.list.last": [[477, "polars-expr-list-last"]], "polars.Expr.is_duplicated": [[440, "polars-expr-is-duplicated"]], "polars.Expr.list.drop_nulls": [[469, "polars-expr-list-drop-nulls"]], "polars.Expr.list.head": [[475, "polars-expr-list-head"]], "polars.Expr.list.sum": [[492, "polars-expr-list-sum"]], "polars.Expr.is_unique": [[453, "polars-expr-is-unique"]], "polars.Expr.is_nan": [[448, "polars-expr-is-nan"]], "polars.Expr.list.all": [[460, "polars-expr-list-all"]], "polars.Expr.list.concat": [[464, "polars-expr-list-concat"]], "polars.Expr.is_not_nan": [[450, "polars-expr-is-not-nan"]], "polars.Expr.le": [[457, "polars-expr-le"]], "polars.Expr.list.mean": [[481, "polars-expr-list-mean"]], "polars.Expr.list.first": [[472, "polars-expr-list-first"]], "polars.Expr.list.tail": [[493, "polars-expr-list-tail"]], "polars.Expr.is_last": [[446, "polars-expr-is-last"]], "polars.Expr.is_not": [[449, "polars-expr-is-not"]], "polars.Expr.is_null": [[452, "polars-expr-is-null"]], "polars.Expr.list.diff": [[468, "polars-expr-list-diff"]], "polars.Expr.list.sample": [[484, "polars-expr-list-sample"]], "polars.Expr.list.count_matches": [[467, "polars-expr-list-count-matches"]], "polars.Expr.list.set_union": [[488, "polars-expr-list-set-union"]], "polars.Expr.list.arg_max": [[462, "polars-expr-list-arg-max"]], "polars.Expr.last": [[456, "polars-expr-last"]], "polars.Expr.kurtosis": [[455, "polars-expr-kurtosis"]], "polars.Expr.list.explode": [[471, "polars-expr-list-explode"]], "polars.Expr.list.set_symmetric_difference": [[487, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.list.arg_min": [[463, "polars-expr-list-arg-min"]], "polars.Expr.list.contains": [[465, "polars-expr-list-contains"]], "polars.Expr.list.gather": [[473, "polars-expr-list-gather"]], "polars.Expr.list.slice": [[490, "polars-expr-list-slice"]], "polars.Expr.is_first": [[442, "polars-expr-is-first"]], "polars.Expr.is_infinite": [[445, "polars-expr-is-infinite"]], "polars.Expr.list.lengths": [[479, "polars-expr-list-lengths"]], "polars.Expr.list.max": [[480, "polars-expr-list-max"]], "polars.Expr.list.len": [[478, "polars-expr-list-len"]], "polars.Expr.list.set_difference": [[485, "polars-expr-list-set-difference"]], "polars.Expr.list.eval": [[470, "polars-expr-list-eval"]], "polars.Expr.list.get": [[474, "polars-expr-list-get"]], "polars.Expr.list.shift": [[489, "polars-expr-list-shift"]], "polars.Expr.list.take": [[494, "polars-expr-list-take"]], "polars.Expr.is_last_distinct": [[447, "polars-expr-is-last-distinct"]], "polars.Expr.list.min": [[482, "polars-expr-list-min"]], "polars.Expr.is_first_distinct": [[443, "polars-expr-is-first-distinct"]], "polars.Expr.list.reverse": [[483, "polars-expr-list-reverse"]], "polars.Expr.len": [[458, "polars-expr-len"]], "polars.Expr.first": [[423, "polars-expr-first"]], "polars.Expr.dt.weekday": [[407, "polars-expr-dt-weekday"]], "polars.Expr.gt": [[433, "polars-expr-gt"]], "polars.Expr.dt.strftime": [[394, "polars-expr-dt-strftime"]], "polars.Expr.flatten": [[424, "polars-expr-flatten"]], "polars.Expr.dt.total_microseconds": [[400, "polars-expr-dt-total-microseconds"]], "polars.Expr.eq_missing": [[412, "polars-expr-eq-missing"]], "polars.Expr.gather_every": [[430, "polars-expr-gather-every"]], "polars.Expr.eq": [[411, "polars-expr-eq"]], "polars.Expr.inspect": [[437, "polars-expr-inspect"]], "polars.Expr.dt.to_string": [[397, "polars-expr-dt-to-string"]], "polars.Expr.interpolate": [[438, "polars-expr-interpolate"]], "polars.Expr.dt.replace_time_zone": [[390, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.total_seconds": [[404, "polars-expr-dt-total-seconds"]], "polars.Expr.exp": [[417, "polars-expr-exp"]], "polars.Expr.dt.week": [[406, "polars-expr-dt-week"]], "polars.Expr.dt.with_time_unit": [[408, "polars-expr-dt-with-time-unit"]], "polars.Expr.implode": [[436, "polars-expr-implode"]], "polars.Expr.dt.year": [[409, "polars-expr-dt-year"]], "polars.Expr.is_between": [[439, "polars-expr-is-between"]], "polars.Expr.hash": [[434, "polars-expr-hash"]], "polars.Expr.ewm_var": [[415, "polars-expr-ewm-var"]], "polars.Expr.forward_fill": [[427, "polars-expr-forward-fill"]], "polars.Expr.dt.ordinal_day": [[388, "polars-expr-dt-ordinal-day"]], "polars.Expr.from_json": [[428, "polars-expr-from-json"]], "polars.Expr.ge": [[431, "polars-expr-ge"]], "polars.Expr.entropy": [[410, "polars-expr-entropy"]], "polars.Expr.dt.nanosecond": [[385, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.seconds": [[393, "polars-expr-dt-seconds"]], "polars.Expr.dt.total_hours": [[399, "polars-expr-dt-total-hours"]], "polars.Expr.ewm_std": [[414, "polars-expr-ewm-std"]], "polars.Expr.fill_nan": [[420, "polars-expr-fill-nan"]], "polars.Expr.fill_null": [[421, "polars-expr-fill-null"]], "polars.Expr.floordiv": [[426, "polars-expr-floordiv"]], "polars.Expr.dt.total_days": [[398, "polars-expr-dt-total-days"]], "polars.Expr.exclude": [[416, "polars-expr-exclude"]], "polars.Expr.dt.total_nanoseconds": [[403, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.dt.total_minutes": [[402, "polars-expr-dt-total-minutes"]], "polars.Expr.dt.round": [[391, "polars-expr-dt-round"]], "polars.Expr.gather": [[429, "polars-expr-gather"]], "polars.Expr.dt.quarter": [[389, "polars-expr-dt-quarter"]], "polars.Expr.get": [[432, "polars-expr-get"]], "polars.Expr.dt.nanoseconds": [[386, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.timestamp": [[396, "polars-expr-dt-timestamp"]], "polars.Expr.dt.truncate": [[405, "polars-expr-dt-truncate"]], "polars.Expr.head": [[435, "polars-expr-head"]], "polars.Expr.dt.time": [[395, "polars-expr-dt-time"]], "polars.Expr.extend_constant": [[419, "polars-expr-extend-constant"]], "polars.Expr.floor": [[425, "polars-expr-floor"]], "polars.Expr.dt.second": [[392, "polars-expr-dt-second"]], "polars.Expr.dt.offset_by": [[387, "polars-expr-dt-offset-by"]], "polars.Expr.filter": [[422, "polars-expr-filter"]], "polars.Expr.explode": [[418, "polars-expr-explode"]], "polars.Expr.ewm_mean": [[413, "polars-expr-ewm-mean"]], "polars.Expr.dt.total_milliseconds": [[401, "polars-expr-dt-total-milliseconds"]], "polars.Expr.cast": [[333, "polars-expr-cast"]], "polars.Expr.cum_sum": [[349, "polars-expr-cum-sum"]], "polars.Expr.dt.convert_time_zone": [[365, "polars-expr-dt-convert-time-zone"]], "polars.Expr.cum_count": [[345, "polars-expr-cum-count"]], "polars.Expr.diff": [[358, "polars-expr-diff"]], "polars.Expr.cosh": [[342, "polars-expr-cosh"]], "polars.Expr.cat.get_categories": [[334, "polars-expr-cat-get-categories"]], "polars.Expr.dt.minute": [[380, "polars-expr-dt-minute"]], "polars.Expr.dt.minutes": [[381, "polars-expr-dt-minutes"]], "polars.Expr.dt.base_utc_offset": [[362, "polars-expr-dt-base-utc-offset"]], "polars.Expr.cbrt": [[336, "polars-expr-cbrt"]], "polars.Expr.clip": [[338, "polars-expr-clip"]], "polars.Expr.dt.milliseconds": [[379, "polars-expr-dt-milliseconds"]], "polars.Expr.clip_max": [[339, "polars-expr-clip-max"]], "polars.Expr.degrees": [[357, "polars-expr-degrees"]], "polars.Expr.dt.day": [[368, "polars-expr-dt-day"]], "polars.Expr.dt.microseconds": [[377, "polars-expr-dt-microseconds"]], "polars.Expr.cat.set_ordering": [[335, "polars-expr-cat-set-ordering"]], "polars.Expr.dt.microsecond": [[376, "polars-expr-dt-microsecond"]], "polars.Expr.dt.month": [[382, "polars-expr-dt-month"]], "polars.Expr.dt.dst_offset": [[370, "polars-expr-dt-dst-offset"]], "polars.Expr.dt.month_start": [[384, "polars-expr-dt-month-start"]], "polars.Expr.dt.millisecond": [[378, "polars-expr-dt-millisecond"]], "polars.Expr.cummin": [[352, "polars-expr-cummin"]], "polars.Expr.cum_prod": [[348, "polars-expr-cum-prod"]], "polars.Expr.bin.ends_with": [[330, "polars-expr-bin-ends-with"]], "polars.Expr.cumprod": [[353, "polars-expr-cumprod"]], "polars.Expr.dt.datetime": [[367, "polars-expr-dt-datetime"]], "polars.Expr.cumulative_eval": [[355, "polars-expr-cumulative-eval"]], "polars.Expr.dt.iso_year": [[375, "polars-expr-dt-iso-year"]], "polars.Expr.dt.days": [[369, "polars-expr-dt-days"]], "polars.Expr.dt.date": [[366, "polars-expr-dt-date"]], "polars.Expr.cum_max": [[346, "polars-expr-cum-max"]], "polars.Expr.dt.hour": [[372, "polars-expr-dt-hour"]], "polars.Expr.cut": [[356, "polars-expr-cut"]], "polars.Expr.drop_nulls": [[361, "polars-expr-drop-nulls"]], "polars.Expr.cummax": [[351, "polars-expr-cummax"]], "polars.Expr.cos": [[341, "polars-expr-cos"]], "polars.Expr.cot": [[343, "polars-expr-cot"]], "polars.Expr.clip_min": [[340, "polars-expr-clip-min"]], "polars.Expr.drop_nans": [[360, "polars-expr-drop-nans"]], "polars.Expr.dt.cast_time_unit": [[363, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.epoch": [[371, "polars-expr-dt-epoch"]], "polars.Expr.ceil": [[337, "polars-expr-ceil"]], "polars.Expr.cum_min": [[347, "polars-expr-cum-min"]], "polars.Expr.dt.is_leap_year": [[374, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.month_end": [[383, "polars-expr-dt-month-end"]], "polars.Expr.cumsum": [[354, "polars-expr-cumsum"]], "polars.Expr.dot": [[359, "polars-expr-dot"]], "polars.Expr.count": [[344, "polars-expr-count"]], "polars.Expr.dt.hours": [[373, "polars-expr-dt-hours"]], "polars.Expr.bin.starts_with": [[331, "polars-expr-bin-starts-with"]], "polars.Expr.bottom_k": [[332, "polars-expr-bottom-k"]], "polars.Expr.cumcount": [[350, "polars-expr-cumcount"]], "polars.Expr.dt.combine": [[364, "polars-expr-dt-combine"]], "polars.DataFrame.rename": [[225, "polars-dataframe-rename"]], "polars.DataFrame.to_arrow": [[250, "polars-dataframe-to-arrow"]], "polars.DataFrame.upsample": [[265, "polars-dataframe-upsample"]], "polars.DataFrame.to_init_repr": [[254, "polars-dataframe-to-init-repr"]], "polars.DataFrame.reverse": [[229, "polars-dataframe-reverse"]], "polars.DataFrame.shift": [[240, "polars-dataframe-shift"]], "polars.DataFrame.shape": [[239, "polars-dataframe-shape"]], "polars.DataFrame.std": [[245, "polars-dataframe-std"]], "polars.DataFrame.rolling": [[230, "polars-dataframe-rolling"]], "polars.DataFrame.unnest": [[262, "polars-dataframe-unnest"]], "polars.DataFrame.transpose": [[260, "polars-dataframe-transpose"]], "polars.DataFrame.pipe": [[220, "polars-dataframe-pipe"]], "polars.DataFrame.take_every": [[249, "polars-dataframe-take-every"]], "polars.DataFrame.width": [[268, "polars-dataframe-width"]], "polars.DataFrame.unstack": [[263, "polars-dataframe-unstack"]], "polars.DataFrame.pivot": [[221, "polars-dataframe-pivot"]], "polars.DataFrame.tail": [[248, "polars-dataframe-tail"]], "polars.DataFrame.shift_and_fill": [[241, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.update": [[264, "polars-dataframe-update"]], "polars.DataFrame.sample": [[234, "polars-dataframe-sample"]], "polars.DataFrame.to_struct": [[258, "polars-dataframe-to-struct"]], "polars.DataFrame.with_row_count": [[271, "polars-dataframe-with-row-count"]], "polars.DataFrame.to_numpy": [[255, "polars-dataframe-to-numpy"]], "polars.DataFrame.sum_horizontal": [[247, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.rechunk": [[224, "polars-dataframe-rechunk"]], "polars.DataFrame.rows_by_key": [[233, "polars-dataframe-rows-by-key"]], "polars.DataFrame.select_seq": [[237, "polars-dataframe-select-seq"]], "polars.DataFrame.replace_at_idx": [[227, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.var": [[266, "polars-dataframe-var"]], "polars.DataFrame.vstack": [[267, "polars-dataframe-vstack"]], "polars.DataFrame.to_dummies": [[253, "polars-dataframe-to-dummies"]], "polars.DataFrame.quantile": [[223, "polars-dataframe-quantile"]], "polars.DataFrame.product": [[222, "polars-dataframe-product"]], "polars.DataFrame.with_columns_seq": [[270, "polars-dataframe-with-columns-seq"]], "polars.DataFrame.rows": [[232, "polars-dataframe-rows"]], "polars.dataframe.group_by.GroupBy.agg": [[273, "polars-dataframe-group-by-groupby-agg"]], "polars.DataFrame.top_k": [[259, "polars-dataframe-top-k"]], "polars.DataFrame.with_columns": [[269, "polars-dataframe-with-columns"]], "polars.DataFrame.to_series": [[257, "polars-dataframe-to-series"]], "polars.DataFrame.set_sorted": [[238, "polars-dataframe-set-sorted"]], "polars.DataFrame.to_dicts": [[252, "polars-dataframe-to-dicts"]], "polars.DataFrame.to_pandas": [[256, "polars-dataframe-to-pandas"]], "polars.dataframe.group_by.GroupBy.__iter__": [[272, "polars-dataframe-group-by-groupby-iter"]], "polars.dataframe.group_by.GroupBy.all": [[274, "polars-dataframe-group-by-groupby-all"]], "polars.DataFrame.select": [[236, "polars-dataframe-select"]], "polars.DataFrame.schema": [[235, "polars-dataframe-schema"]], "polars.DataFrame.shrink_to_fit": [[242, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.to_dict": [[251, "polars-dataframe-to-dict"]], "polars.DataFrame.sort": [[244, "polars-dataframe-sort"]], "polars.DataFrame.slice": [[243, "polars-dataframe-slice"]], "polars.DataFrame.unique": [[261, "polars-dataframe-unique"]], "polars.DataFrame.sum": [[246, "polars-dataframe-sum"]], "polars.DataFrame.replace_column": [[228, "polars-dataframe-replace-column"]], "polars.DataFrame.replace": [[226, "polars-dataframe-replace"]], "polars.DataFrame.row": [[231, "polars-dataframe-row"]], "polars.LazyFrame.approx_n_unique": [[756, "polars-lazyframe-approx-n-unique"]], "polars.zeros": [[732, "polars-zeros"]], "API reference": [[753, "api-reference"]], "polars.time_ranges": [[729, "polars-time-ranges"]], "Expressions": [[741, "expressions"]], "polars.LazyFrame.explain": [[769, "polars-lazyframe-explain"]], "polars.when": [[731, "polars-when"]], "polars.std": [[722, "polars-std"]], "polars.reduce": [[716, "polars-reduce"]], "Input/output": [[754, "input-output"]], "CSV": [[754, "csv"]], "Feather/ IPC": [[754, "feather-ipc"]], "Parquet": [[754, "parquet"]], "Database": [[754, "database"]], "JSON": [[754, "json"]], "AVRO": [[754, "avro"]], "Spreadsheet": [[754, "spreadsheet"]], "Apache Iceberg": [[754, "apache-iceberg"]], "Delta Lake": [[754, "delta-lake"]], "Datasets": [[754, "datasets"]], "BatchedCsvReader": [[754, "batchedcsvreader"]], "polars.var": [[730, "polars-var"]], "polars.LazyFrame.cast": [[759, "polars-lazyframe-cast"]], "polars.repeat": [[717, "polars-repeat"]], "Conversion": [[752, "conversion"]], "Parallelization": [[752, "parallelization"]], "Random": [[752, "random"]], "StringCache": [[752, "stringcache"]], "polars.LazyFrame.drop_nulls": [[767, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.columns": [[764, "polars-lazyframe-columns"]], "polars.LazyFrame.bottom_k": [[757, "polars-lazyframe-bottom-k"]], "Columns / names": [[738, "columns-names"]], "Name": [[746, "name"]], "polars.LazyFrame.deserialize": [[765, "polars-lazyframe-deserialize"]], "polars.tail": [[726, "polars-tail"]], "Operators": [[747, "operators"]], "Conjunction": [[747, "conjunction"]], "Comparison": [[747, "comparison"]], "Numeric": [[747, "numeric"], [297, "numeric"]], "polars.LazyFrame.drop": [[766, "polars-lazyframe-drop"]], "Window": [[751, "window"]], "polars.time": [[727, "polars-time"]], "polars.rolling_corr": [[718, "polars-rolling-corr"]], "polars.LazyFrame.clear": [[760, "polars-lazyframe-clear"]], "polars.rolling_cov": [[719, "polars-rolling-cov"]], "polars.LazyFrame.collect_async": [[763, "polars-lazyframe-collect-async"]], "polars.select": [[720, "polars-select"]], "polars.LazyFrame.cache": [[758, "polars-lazyframe-cache"]], "polars.sum_horizontal": [[725, "polars-sum-horizontal"]], "polars.LazyFrame.clone": [[761, "polars-lazyframe-clone"]], "polars.struct": [[723, "polars-struct"]], "polars.sum": [[724, "polars-sum"]], "polars.col": [[737, "polars-col"]], "Meta": [[743, "meta"]], "polars.time_range": [[728, "polars-time-range"]], "polars.sql_expr": [[721, "polars-sql-expr"]], "polars.quantile": [[715, "polars-quantile"]], "polars.LazyFrame.dtypes": [[768, "polars-lazyframe-dtypes"]], "polars.LazyFrame.collect": [[762, "polars-lazyframe-collect"]], "polars.Expr.agg_groups": [[302, "polars-expr-agg-groups"]], "polars.Expr.arr.unique": [[325, "polars-expr-arr-unique"]], "polars.Expr.arg_true": [[319, "polars-expr-arg-true"]], "polars.dataframe.group_by.GroupBy.median": [[283, "polars-dataframe-group-by-groupby-median"]], "polars.Expr.apply": [[308, "polars-expr-apply"]], "polars.Expr.arr.min": [[322, "polars-expr-arr-min"]], "polars.Expr.arr.sum": [[323, "polars-expr-arr-sum"]], "polars.Expr.bin.encode": [[329, "polars-expr-bin-encode"]], "polars.Expr.arccos": [[310, "polars-expr-arccos"]], "polars.Expr.and_": [[305, "polars-expr-and"]], "polars.dataframe.group_by.GroupBy.min": [[284, "polars-dataframe-group-by-groupby-min"]], "polars.Expr.add": [[301, "polars-expr-add"]], "polars.Expr.any": [[306, "polars-expr-any"]], "polars.dataframe.group_by.GroupBy.quantile": [[286, "polars-dataframe-group-by-groupby-quantile"]], "polars.Expr.arg_unique": [[320, "polars-expr-arg-unique"]], "polars.dataframe.group_by.GroupBy.last": [[279, "polars-dataframe-group-by-groupby-last"]], "polars.Expr.arccosh": [[311, "polars-expr-arccosh"]], "polars.dataframe.group_by.GroupBy.first": [[277, "polars-dataframe-group-by-groupby-first"]], "polars.dataframe.group_by.GroupBy.apply": [[275, "polars-dataframe-group-by-groupby-apply"]], "polars.dataframe.group_by.GroupBy.mean": [[282, "polars-dataframe-group-by-groupby-mean"]], "polars.Expr.append": [[307, "polars-expr-append"]], "polars.Expr.arr.max": [[321, "polars-expr-arr-max"]], "polars.Expr.bin.decode": [[328, "polars-expr-bin-decode"]], "polars.Expr.approx_n_unique": [[309, "polars-expr-approx-n-unique"]], "polars.Expr.arctan": [[314, "polars-expr-arctan"]], "polars.dataframe.group_by.GroupBy.sum": [[287, "polars-dataframe-group-by-groupby-sum"]], "Data types": [[297, "data-types"]], "Nested": [[297, "nested"]], "Other": [[297, "other"]], "polars.dataframe.group_by.GroupBy.max": [[281, "polars-dataframe-group-by-groupby-max"]], "polars.Expr.arcsinh": [[313, "polars-expr-arcsinh"]], "polars.dataframe.group_by.GroupBy.head": [[278, "polars-dataframe-group-by-groupby-head"]], "polars.Expr.arg_min": [[317, "polars-expr-arg-min"]], "polars.Expr.arr.to_list": [[324, "polars-expr-arr-to-list"]], "polars.Expr.arg_sort": [[318, "polars-expr-arg-sort"]], "DataFrame": [[294, "dataframe"]], "polars.Expr.bin.contains": [[327, "polars-expr-bin-contains"]], "polars.Expr.all": [[304, "polars-expr-all"]], "polars.Expr.backward_fill": [[326, "polars-expr-backward-fill"]], "polars.Expr.alias": [[303, "polars-expr-alias"]], "polars.Expr.abs": [[300, "polars-expr-abs"]], "polars.dataframe.group_by.GroupBy.count": [[276, "polars-dataframe-group-by-groupby-count"]], "polars.Expr.arg_max": [[316, "polars-expr-arg-max"]], "polars.Expr.arcsin": [[312, "polars-expr-arcsin"]], "Exceptions": [[298, "exceptions"]], "polars.dataframe.group_by.GroupBy.n_unique": [[285, "polars-dataframe-group-by-groupby-n-unique"]], "polars.dataframe.group_by.GroupBy.tail": [[288, "polars-dataframe-group-by-groupby-tail"]], "polars.Expr.arctanh": [[315, "polars-expr-arctanh"]], "polars.dataframe.group_by.GroupBy.map_groups": [[280, "polars-dataframe-group-by-groupby-map-groups"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "load_from_file() (polars.config class method)": [[8, "polars.Config.load_from_file"]], "restore_defaults() (polars.config class method)": [[9, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[10, "polars.Config.save"]], "save_to_file() (polars.config class method)": [[11, "polars.Config.save_to_file"]], "set_ascii_tables() (polars.config class method)": [[12, "polars.Config.set_ascii_tables"]], "set_auto_structify() (polars.config class method)": [[13, "polars.Config.set_auto_structify"]], "set_decimal_separator() (polars.config class method)": [[14, "polars.Config.set_decimal_separator"]], "set_float_precision() (polars.config class method)": [[15, "polars.Config.set_float_precision"]], "set_fmt_float() (polars.config class method)": [[16, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[17, "polars.Config.set_fmt_str_lengths"]], "set_fmt_table_cell_list_len() (polars.config class method)": [[18, "polars.Config.set_fmt_table_cell_list_len"]], "set_streaming_chunk_size() (polars.config class method)": [[19, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[20, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[21, "polars.Config.set_tbl_cell_numeric_alignment"]], "set_tbl_cols() (polars.config class method)": [[22, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[23, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[24, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[25, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[26, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[27, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[28, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[29, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[30, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[31, "polars.Config.set_tbl_width_chars"]], "set_thousands_separator() (polars.config class method)": [[32, "polars.Config.set_thousands_separator"]], "set_trim_decimal_zeros() (polars.config class method)": [[33, "polars.Config.set_trim_decimal_zeros"]], "set_verbose() (polars.config class method)": [[34, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[35, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[36, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[37, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[38, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[39, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[40, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[41, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[42, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[43, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[44, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[45, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[46, "polars.DataType"]], "__init__() (polars.datatype method)": [[46, "polars.DataType.__init__"]], "date (class in polars)": [[47, "polars.Date"]], "__init__() (polars.date method)": [[47, "polars.Date.__init__"]], "datetime (class in polars)": [[48, "polars.Datetime"]], "__init__() (polars.datetime method)": [[48, "polars.Datetime.__init__"]], "decimal (class in polars)": [[49, "polars.Decimal"]], "__init__() (polars.decimal method)": [[49, "polars.Decimal.__init__"]], "duration (class in polars)": [[50, "polars.Duration"]], "__init__() (polars.duration method)": [[50, "polars.Duration.__init__"]], "float32 (class in polars)": [[51, "polars.Float32"]], "__init__() (polars.float32 method)": [[51, "polars.Float32.__init__"]], "float64 (class in polars)": [[52, "polars.Float64"]], "__init__() (polars.float64 method)": [[52, "polars.Float64.__init__"]], "int16 (class in polars)": [[53, "polars.Int16"]], "__init__() (polars.int16 method)": [[53, "polars.Int16.__init__"]], "int32 (class in polars)": [[54, "polars.Int32"]], "__init__() (polars.int32 method)": [[54, "polars.Int32.__init__"]], "int64 (class in polars)": [[55, "polars.Int64"]], "__init__() (polars.int64 method)": [[55, "polars.Int64.__init__"]], "int8 (class in polars)": [[56, "polars.Int8"]], "__init__() (polars.int8 method)": [[56, "polars.Int8.__init__"]], "sink_csv() (polars.lazyframe method)": [[57, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[58, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[59, "polars.LazyFrame.sink_parquet"]], "list (class in polars)": [[60, "polars.List"]], "__init__() (polars.list method)": [[60, "polars.List.__init__"]], "null (class in polars)": [[61, "polars.Null"]], "__init__() (polars.null method)": [[61, "polars.Null.__init__"]], "object (class in polars)": [[62, "polars.Object"]], "__init__() (polars.object method)": [[62, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[63, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[64, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[65, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[66, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[67, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[68, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[69, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[69, "polars.StringCache.__init__"]], "struct (class in polars)": [[70, "polars.Struct"]], "__init__() (polars.struct method)": [[70, "polars.Struct.__init__"]], "time (class in polars)": [[71, "polars.Time"]], "__init__() (polars.time method)": [[71, "polars.Time.__init__"]], "uint16 (class in polars)": [[72, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[72, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[73, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[73, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[74, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[74, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[75, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[75, "polars.UInt8.__init__"]], "unknown (class in polars)": [[76, "polars.Unknown"]], "__init__() (polars.unknown method)": [[76, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[77, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[77, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[78, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[79, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[80, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[81, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[82, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[83, "polars.build_info"]], "collect_all() (in module polars)": [[84, "polars.collect_all"]], "collect_all_async() (in module polars)": [[85, "polars.collect_all_async"]], "concat() (in module polars)": [[86, "polars.concat"]], "disable_string_cache() (in module polars)": [[87, "polars.disable_string_cache"]], "enable_string_cache() (in module polars)": [[88, "polars.enable_string_cache"]], "arrowerror": [[89, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[90, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[91, "polars.exceptions.ComputeError"]], "duplicateerror": [[92, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[93, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[94, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[95, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[96, "polars.exceptions.PolarsPanicError"]], "rowserror": [[97, "polars.exceptions.RowsError"]], "schemaerror": [[98, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[99, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[100, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[101, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[102, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[103, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[104, "polars.from_dataframe"]], "from_dict() (in module polars)": [[105, "polars.from_dict"]], "from_dicts() (in module polars)": [[106, "polars.from_dicts"]], "from_numpy() (in module polars)": [[107, "polars.from_numpy"]], "from_pandas() (in module polars)": [[108, "polars.from_pandas"]], "from_records() (in module polars)": [[109, "polars.from_records"]], "from_repr() (in module polars)": [[110, "polars.from_repr"]], "get_index_type() (in module polars)": [[111, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[112, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[113, "polars.read_avro"]], "read_csv() (in module polars)": [[114, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[115, "polars.read_csv_batched"]], "read_database() (in module polars)": [[116, "polars.read_database"]], "read_database_uri() (in module polars)": [[117, "polars.read_database_uri"]], "read_delta() (in module polars)": [[118, "polars.read_delta"]], "read_excel() (in module polars)": [[119, "polars.read_excel"]], "read_ipc() (in module polars)": [[120, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[121, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[122, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[123, "polars.read_json"]], "read_ndjson() (in module polars)": [[124, "polars.read_ndjson"]], "read_ods() (in module polars)": [[125, "polars.read_ods"]], "read_parquet() (in module polars)": [[126, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[127, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[128, "polars.scan_csv"]], "scan_delta() (in module polars)": [[129, "polars.scan_delta"]], "scan_iceberg() (in module polars)": [[130, "polars.scan_iceberg"]], "scan_ipc() (in module polars)": [[131, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[132, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[133, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[134, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[135, "polars.set_random_seed"]], "show_versions() (in module polars)": [[136, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[137, "polars.testing.assert_frame_equal"]], "assert_frame_not_equal() (in module polars.testing)": [[138, "polars.testing.assert_frame_not_equal"]], "assert_series_equal() (in module polars.testing)": [[139, "polars.testing.assert_series_equal"]], "assert_series_not_equal() (in module polars.testing)": [[140, "polars.testing.assert_series_not_equal"]], "__init__() (polars.testing.parametric.column method)": [[141, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[141, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[142, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[143, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[144, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[145, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[146, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[147, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[148, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[149, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[152, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[153, "polars.DataFrame.apply"]], "approx_n_unique() (polars.dataframe method)": [[154, "polars.DataFrame.approx_n_unique"]], "bottom_k() (polars.dataframe method)": [[155, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[156, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[157, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[158, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[159, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[160, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[161, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[162, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[163, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[164, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[165, "polars.DataFrame.dtypes"]], "equals() (polars.dataframe method)": [[166, "polars.DataFrame.equals"]], "estimated_size() (polars.dataframe method)": [[167, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[168, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[169, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[170, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[171, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[172, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[173, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[174, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[175, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[176, "polars.DataFrame.frame_equal"]], "gather_every() (polars.dataframe method)": [[177, "polars.DataFrame.gather_every"]], "get_column() (polars.dataframe method)": [[178, "polars.DataFrame.get_column"]], "get_column_index() (polars.dataframe method)": [[179, "polars.DataFrame.get_column_index"]], "get_columns() (polars.dataframe method)": [[180, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[181, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[182, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[183, "polars.DataFrame.group_by_dynamic"]], "group_by_rolling() (polars.dataframe method)": [[184, "polars.DataFrame.group_by_rolling"]], "groupby() (polars.dataframe method)": [[185, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[186, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[187, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[188, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[189, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[190, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[191, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[192, "polars.DataFrame.insert_at_idx"]], "insert_column() (polars.dataframe method)": [[193, "polars.DataFrame.insert_column"]], "interpolate() (polars.dataframe method)": [[194, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[195, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[196, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[197, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[198, "polars.DataFrame.item"]], "iter_columns() (polars.dataframe method)": [[199, "polars.DataFrame.iter_columns"]], "iter_rows() (polars.dataframe method)": [[200, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[201, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[202, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[203, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[204, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[205, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[206, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[207, "polars.DataFrame.max"]], "max_horizontal() (polars.dataframe method)": [[208, "polars.DataFrame.max_horizontal"]], "mean() (polars.dataframe method)": [[209, "polars.DataFrame.mean"]], "mean_horizontal() (polars.dataframe method)": [[210, "polars.DataFrame.mean_horizontal"]], "median() (polars.dataframe method)": [[211, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[212, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[213, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[214, "polars.DataFrame.min"]], "min_horizontal() (polars.dataframe method)": [[215, "polars.DataFrame.min_horizontal"]], "n_chunks() (polars.dataframe method)": [[216, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[217, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[218, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[219, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[220, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[221, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[222, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[223, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[224, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[225, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[226, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[227, "polars.DataFrame.replace_at_idx"]], "replace_column() (polars.dataframe method)": [[228, "polars.DataFrame.replace_column"]], "reverse() (polars.dataframe method)": [[229, "polars.DataFrame.reverse"]], "rolling() (polars.dataframe method)": [[230, "polars.DataFrame.rolling"]], "row() (polars.dataframe method)": [[231, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[232, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[233, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[234, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[235, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[236, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[237, "polars.DataFrame.select_seq"]], "set_sorted() (polars.dataframe method)": [[238, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[239, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[240, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[241, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[242, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[243, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[244, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[245, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[246, "polars.DataFrame.sum"]], "sum_horizontal() (polars.dataframe method)": [[247, "polars.DataFrame.sum_horizontal"]], "tail() (polars.dataframe method)": [[248, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[249, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[250, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[251, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[252, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[253, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[254, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[255, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[256, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[257, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[258, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[259, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[260, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[261, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[262, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[263, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[264, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[265, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[266, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[267, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[268, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[269, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[270, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[271, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[272, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[273, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[274, "polars.dataframe.group_by.GroupBy.all"]], "apply() (polars.dataframe.group_by.groupby method)": [[275, "polars.dataframe.group_by.GroupBy.apply"]], "count() (polars.dataframe.group_by.groupby method)": [[276, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[277, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[278, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[279, "polars.dataframe.group_by.GroupBy.last"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[280, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[281, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[282, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[283, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[284, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[285, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[286, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[287, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[288, "polars.dataframe.group_by.GroupBy.tail"]], "abs() (polars.expr method)": [[300, "polars.Expr.abs"]], "add() (polars.expr method)": [[301, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[302, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[303, "polars.Expr.alias"]], "all() (polars.expr method)": [[304, "polars.Expr.all"]], "and_() (polars.expr method)": [[305, "polars.Expr.and_"]], "any() (polars.expr method)": [[306, "polars.Expr.any"]], "append() (polars.expr method)": [[307, "polars.Expr.append"]], "apply() (polars.expr method)": [[308, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[309, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[310, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[311, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[312, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[313, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[314, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[315, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[316, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[317, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[318, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[319, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[320, "polars.Expr.arg_unique"]], "max() (polars.expr.arr method)": [[321, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[322, "polars.Expr.arr.min"]], "sum() (polars.expr.arr method)": [[323, "polars.Expr.arr.sum"]], "to_list() (polars.expr.arr method)": [[324, "polars.Expr.arr.to_list"]], "unique() (polars.expr.arr method)": [[325, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[326, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[327, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[328, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[329, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[330, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[331, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[332, "polars.Expr.bottom_k"]], "cast() (polars.expr method)": [[333, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[334, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[335, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[336, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[337, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[338, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[339, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[340, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[341, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[342, "polars.Expr.cosh"]], "cot() (polars.expr method)": [[343, "polars.Expr.cot"]], "count() (polars.expr method)": [[344, "polars.Expr.count"]], "cum_count() (polars.expr method)": [[345, "polars.Expr.cum_count"]], "cum_max() (polars.expr method)": [[346, "polars.Expr.cum_max"]], "cum_min() (polars.expr method)": [[347, "polars.Expr.cum_min"]], "cum_prod() (polars.expr method)": [[348, "polars.Expr.cum_prod"]], "cum_sum() (polars.expr method)": [[349, "polars.Expr.cum_sum"]], "cumcount() (polars.expr method)": [[350, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[351, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[352, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[353, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[354, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[355, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[356, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[357, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[358, "polars.Expr.diff"]], "dot() (polars.expr method)": [[359, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[360, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[361, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[362, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[363, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[364, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[365, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[366, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[367, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[368, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[369, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[370, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[371, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[372, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[373, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[374, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[375, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[376, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[377, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[378, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[379, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[380, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[381, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[382, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[383, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[384, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[385, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[386, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[387, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[388, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[389, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[390, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[391, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[392, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[393, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[394, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[395, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[396, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[397, "polars.Expr.dt.to_string"]], "total_days() (polars.expr.dt method)": [[398, "polars.Expr.dt.total_days"]], "total_hours() (polars.expr.dt method)": [[399, "polars.Expr.dt.total_hours"]], "total_microseconds() (polars.expr.dt method)": [[400, "polars.Expr.dt.total_microseconds"]], "total_milliseconds() (polars.expr.dt method)": [[401, "polars.Expr.dt.total_milliseconds"]], "total_minutes() (polars.expr.dt method)": [[402, "polars.Expr.dt.total_minutes"]], "total_nanoseconds() (polars.expr.dt method)": [[403, "polars.Expr.dt.total_nanoseconds"]], "total_seconds() (polars.expr.dt method)": [[404, "polars.Expr.dt.total_seconds"]], "truncate() (polars.expr.dt method)": [[405, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[406, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[407, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[408, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[409, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[410, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[411, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[412, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[413, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[414, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[415, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[416, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[417, "polars.Expr.exp"]], "explode() (polars.expr method)": [[418, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[419, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[420, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[421, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[422, "polars.Expr.filter"]], "first() (polars.expr method)": [[423, "polars.Expr.first"]], "flatten() (polars.expr method)": [[424, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[425, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[426, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[427, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[428, "polars.Expr.from_json"]], "gather() (polars.expr method)": [[429, "polars.Expr.gather"]], "gather_every() (polars.expr method)": [[430, "polars.Expr.gather_every"]], "ge() (polars.expr method)": [[431, "polars.Expr.ge"]], "get() (polars.expr method)": [[432, "polars.Expr.get"]], "gt() (polars.expr method)": [[433, "polars.Expr.gt"]], "hash() (polars.expr method)": [[434, "polars.Expr.hash"]], "head() (polars.expr method)": [[435, "polars.Expr.head"]], "implode() (polars.expr method)": [[436, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[437, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[438, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[439, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[440, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[441, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[442, "polars.Expr.is_first"]], "is_first_distinct() (polars.expr method)": [[443, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[444, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[445, "polars.Expr.is_infinite"]], "is_last() (polars.expr method)": [[446, "polars.Expr.is_last"]], "is_last_distinct() (polars.expr method)": [[447, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[448, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[449, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[450, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[451, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[452, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[453, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[454, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[455, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[456, "polars.Expr.last"]], "le() (polars.expr method)": [[457, "polars.Expr.le"]], "len() (polars.expr method)": [[458, "polars.Expr.len"]], "limit() (polars.expr method)": [[459, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[460, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[461, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[462, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[463, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[464, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[465, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[466, "polars.Expr.list.count_match"]], "count_matches() (polars.expr.list method)": [[467, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[468, "polars.Expr.list.diff"]], "drop_nulls() (polars.expr.list method)": [[469, "polars.Expr.list.drop_nulls"]], "eval() (polars.expr.list method)": [[470, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[471, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[472, "polars.Expr.list.first"]], "gather() (polars.expr.list method)": [[473, "polars.Expr.list.gather"]], "get() (polars.expr.list method)": [[474, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[475, "polars.Expr.list.head"]], "join() (polars.expr.list method)": [[476, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[477, "polars.Expr.list.last"]], "len() (polars.expr.list method)": [[478, "polars.Expr.list.len"]], "lengths() (polars.expr.list method)": [[479, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[480, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[481, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[482, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[483, "polars.Expr.list.reverse"]], "sample() (polars.expr.list method)": [[484, "polars.Expr.list.sample"]], "set_difference() (polars.expr.list method)": [[485, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[486, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[487, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[488, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[489, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[490, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[491, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[492, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[493, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[494, "polars.Expr.list.take"]], "to_array() (polars.expr.list method)": [[495, "polars.Expr.list.to_array"]], "to_struct() (polars.expr.list method)": [[496, "polars.Expr.list.to_struct"]], "unique() (polars.expr.list method)": [[497, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[498, "polars.Expr.log"]], "log10() (polars.expr method)": [[499, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[500, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[501, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[502, "polars.Expr.lt"]], "map() (polars.expr method)": [[503, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[504, "polars.Expr.map_alias"]], "map_batches() (polars.expr method)": [[505, "polars.Expr.map_batches"]], "map_dict() (polars.expr method)": [[506, "polars.Expr.map_dict"]], "map_elements() (polars.expr method)": [[507, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[508, "polars.Expr.max"]], "mean() (polars.expr method)": [[509, "polars.Expr.mean"]], "median() (polars.expr method)": [[510, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[511, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[512, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[513, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[514, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[515, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[516, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[517, "polars.Expr.meta.root_names"]], "tree_format() (polars.expr.meta method)": [[518, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[519, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[520, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[521, "polars.Expr.min"]], "mod() (polars.expr method)": [[522, "polars.Expr.mod"]], "mode() (polars.expr method)": [[523, "polars.Expr.mode"]], "mul() (polars.expr method)": [[524, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[525, "polars.Expr.n_unique"]], "keep() (polars.expr.name method)": [[526, "polars.Expr.name.keep"]], "map() (polars.expr.name method)": [[527, "polars.Expr.name.map"]], "prefix() (polars.expr.name method)": [[528, "polars.Expr.name.prefix"]], "suffix() (polars.expr.name method)": [[529, "polars.Expr.name.suffix"]], "to_lowercase() (polars.expr.name method)": [[530, "polars.Expr.name.to_lowercase"]], "to_uppercase() (polars.expr.name method)": [[531, "polars.Expr.name.to_uppercase"]], "nan_max() (polars.expr method)": [[532, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[533, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[534, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[535, "polars.Expr.ne_missing"]], "not_() (polars.expr method)": [[536, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[537, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[538, "polars.Expr.or_"]], "over() (polars.expr method)": [[539, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[540, "polars.Expr.pct_change"]], "peak_max() (polars.expr method)": [[541, "polars.Expr.peak_max"]], "peak_min() (polars.expr method)": [[542, "polars.Expr.peak_min"]], "pipe() (polars.expr method)": [[543, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[544, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[545, "polars.Expr.prefix"]], "product() (polars.expr method)": [[546, "polars.Expr.product"]], "qcut() (polars.expr method)": [[547, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[548, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[549, "polars.Expr.radians"]], "rank() (polars.expr method)": [[550, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[551, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[552, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[553, "polars.Expr.repeat_by"]], "replace() (polars.expr method)": [[554, "polars.Expr.replace"]], "reshape() (polars.expr method)": [[555, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[556, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[557, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[558, "polars.Expr.rle_id"]], "rolling() (polars.expr method)": [[559, "polars.Expr.rolling"]], "rolling_apply() (polars.expr method)": [[560, "polars.Expr.rolling_apply"]], "rolling_map() (polars.expr method)": [[561, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[562, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[563, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[564, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[565, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[566, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[567, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[568, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[569, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[570, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[571, "polars.Expr.round"]], "round_sig_figs() (polars.expr method)": [[572, "polars.Expr.round_sig_figs"]], "sample() (polars.expr method)": [[573, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[574, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[575, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[576, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[577, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[578, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[579, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[580, "polars.Expr.sign"]], "sin() (polars.expr method)": [[581, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[582, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[583, "polars.Expr.skew"]], "slice() (polars.expr method)": [[584, "polars.Expr.slice"]], "sort() (polars.expr method)": [[585, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[586, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[587, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[588, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[589, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[590, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[591, "polars.Expr.str.count_match"]], "count_matches() (polars.expr.str method)": [[592, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[593, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[594, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[595, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[596, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[597, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[598, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[599, "polars.Expr.str.extract_groups"]], "json_decode() (polars.expr.str method)": [[600, "polars.Expr.str.json_decode"]], "json_extract() (polars.expr.str method)": [[601, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[602, "polars.Expr.str.json_path_match"]], "len_bytes() (polars.expr.str method)": [[603, "polars.Expr.str.len_bytes"]], "len_chars() (polars.expr.str method)": [[604, "polars.Expr.str.len_chars"]], "lengths() (polars.expr.str method)": [[605, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[606, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[607, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[608, "polars.Expr.str.n_chars"]], "pad_end() (polars.expr.str method)": [[609, "polars.Expr.str.pad_end"]], "pad_start() (polars.expr.str method)": [[610, "polars.Expr.str.pad_start"]], "parse_int() (polars.expr.str method)": [[611, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[612, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[613, "polars.Expr.str.replace_all"]], "reverse() (polars.expr.str method)": [[614, "polars.Expr.str.reverse"]], "rjust() (polars.expr.str method)": [[615, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[616, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[617, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[618, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[619, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[620, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[621, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[622, "polars.Expr.str.strip"]], "strip_chars() (polars.expr.str method)": [[623, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[624, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[625, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[626, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[627, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[628, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[629, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[630, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[631, "polars.Expr.str.to_decimal"]], "to_integer() (polars.expr.str method)": [[632, "polars.Expr.str.to_integer"]], "to_lowercase() (polars.expr.str method)": [[633, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[634, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[635, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[636, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[637, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[638, "polars.Expr.struct.field"]], "json_encode() (polars.expr.struct method)": [[639, "polars.Expr.struct.json_encode"]], "rename_fields() (polars.expr.struct method)": [[640, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[641, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[642, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[643, "polars.Expr.sum"]], "tail() (polars.expr method)": [[644, "polars.Expr.tail"]], "take() (polars.expr method)": [[645, "polars.Expr.take"]], "take_every() (polars.expr method)": [[646, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[647, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[648, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[649, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[650, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[651, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[652, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[653, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[654, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[655, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[656, "polars.Expr.var"]], "where() (polars.expr method)": [[657, "polars.Expr.where"]], "xor() (polars.expr method)": [[658, "polars.Expr.xor"]], "all() (in module polars)": [[659, "polars.all"]], "all_horizontal() (in module polars)": [[660, "polars.all_horizontal"]], "any() (in module polars)": [[661, "polars.any"]], "any_horizontal() (in module polars)": [[662, "polars.any_horizontal"]], "apply() (in module polars)": [[663, "polars.apply"]], "approx_n_unique() (in module polars)": [[664, "polars.approx_n_unique"]], "arange() (in module polars)": [[665, "polars.arange"]], "arctan2() (in module polars)": [[666, "polars.arctan2"]], "arctan2d() (in module polars)": [[667, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[668, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[669, "polars.arg_where"]], "coalesce() (in module polars)": [[670, "polars.coalesce"]], "concat_list() (in module polars)": [[671, "polars.concat_list"]], "concat_str() (in module polars)": [[672, "polars.concat_str"]], "corr() (in module polars)": [[673, "polars.corr"]], "count() (in module polars)": [[674, "polars.count"]], "cov() (in module polars)": [[675, "polars.cov"]], "cum_fold() (in module polars)": [[676, "polars.cum_fold"]], "cum_reduce() (in module polars)": [[677, "polars.cum_reduce"]], "cum_sum() (in module polars)": [[678, "polars.cum_sum"]], "cum_sum_horizontal() (in module polars)": [[679, "polars.cum_sum_horizontal"]], "cumfold() (in module polars)": [[680, "polars.cumfold"]], "cumreduce() (in module polars)": [[681, "polars.cumreduce"]], "cumsum() (in module polars)": [[682, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[683, "polars.cumsum_horizontal"]], "date() (in module polars)": [[684, "polars.date"]], "date_range() (in module polars)": [[685, "polars.date_range"]], "date_ranges() (in module polars)": [[686, "polars.date_ranges"]], "datetime() (in module polars)": [[687, "polars.datetime"]], "datetime_range() (in module polars)": [[688, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[689, "polars.datetime_ranges"]], "duration() (in module polars)": [[690, "polars.duration"]], "element() (in module polars)": [[691, "polars.element"]], "exclude() (in module polars)": [[692, "polars.exclude"]], "first() (in module polars)": [[693, "polars.first"]], "fold() (in module polars)": [[694, "polars.fold"]], "format() (in module polars)": [[695, "polars.format"]], "from_epoch() (in module polars)": [[696, "polars.from_epoch"]], "groups() (in module polars)": [[697, "polars.groups"]], "head() (in module polars)": [[698, "polars.head"]], "implode() (in module polars)": [[699, "polars.implode"]], "int_range() (in module polars)": [[700, "polars.int_range"]], "int_ranges() (in module polars)": [[701, "polars.int_ranges"]], "last() (in module polars)": [[702, "polars.last"]], "lit() (in module polars)": [[703, "polars.lit"]], "map() (in module polars)": [[704, "polars.map"]], "map_batches() (in module polars)": [[705, "polars.map_batches"]], "map_groups() (in module polars)": [[706, "polars.map_groups"]], "max() (in module polars)": [[707, "polars.max"]], "max_horizontal() (in module polars)": [[708, "polars.max_horizontal"]], "mean() (in module polars)": [[709, "polars.mean"]], "median() (in module polars)": [[710, "polars.median"]], "min() (in module polars)": [[711, "polars.min"]], "min_horizontal() (in module polars)": [[712, "polars.min_horizontal"]], "n_unique() (in module polars)": [[713, "polars.n_unique"]], "ones() (in module polars)": [[714, "polars.ones"]], "quantile() (in module polars)": [[715, "polars.quantile"]], "reduce() (in module polars)": [[716, "polars.reduce"]], "repeat() (in module polars)": [[717, "polars.repeat"]], "rolling_corr() (in module polars)": [[718, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[719, "polars.rolling_cov"]], "select() (in module polars)": [[720, "polars.select"]], "sql_expr() (in module polars)": [[721, "polars.sql_expr"]], "std() (in module polars)": [[722, "polars.std"]], "struct() (in module polars)": [[723, "polars.struct"]], "sum() (in module polars)": [[724, "polars.sum"]], "sum_horizontal() (in module polars)": [[725, "polars.sum_horizontal"]], "tail() (in module polars)": [[726, "polars.tail"]], "time() (in module polars)": [[727, "polars.time"]], "time_range() (in module polars)": [[728, "polars.time_range"]], "time_ranges() (in module polars)": [[729, "polars.time_ranges"]], "var() (in module polars)": [[730, "polars.var"]], "when() (in module polars)": [[731, "polars.when"]], "zeros() (in module polars)": [[732, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[756, "polars.LazyFrame.approx_n_unique"]], "bottom_k() (polars.lazyframe method)": [[757, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[758, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[759, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[760, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[761, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[762, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[763, "polars.LazyFrame.collect_async"]], "columns (polars.lazyframe property)": [[764, "polars.LazyFrame.columns"]], "deserialize() (polars.lazyframe class method)": [[765, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[766, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[767, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[768, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[769, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[770, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[771, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[772, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[773, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[774, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[775, "polars.LazyFrame.first"]], "gather_every() (polars.lazyframe method)": [[776, "polars.LazyFrame.gather_every"]], "group_by() (polars.lazyframe method)": [[777, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[778, "polars.LazyFrame.group_by_dynamic"]], "group_by_rolling() (polars.lazyframe method)": [[779, "polars.LazyFrame.group_by_rolling"]], "groupby() (polars.lazyframe method)": [[780, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[781, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[782, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[783, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[784, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[785, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[786, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[787, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[788, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[789, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[790, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[791, "polars.LazyFrame.map"]], "map_batches() (polars.lazyframe method)": [[792, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[793, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[794, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[795, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[796, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[797, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[798, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[799, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[800, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[801, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[802, "polars.LazyFrame.quantile"]], "rename() (polars.lazyframe method)": [[803, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[804, "polars.LazyFrame.reverse"]], "rolling() (polars.lazyframe method)": [[805, "polars.LazyFrame.rolling"]], "schema (polars.lazyframe property)": [[806, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[807, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[808, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[809, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[810, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[811, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[812, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[813, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[814, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[815, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[816, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[817, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[818, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[819, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[820, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[821, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[822, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[823, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[824, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[825, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[826, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[827, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[828, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[829, "polars.LazyFrame.with_row_count"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[830, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[831, "polars.lazyframe.group_by.LazyGroupBy.all"]], "apply() (polars.lazyframe.group_by.lazygroupby method)": [[832, "polars.lazyframe.group_by.LazyGroupBy.apply"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[833, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[834, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[835, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[836, "polars.lazyframe.group_by.LazyGroupBy.last"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[837, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[838, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[839, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[840, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[841, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[842, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[843, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[844, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[845, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[852, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[852, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[852, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[852, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[852, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[852, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[852, "polars.selectors.datetime"]], "duration() (in module polars.selectors)": [[852, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[852, "polars.selectors.ends_with"]], "expand_selector() (in module polars.selectors)": [[852, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[852, "polars.selectors.first"]], "float() (in module polars.selectors)": [[852, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[852, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[852, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[852, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[852, "polars.selectors.matches"]], "module": [[852, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[852, "polars.selectors.numeric"]], "polars.selectors": [[852, "module-polars.selectors"]], "starts_with() (in module polars.selectors)": [[852, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[852, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[852, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[852, "polars.selectors.time"]], "abs() (polars.series method)": [[854, "polars.Series.abs"]], "alias() (polars.series method)": [[855, "polars.Series.alias"]], "all() (polars.series method)": [[856, "polars.Series.all"]], "any() (polars.series method)": [[857, "polars.Series.any"]], "append() (polars.series method)": [[858, "polars.Series.append"]], "apply() (polars.series method)": [[859, "polars.Series.apply"]], "arccos() (polars.series method)": [[860, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[861, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[862, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[863, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[864, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[865, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[866, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[867, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[868, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[869, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[870, "polars.Series.arg_unique"]], "max() (polars.series.arr method)": [[871, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[872, "polars.Series.arr.min"]], "sum() (polars.series.arr method)": [[873, "polars.Series.arr.sum"]], "to_list() (polars.series.arr method)": [[874, "polars.Series.arr.to_list"]], "unique() (polars.series.arr method)": [[875, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[876, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[877, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[878, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[879, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[880, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[881, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[882, "polars.Series.cast"]], "cat (polars.series attribute)": [[883, "polars.Series.cat"]], "get_categories() (polars.series.cat method)": [[884, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[885, "polars.Series.cat.is_local"]], "set_ordering() (polars.series.cat method)": [[886, "polars.Series.cat.set_ordering"]], "to_local() (polars.series.cat method)": [[887, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[888, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[889, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[890, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[891, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[892, "polars.Series.clear"]], "clip() (polars.series method)": [[893, "polars.Series.clip"]], "clip_max() (polars.series method)": [[894, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[895, "polars.Series.clip_min"]], "clone() (polars.series method)": [[896, "polars.Series.clone"]], "cos() (polars.series method)": [[897, "polars.Series.cos"]], "cosh() (polars.series method)": [[898, "polars.Series.cosh"]], "cot() (polars.series method)": [[899, "polars.Series.cot"]], "cum_max() (polars.series method)": [[900, "polars.Series.cum_max"]], "cum_min() (polars.series method)": [[901, "polars.Series.cum_min"]], "cum_prod() (polars.series method)": [[902, "polars.Series.cum_prod"]], "cum_sum() (polars.series method)": [[903, "polars.Series.cum_sum"]], "cummax() (polars.series method)": [[904, "polars.Series.cummax"]], "cummin() (polars.series method)": [[905, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[906, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[907, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[908, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[909, "polars.Series.cut"]], "describe() (polars.series method)": [[910, "polars.Series.describe"]], "diff() (polars.series method)": [[911, "polars.Series.diff"]], "dot() (polars.series method)": [[912, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[913, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[914, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[915, "polars.Series.dt"]], "base_utc_offset() (polars.series.dt method)": [[916, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[917, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[918, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[919, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[920, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[921, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[922, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[923, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[924, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[925, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[926, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[927, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[928, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[929, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[930, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[931, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[932, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[933, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[934, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[935, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[936, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[937, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[938, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[939, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[940, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[941, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[942, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[943, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[944, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[945, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[946, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[947, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[948, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[949, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[950, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[951, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[952, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[953, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[954, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[955, "polars.Series.dt.to_string"]], "total_days() (polars.series.dt method)": [[956, "polars.Series.dt.total_days"]], "total_hours() (polars.series.dt method)": [[957, "polars.Series.dt.total_hours"]], "total_microseconds() (polars.series.dt method)": [[958, "polars.Series.dt.total_microseconds"]], "total_milliseconds() (polars.series.dt method)": [[959, "polars.Series.dt.total_milliseconds"]], "total_minutes() (polars.series.dt method)": [[960, "polars.Series.dt.total_minutes"]], "total_nanoseconds() (polars.series.dt method)": [[961, "polars.Series.dt.total_nanoseconds"]], "total_seconds() (polars.series.dt method)": [[962, "polars.Series.dt.total_seconds"]], "truncate() (polars.series.dt method)": [[963, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[964, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[965, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[966, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[967, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[968, "polars.Series.dtype"]], "entropy() (polars.series method)": [[969, "polars.Series.entropy"]], "equals() (polars.series method)": [[970, "polars.Series.equals"]], "estimated_size() (polars.series method)": [[971, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[972, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[973, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[974, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[975, "polars.Series.exp"]], "explode() (polars.series method)": [[976, "polars.Series.explode"]], "extend() (polars.series method)": [[977, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[978, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[979, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[980, "polars.Series.fill_null"]], "filter() (polars.series method)": [[981, "polars.Series.filter"]], "flags (polars.series attribute)": [[982, "polars.Series.flags"]], "floor() (polars.series method)": [[983, "polars.Series.floor"]], "gather() (polars.series method)": [[984, "polars.Series.gather"]], "gather_every() (polars.series method)": [[985, "polars.Series.gather_every"]], "get_chunks() (polars.series method)": [[986, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[987, "polars.Series.has_validity"]], "hash() (polars.series method)": [[988, "polars.Series.hash"]], "head() (polars.series method)": [[989, "polars.Series.head"]], "hist() (polars.series method)": [[990, "polars.Series.hist"]], "implode() (polars.series method)": [[991, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[992, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[993, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[994, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[995, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[996, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[997, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[998, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[999, "polars.Series.is_first"]], "is_first_distinct() (polars.series method)": [[1000, "polars.Series.is_first_distinct"]], "is_float() (polars.series method)": [[1001, "polars.Series.is_float"]], "is_in() (polars.series method)": [[1002, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[1003, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[1004, "polars.Series.is_integer"]], "is_last() (polars.series method)": [[1005, "polars.Series.is_last"]], "is_last_distinct() (polars.series method)": [[1006, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[1007, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[1008, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[1009, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[1010, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[1011, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[1012, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[1013, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[1014, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[1015, "polars.Series.is_utf8"]], "item() (polars.series method)": [[1016, "polars.Series.item"]], "kurtosis() (polars.series method)": [[1017, "polars.Series.kurtosis"]], "len() (polars.series method)": [[1018, "polars.Series.len"]], "limit() (polars.series method)": [[1019, "polars.Series.limit"]], "list (polars.series attribute)": [[1020, "polars.Series.list"]], "all() (polars.series.list method)": [[1021, "polars.Series.list.all"]], "any() (polars.series.list method)": [[1022, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[1023, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[1024, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[1025, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[1026, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[1027, "polars.Series.list.count_match"]], "count_matches() (polars.series.list method)": [[1028, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[1029, "polars.Series.list.diff"]], "drop_nulls() (polars.series.list method)": [[1030, "polars.Series.list.drop_nulls"]], "eval() (polars.series.list method)": [[1031, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[1032, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[1033, "polars.Series.list.first"]], "gather() (polars.series.list method)": [[1034, "polars.Series.list.gather"]], "get() (polars.series.list method)": [[1035, "polars.Series.list.get"]], "head() (polars.series.list method)": [[1036, "polars.Series.list.head"]], "join() (polars.series.list method)": [[1037, "polars.Series.list.join"]], "last() (polars.series.list method)": [[1038, "polars.Series.list.last"]], "len() (polars.series.list method)": [[1039, "polars.Series.list.len"]], "lengths() (polars.series.list method)": [[1040, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[1041, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[1042, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[1043, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[1044, "polars.Series.list.reverse"]], "sample() (polars.series.list method)": [[1045, "polars.Series.list.sample"]], "set_difference() (polars.series.list method)": [[1046, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[1047, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[1048, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[1049, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[1050, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[1051, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[1052, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[1053, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[1054, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[1055, "polars.Series.list.take"]], "to_array() (polars.series.list method)": [[1056, "polars.Series.list.to_array"]], "to_struct() (polars.series.list method)": [[1057, "polars.Series.list.to_struct"]], "unique() (polars.series.list method)": [[1058, "polars.Series.list.unique"]], "log() (polars.series method)": [[1059, "polars.Series.log"]], "log10() (polars.series method)": [[1060, "polars.Series.log10"]], "log1p() (polars.series method)": [[1061, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[1062, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[1063, "polars.Series.map_dict"]], "map_elements() (polars.series method)": [[1064, "polars.Series.map_elements"]], "max() (polars.series method)": [[1065, "polars.Series.max"]], "mean() (polars.series method)": [[1066, "polars.Series.mean"]], "median() (polars.series method)": [[1067, "polars.Series.median"]], "min() (polars.series method)": [[1068, "polars.Series.min"]], "mode() (polars.series method)": [[1069, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[1070, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[1071, "polars.Series.n_unique"]], "name (polars.series attribute)": [[1072, "polars.Series.name"]], "nan_max() (polars.series method)": [[1073, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[1074, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[1075, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[1076, "polars.Series.not_"]], "null_count() (polars.series method)": [[1077, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1078, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1079, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1080, "polars.Series.peak_min"]], "product() (polars.series method)": [[1081, "polars.Series.product"]], "qcut() (polars.series method)": [[1082, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1083, "polars.Series.quantile"]], "rank() (polars.series method)": [[1084, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1085, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1086, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1087, "polars.Series.rename"]], "replace() (polars.series method)": [[1088, "polars.Series.replace"]], "reshape() (polars.series method)": [[1089, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1090, "polars.Series.reverse"]], "rle() (polars.series method)": [[1091, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1092, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[1093, "polars.Series.rolling_apply"]], "rolling_map() (polars.series method)": [[1094, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1095, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1096, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1097, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1098, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1099, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1100, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1101, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1102, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1103, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1104, "polars.Series.round"]], "round_sig_figs() (polars.series method)": [[1105, "polars.Series.round_sig_figs"]], "sample() (polars.series method)": [[1106, "polars.Series.sample"]], "scatter() (polars.series method)": [[1107, "polars.Series.scatter"]], "search_sorted() (polars.series method)": [[1108, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[1109, "polars.Series.series_equal"]], "set() (polars.series method)": [[1110, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[1111, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[1112, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1113, "polars.Series.shape"]], "shift() (polars.series method)": [[1114, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[1115, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[1116, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1117, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1118, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1119, "polars.Series.sign"]], "sin() (polars.series method)": [[1120, "polars.Series.sin"]], "sinh() (polars.series method)": [[1121, "polars.Series.sinh"]], "skew() (polars.series method)": [[1122, "polars.Series.skew"]], "slice() (polars.series method)": [[1123, "polars.Series.slice"]], "sort() (polars.series method)": [[1124, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1125, "polars.Series.sqrt"]], "std() (polars.series method)": [[1126, "polars.Series.std"]], "str (polars.series attribute)": [[1127, "polars.Series.str"]], "concat() (polars.series.str method)": [[1128, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1129, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[1130, "polars.Series.str.count_match"]], "count_matches() (polars.series.str method)": [[1131, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1132, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1133, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1134, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1135, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1136, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1137, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1138, "polars.Series.str.extract_groups"]], "json_decode() (polars.series.str method)": [[1139, "polars.Series.str.json_decode"]], "json_extract() (polars.series.str method)": [[1140, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[1141, "polars.Series.str.json_path_match"]], "len_bytes() (polars.series.str method)": [[1142, "polars.Series.str.len_bytes"]], "len_chars() (polars.series.str method)": [[1143, "polars.Series.str.len_chars"]], "lengths() (polars.series.str method)": [[1144, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1145, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1146, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1147, "polars.Series.str.n_chars"]], "pad_end() (polars.series.str method)": [[1148, "polars.Series.str.pad_end"]], "pad_start() (polars.series.str method)": [[1149, "polars.Series.str.pad_start"]], "parse_int() (polars.series.str method)": [[1150, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1151, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1152, "polars.Series.str.replace_all"]], "reverse() (polars.series.str method)": [[1153, "polars.Series.str.reverse"]], "rjust() (polars.series.str method)": [[1154, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1155, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1156, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1157, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1158, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1159, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1160, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1161, "polars.Series.str.strip"]], "strip_chars() (polars.series.str method)": [[1162, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1163, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1164, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1165, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1166, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1167, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[1168, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1169, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1170, "polars.Series.str.to_decimal"]], "to_integer() (polars.series.str method)": [[1171, "polars.Series.str.to_integer"]], "to_lowercase() (polars.series.str method)": [[1172, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1173, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1174, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1175, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1176, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1177, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1178, "polars.Series.struct.fields"]], "json_encode (polars.series.struct attribute)": [[1179, "polars.Series.struct.json_encode"]], "rename_fields() (polars.series.struct method)": [[1180, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1181, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1182, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1183, "polars.Series.sum"]], "tail() (polars.series method)": [[1184, "polars.Series.tail"]], "take() (polars.series method)": [[1185, "polars.Series.take"]], "take_every() (polars.series method)": [[1186, "polars.Series.take_every"]], "tan() (polars.series method)": [[1187, "polars.Series.tan"]], "tanh() (polars.series method)": [[1188, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1189, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1190, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1191, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1192, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1193, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1194, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1195, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1196, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1197, "polars.Series.top_k"]], "unique() (polars.series method)": [[1198, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1199, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1200, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1201, "polars.Series.value_counts"]], "var() (polars.series method)": [[1202, "polars.Series.var"]], "view() (polars.series method)": [[1203, "polars.Series.view"]], "zip_with() (polars.series method)": [[1204, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1220, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1220, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1220, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1220, "polars.SQLContext.__init__"]]}})